<?php


use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class DependencyInjectionContainer_fc18729a788407d54814c546fa57bdff160a54c5 extends Container
{
    protected $parameters = [];
    protected $getService;

    public function __construct()
    {
        $this->getService = \Closure::fromCallable([$this, 'getService']);
        $this->services = $this->privates = [];
        $this->syntheticIds = [
            '_early.Composer\\Autoload\\ClassLoader' => true,
            '_early.TYPO3\\CMS\\Core\\Configuration\\ConfigurationManager' => true,
            '_early.TYPO3\\CMS\\Core\\Core\\ApplicationContext' => true,
            '_early.TYPO3\\CMS\\Core\\Core\\RequestId' => true,
            '_early.TYPO3\\CMS\\Core\\DependencyInjection\\ContainerBuilder' => true,
            '_early.TYPO3\\CMS\\Core\\Log\\LogManager' => true,
            '_early.TYPO3\\CMS\\Core\\Package\\PackageManager' => true,
            '_early.boot-service' => true,
            '_early.boot.state' => true,
            '_early.cache.assets' => true,
            '_early.cache.core' => true,
            '_early.cache.di' => true,
            'service_provider_registry' => true,
        ];
        $this->methodMap = [
            'Masterminds\\HTML5' => 'getHTML5Service',
            'Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1' => 'getEventDispatcherInterfaceDecorated1Service',
            'Psr\\Http\\Client\\ClientInterface' => 'getClientInterfaceService',
            'Psr\\Http\\Message\\ResponseFactoryInterface' => 'getResponseFactoryInterfaceService',
            'Psr\\Http\\Message\\ServerRequestFactoryInterface' => 'getServerRequestFactoryInterfaceService',
            'Psr\\Http\\Message\\StreamFactoryInterface' => 'getStreamFactoryInterfaceService',
            'Psr\\Http\\Message\\UploadedFileFactoryInterface' => 'getUploadedFileFactoryInterfaceService',
            'Psr\\Http\\Message\\UriFactoryInterface' => 'getUriFactoryInterfaceService',
            'Symfony\\Component\\Console\\Command\\HelpCommand' => 'getHelpCommandService',
            'TYPO3Fluid\\Fluid\\Core\\Parser\\TemplateProcessor\\EscapingModifierTemplateProcessor' => 'getEscapingModifierTemplateProcessorService',
            'TYPO3Fluid\\Fluid\\Core\\Parser\\TemplateProcessor\\NamespaceDetectionTemplateProcessor' => 'getNamespaceDetectionTemplateProcessorService',
            'TYPO3Fluid\\Fluid\\Core\\Parser\\TemplateProcessor\\PassthroughSourceModifierTemplateProcessor' => 'getPassthroughSourceModifierTemplateProcessorService',
            'TYPO3Fluid\\Fluid\\ViewHelpers\\AliasViewHelper' => 'getAliasViewHelperService',
            'TYPO3Fluid\\Fluid\\ViewHelpers\\Cache\\DisableViewHelper' => 'getDisableViewHelperService',
            'TYPO3Fluid\\Fluid\\ViewHelpers\\Cache\\StaticViewHelper' => 'getStaticViewHelperService',
            'TYPO3Fluid\\Fluid\\ViewHelpers\\Cache\\WarmupViewHelper' => 'getWarmupViewHelperService',
            'TYPO3Fluid\\Fluid\\ViewHelpers\\CaseViewHelper' => 'getCaseViewHelperService',
            'TYPO3Fluid\\Fluid\\ViewHelpers\\CommentViewHelper' => 'getCommentViewHelperService',
            'TYPO3Fluid\\Fluid\\ViewHelpers\\CountViewHelper' => 'getCountViewHelperService',
            'TYPO3Fluid\\Fluid\\ViewHelpers\\CycleViewHelper' => 'getCycleViewHelperService',
            'TYPO3Fluid\\Fluid\\ViewHelpers\\DebugViewHelper' => 'getDebugViewHelperService',
            'TYPO3Fluid\\Fluid\\ViewHelpers\\DefaultCaseViewHelper' => 'getDefaultCaseViewHelperService',
            'TYPO3Fluid\\Fluid\\ViewHelpers\\ElseViewHelper' => 'getElseViewHelperService',
            'TYPO3Fluid\\Fluid\\ViewHelpers\\ForViewHelper' => 'getForViewHelperService',
            'TYPO3Fluid\\Fluid\\ViewHelpers\\Format\\CdataViewHelper' => 'getCdataViewHelperService',
            'TYPO3Fluid\\Fluid\\ViewHelpers\\Format\\HtmlspecialcharsViewHelper' => 'getHtmlspecialcharsViewHelperService',
            'TYPO3Fluid\\Fluid\\ViewHelpers\\Format\\PrintfViewHelper' => 'getPrintfViewHelperService',
            'TYPO3Fluid\\Fluid\\ViewHelpers\\Format\\RawViewHelper' => 'getRawViewHelperService',
            'TYPO3Fluid\\Fluid\\ViewHelpers\\GroupedForViewHelper' => 'getGroupedForViewHelperService',
            'TYPO3Fluid\\Fluid\\ViewHelpers\\IfViewHelper' => 'getIfViewHelperService',
            'TYPO3Fluid\\Fluid\\ViewHelpers\\InlineViewHelper' => 'getInlineViewHelperService',
            'TYPO3Fluid\\Fluid\\ViewHelpers\\LayoutViewHelper' => 'getLayoutViewHelperService',
            'TYPO3Fluid\\Fluid\\ViewHelpers\\OrViewHelper' => 'getOrViewHelperService',
            'TYPO3Fluid\\Fluid\\ViewHelpers\\RenderViewHelper' => 'getRenderViewHelperService',
            'TYPO3Fluid\\Fluid\\ViewHelpers\\SectionViewHelper' => 'getSectionViewHelperService',
            'TYPO3Fluid\\Fluid\\ViewHelpers\\SpacelessViewHelper' => 'getSpacelessViewHelperService',
            'TYPO3Fluid\\Fluid\\ViewHelpers\\SwitchViewHelper' => 'getSwitchViewHelperService',
            'TYPO3Fluid\\Fluid\\ViewHelpers\\ThenViewHelper' => 'getThenViewHelperService',
            'TYPO3Fluid\\Fluid\\ViewHelpers\\VariableViewHelper' => 'getVariableViewHelperService',
            'TYPO3\\CMS\\Adminpanel\\Controller\\MainController' => 'getMainControllerService',
            'TYPO3\\CMS\\Adminpanel\\Middleware\\AdminPanelDataPersister' => 'getAdminPanelDataPersisterService',
            'TYPO3\\CMS\\Adminpanel\\Middleware\\AdminPanelInitiator' => 'getAdminPanelInitiatorService',
            'TYPO3\\CMS\\Adminpanel\\Middleware\\AdminPanelRenderer' => 'getAdminPanelRendererService',
            'TYPO3\\CMS\\Adminpanel\\Middleware\\SqlLogging' => 'getSqlLoggingService',
            'TYPO3\\CMS\\Adminpanel\\Service\\ConfigurationService' => 'getConfigurationServiceService',
            'TYPO3\\CMS\\Adminpanel\\Service\\EventDispatcher' => 'getEventDispatcherService',
            'TYPO3\\CMS\\Adminpanel\\ViewHelpers\\IsArrayViewHelper' => 'getIsArrayViewHelperService',
            'TYPO3\\CMS\\Adminpanel\\ViewHelpers\\SubModuleRenderViewHelper' => 'getSubModuleRenderViewHelperService',
            'TYPO3\\CMS\\Backend\\Backend\\Shortcut\\ShortcutRepository' => 'getShortcutRepositoryService',
            'TYPO3\\CMS\\Backend\\Backend\\ToolbarItems\\ClearCacheToolbarItem' => 'getClearCacheToolbarItemService',
            'TYPO3\\CMS\\Backend\\Clipboard\\Clipboard' => 'getClipboardService',
            'TYPO3\\CMS\\Backend\\Command\\LockBackendCommand' => 'getLockBackendCommandService',
            'TYPO3\\CMS\\Backend\\Command\\ReferenceIndexUpdateCommand' => 'getReferenceIndexUpdateCommandService',
            'TYPO3\\CMS\\Backend\\Command\\ResetPasswordCommand' => 'getResetPasswordCommandService',
            'TYPO3\\CMS\\Backend\\Command\\UnlockBackendCommand' => 'getUnlockBackendCommandService',
            'TYPO3\\CMS\\Backend\\Controller\\AboutController' => 'getAboutControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\BackendController' => 'getBackendControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\ClipboardController' => 'getClipboardControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\ColumnSelectorController' => 'getColumnSelectorControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\ContentElement\\ElementHistoryController' => 'getElementHistoryControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\ContentElement\\ElementInformationController' => 'getElementInformationControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\ContentElement\\MoveElementController' => 'getMoveElementControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\ContentElement\\NewContentElementController' => 'getNewContentElementControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\DummyController' => 'getDummyControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\EditDocumentController' => 'getEditDocumentControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\File\\FileController' => 'getFileControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\File\\ImageProcessController' => 'getImageProcessControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\HelpController' => 'getHelpControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\LinkBrowserController' => 'getLinkBrowserControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\LoginController' => 'getLoginControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\MfaAjaxController' => 'getMfaAjaxControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\MfaConfigurationController' => 'getMfaConfigurationControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\MfaController' => 'getMfaControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\MfaSetupController' => 'getMfaSetupControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\NewRecordController' => 'getNewRecordControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\PageLayoutController' => 'getPageLayoutControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\Page\\NewMultiplePagesController' => 'getNewMultiplePagesControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\Page\\SortSubPagesController' => 'getSortSubPagesControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\ResetPasswordController' => 'getResetPasswordControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\SiteConfigurationController' => 'getSiteConfigurationControllerService',
            'TYPO3\\CMS\\Backend\\Controller\\SwitchUserController' => 'getSwitchUserControllerService',
            'TYPO3\\CMS\\Backend\\Domain\\Repository\\Module\\BackendModuleRepository' => 'getBackendModuleRepositoryService',
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\SiteDatabaseEditRow' => 'getSiteDatabaseEditRowService',
            'TYPO3\\CMS\\Backend\\History\\RecordHistoryRollback' => 'getRecordHistoryRollbackService',
            'TYPO3\\CMS\\Backend\\Http\\Application' => 'getApplicationService',
            'TYPO3\\CMS\\Backend\\Http\\RequestHandler' => 'getRequestHandlerService',
            'TYPO3\\CMS\\Backend\\Http\\RouteDispatcher' => 'getRouteDispatcherService',
            'TYPO3\\CMS\\Backend\\Middleware\\AdditionalResponseHeaders' => 'getAdditionalResponseHeadersService',
            'TYPO3\\CMS\\Backend\\Middleware\\BackendRouteInitialization' => 'getBackendRouteInitializationService',
            'TYPO3\\CMS\\Backend\\Middleware\\BackendUserAuthenticator' => 'getBackendUserAuthenticatorService',
            'TYPO3\\CMS\\Backend\\Middleware\\ForcedHttpsBackendRedirector' => 'getForcedHttpsBackendRedirectorService',
            'TYPO3\\CMS\\Backend\\Middleware\\LockedBackendGuard' => 'getLockedBackendGuardService',
            'TYPO3\\CMS\\Backend\\Middleware\\OutputCompression' => 'getOutputCompressionService',
            'TYPO3\\CMS\\Backend\\Middleware\\SiteResolver' => 'getSiteResolverService',
            'TYPO3\\CMS\\Backend\\Module\\ModuleStorage' => 'getModuleStorageService',
            'TYPO3\\CMS\\Backend\\RecordList\\ElementBrowserRecordList' => 'getElementBrowserRecordListService',
            'TYPO3\\CMS\\Backend\\Resource\\PublicUrlPrefixer' => 'getPublicUrlPrefixerService',
            'TYPO3\\CMS\\Backend\\Routing\\Router_decorated_1' => 'getRouterDecorated1Service',
            'TYPO3\\CMS\\Backend\\Routing\\UriBuilder' => 'getUriBuilderService',
            'TYPO3\\CMS\\Backend\\Security\\CategoryPermissionsAspect' => 'getCategoryPermissionsAspectService',
            'TYPO3\\CMS\\Backend\\Template\\ModuleTemplate' => 'getModuleTemplateService',
            'TYPO3\\CMS\\Backend\\Template\\ModuleTemplateFactory' => 'getModuleTemplateFactoryService',
            'TYPO3\\CMS\\Backend\\Tree\\View\\ContentCreationPagePositionMap' => 'getContentCreationPagePositionMapService',
            'TYPO3\\CMS\\Backend\\Tree\\View\\ContentMovingPagePositionMap' => 'getContentMovingPagePositionMapService',
            'TYPO3\\CMS\\Backend\\ViewHelpers\\ArrayBrowserViewHelper' => 'getArrayBrowserViewHelperService',
            'TYPO3\\CMS\\Backend\\ViewHelpers\\AvatarViewHelper' => 'getAvatarViewHelperService',
            'TYPO3\\CMS\\Backend\\ViewHelpers\\LanguageColumnViewHelper' => 'getLanguageColumnViewHelperService',
            'TYPO3\\CMS\\Backend\\ViewHelpers\\Link\\EditRecordViewHelper' => 'getEditRecordViewHelperService',
            'TYPO3\\CMS\\Backend\\ViewHelpers\\Link\\NewRecordViewHelper' => 'getNewRecordViewHelperService',
            'TYPO3\\CMS\\Backend\\ViewHelpers\\Mfa\\IfHasStateViewHelper' => 'getIfHasStateViewHelperService',
            'TYPO3\\CMS\\Backend\\ViewHelpers\\ModuleLayoutViewHelper' => 'getModuleLayoutViewHelperService',
            'TYPO3\\CMS\\Backend\\ViewHelpers\\ModuleLayout\\Button\\LinkButtonViewHelper' => 'getLinkButtonViewHelperService',
            'TYPO3\\CMS\\Backend\\ViewHelpers\\ModuleLayout\\Button\\ShortcutButtonViewHelper' => 'getShortcutButtonViewHelperService',
            'TYPO3\\CMS\\Backend\\ViewHelpers\\ModuleLayout\\MenuItemViewHelper' => 'getMenuItemViewHelperService',
            'TYPO3\\CMS\\Backend\\ViewHelpers\\ModuleLayout\\MenuViewHelper' => 'getMenuViewHelperService',
            'TYPO3\\CMS\\Backend\\ViewHelpers\\ModuleLinkViewHelper' => 'getModuleLinkViewHelperService',
            'TYPO3\\CMS\\Backend\\ViewHelpers\\ThumbnailViewHelper' => 'getThumbnailViewHelperService',
            'TYPO3\\CMS\\Backend\\ViewHelpers\\Uri\\EditRecordViewHelper' => 'getEditRecordViewHelper2Service',
            'TYPO3\\CMS\\Backend\\ViewHelpers\\Uri\\NewRecordViewHelper' => 'getNewRecordViewHelper2Service',
            'TYPO3\\CMS\\Backend\\View\\AuthenticationStyleInformation' => 'getAuthenticationStyleInformationService',
            'TYPO3\\CMS\\Backend\\View\\BackendLayoutView' => 'getBackendLayoutViewService',
            'TYPO3\\CMS\\Backend\\View\\BackendLayout\\DataProviderCollection' => 'getDataProviderCollectionService',
            'TYPO3\\CMS\\Backend\\View\\BackendLayout\\DataProviderContext' => 'getDataProviderContextService',
            'TYPO3\\CMS\\Backend\\View\\BackendLayout\\RecordRememberer' => 'getRecordRemembererService',
            'TYPO3\\CMS\\Backend\\View\\BackendTemplateView' => 'getBackendTemplateViewService',
            'TYPO3\\CMS\\Backend\\View\\PageLayoutView' => 'getPageLayoutViewService',
            'TYPO3\\CMS\\Backend\\View\\PageLayoutViewDrawEmptyColposContent' => 'getPageLayoutViewDrawEmptyColposContentService',
            'TYPO3\\CMS\\Belog\\Controller\\BackendLogController' => 'getBackendLogControllerService',
            'TYPO3\\CMS\\Belog\\Controller\\SystemInformationController' => 'getSystemInformationControllerService',
            'TYPO3\\CMS\\Belog\\Domain\\Repository\\LogEntryRepository' => 'getLogEntryRepositoryService',
            'TYPO3\\CMS\\Belog\\Domain\\Repository\\WorkspaceRepository' => 'getWorkspaceRepositoryService',
            'TYPO3\\CMS\\Belog\\ViewHelpers\\Be\\PagePathViewHelper' => 'getPagePathViewHelperService',
            'TYPO3\\CMS\\Belog\\ViewHelpers\\Form\\TranslateLabelSelectViewHelper' => 'getTranslateLabelSelectViewHelperService',
            'TYPO3\\CMS\\Belog\\ViewHelpers\\FormatDetailsViewHelper' => 'getFormatDetailsViewHelperService',
            'TYPO3\\CMS\\Belog\\ViewHelpers\\UsernameViewHelper' => 'getUsernameViewHelperService',
            'TYPO3\\CMS\\Belog\\ViewHelpers\\WorkspaceTitleViewHelper' => 'getWorkspaceTitleViewHelperService',
            'TYPO3\\CMS\\Beuser\\Controller\\BackendUserController' => 'getBackendUserControllerService',
            'TYPO3\\CMS\\Beuser\\Controller\\PermissionController' => 'getPermissionControllerService',
            'TYPO3\\CMS\\Beuser\\Domain\\Repository\\BackendUserGroupRepository' => 'getBackendUserGroupRepositoryService',
            'TYPO3\\CMS\\Beuser\\Domain\\Repository\\BackendUserRepository' => 'getBackendUserRepositoryService',
            'TYPO3\\CMS\\Beuser\\ViewHelpers\\ArrayElementViewHelper' => 'getArrayElementViewHelperService',
            'TYPO3\\CMS\\Beuser\\ViewHelpers\\Display\\TableAccessViewHelper' => 'getTableAccessViewHelperService',
            'TYPO3\\CMS\\Beuser\\ViewHelpers\\MfaStatusViewHelper' => 'getMfaStatusViewHelperService',
            'TYPO3\\CMS\\Beuser\\ViewHelpers\\PermissionsViewHelper' => 'getPermissionsViewHelperService',
            'TYPO3\\CMS\\Beuser\\ViewHelpers\\SpriteIconForRecordViewHelper' => 'getSpriteIconForRecordViewHelperService',
            'TYPO3\\CMS\\Beuser\\ViewHelpers\\SwitchUserViewHelper' => 'getSwitchUserViewHelperService',
            'TYPO3\\CMS\\Core\\Authentication\\GroupResolver' => 'getGroupResolverService',
            'TYPO3\\CMS\\Core\\Authentication\\Mfa\\MfaProviderRegistry' => 'getMfaProviderRegistryService',
            'TYPO3\\CMS\\Core\\Authentication\\Mfa\\Provider\\RecoveryCodesProvider' => 'getRecoveryCodesProviderService',
            'TYPO3\\CMS\\Core\\Authentication\\Mfa\\Provider\\TotpProvider' => 'getTotpProviderService',
            'TYPO3\\CMS\\Core\\Cache\\CacheManager' => 'getCacheManagerService',
            'TYPO3\\CMS\\Core\\Cache\\DatabaseSchemaService' => 'getDatabaseSchemaServiceService',
            'TYPO3\\CMS\\Core\\Category\\CategoryRegistry' => 'getCategoryRegistryService',
            'TYPO3\\CMS\\Core\\Charset\\CharsetConverter' => 'getCharsetConverterService',
            'TYPO3\\CMS\\Core\\Command\\CacheFlushCommand' => 'getCacheFlushCommandService',
            'TYPO3\\CMS\\Core\\Command\\CacheWarmupCommand' => 'getCacheWarmupCommandService',
            'TYPO3\\CMS\\Core\\Command\\DumpAutoloadCommand' => 'getDumpAutoloadCommandService',
            'TYPO3\\CMS\\Core\\Command\\ExtensionListCommand' => 'getExtensionListCommandService',
            'TYPO3\\CMS\\Core\\Command\\ListCommand' => 'getListCommandService',
            'TYPO3\\CMS\\Core\\Command\\SendEmailCommand' => 'getSendEmailCommandService',
            'TYPO3\\CMS\\Core\\Command\\SiteListCommand' => 'getSiteListCommandService',
            'TYPO3\\CMS\\Core\\Command\\SiteShowCommand' => 'getSiteShowCommandService',
            'TYPO3\\CMS\\Core\\Composer\\PackageArtifactBuilder' => 'getPackageArtifactBuilderService',
            'TYPO3\\CMS\\Core\\Configuration\\Loader\\PageTsConfigLoader' => 'getPageTsConfigLoaderService',
            'TYPO3\\CMS\\Core\\Configuration\\SiteConfiguration' => 'getSiteConfigurationService',
            'TYPO3\\CMS\\Core\\Console\\CommandApplication' => 'getCommandApplicationService',
            'TYPO3\\CMS\\Core\\Console\\CommandRegistry_decorated_2' => 'getCommandRegistryDecorated2Service',
            'TYPO3\\CMS\\Core\\Context\\Context' => 'getContextService',
            'TYPO3\\CMS\\Core\\Controller\\FileDumpController' => 'getFileDumpControllerService',
            'TYPO3\\CMS\\Core\\Core\\BootService' => 'getBootServiceService',
            'TYPO3\\CMS\\Core\\Core\\ClassLoadingInformation' => 'getClassLoadingInformationService',
            'TYPO3\\CMS\\Core\\Core\\Event\\WarmupBaseTcaCache' => 'getWarmupBaseTcaCacheService',
            'TYPO3\\CMS\\Core\\Crypto\\PasswordHashing\\PasswordHashFactory' => 'getPasswordHashFactoryService',
            'TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\EmailSoftReferenceParser' => 'getEmailSoftReferenceParserService',
            'TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\ExtensionPathSoftReferenceParser' => 'getExtensionPathSoftReferenceParserService',
            'TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\NotifySoftReferenceParser' => 'getNotifySoftReferenceParserService',
            'TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\SoftReferenceParserFactory' => 'getSoftReferenceParserFactoryService',
            'TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\SubstituteSoftReferenceParser' => 'getSubstituteSoftReferenceParserService',
            'TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\TypolinkSoftReferenceParser' => 'getTypolinkSoftReferenceParserService',
            'TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\TypolinkTagSoftReferenceParser' => 'getTypolinkTagSoftReferenceParserService',
            'TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\UrlSoftReferenceParser' => 'getUrlSoftReferenceParserService',
            'TYPO3\\CMS\\Core\\Database\\ConnectionPool' => 'getConnectionPoolService',
            'TYPO3\\CMS\\Core\\Database\\Schema\\SqlReader' => 'getSqlReaderService',
            'TYPO3\\CMS\\Core\\Database\\SoftReferenceIndex' => 'getSoftReferenceIndexService',
            'TYPO3\\CMS\\Core\\Error\\DebugExceptionHandler' => 'getDebugExceptionHandlerService',
            'TYPO3\\CMS\\Core\\Error\\ProductionExceptionHandler' => 'getProductionExceptionHandlerService',
            'TYPO3\\CMS\\Core\\EventDispatcher\\EventDispatcher' => 'getEventDispatcher2Service',
            'TYPO3\\CMS\\Core\\EventDispatcher\\ListenerProvider_decorated_3' => 'getListenerProviderDecorated3Service',
            'TYPO3\\CMS\\Core\\ExpressionLanguage\\ProviderConfigurationLoader' => 'getProviderConfigurationLoaderService',
            'TYPO3\\CMS\\Core\\Html\\RteHtmlParser' => 'getRteHtmlParserService',
            'TYPO3\\CMS\\Core\\Http\\MiddlewareStackResolver' => 'getMiddlewareStackResolverService',
            'TYPO3\\CMS\\Core\\Http\\RequestFactory' => 'getRequestFactoryService',
            'TYPO3\\CMS\\Core\\Imaging\\IconFactory' => 'getIconFactoryService',
            'TYPO3\\CMS\\Core\\Imaging\\IconProvider\\FontawesomeIconProvider' => 'getFontawesomeIconProviderService',
            'TYPO3\\CMS\\Core\\Imaging\\IconRegistry_decorated_1' => 'getIconRegistryDecorated1Service',
            'TYPO3\\CMS\\Core\\LinkHandling\\LinkService' => 'getLinkServiceService',
            'TYPO3\\CMS\\Core\\Localization\\CacheWarmer' => 'getCacheWarmerService',
            'TYPO3\\CMS\\Core\\Localization\\LanguageService' => 'getLanguageServiceService',
            'TYPO3\\CMS\\Core\\Localization\\LanguageServiceFactory' => 'getLanguageServiceFactoryService',
            'TYPO3\\CMS\\Core\\Localization\\LanguageStore' => 'getLanguageStoreService',
            'TYPO3\\CMS\\Core\\Localization\\Locales' => 'getLocalesService',
            'TYPO3\\CMS\\Core\\Localization\\LocalizationFactory' => 'getLocalizationFactoryService',
            'TYPO3\\CMS\\Core\\Localization\\TcaSystemLanguageCollector' => 'getTcaSystemLanguageCollectorService',
            'TYPO3\\CMS\\Core\\Locking\\LockFactory' => 'getLockFactoryService',
            'TYPO3\\CMS\\Core\\Mail\\Mailer' => 'getMailerService',
            'TYPO3\\CMS\\Core\\Mail\\MemorySpool' => 'getMemorySpoolService',
            'TYPO3\\CMS\\Core\\Mail\\TransportFactory' => 'getTransportFactoryService',
            'TYPO3\\CMS\\Core\\Messaging\\FlashMessageService' => 'getFlashMessageServiceService',
            'TYPO3\\CMS\\Core\\MetaTag\\MetaTagManagerRegistry' => 'getMetaTagManagerRegistryService',
            'TYPO3\\CMS\\Core\\Middleware\\NormalizedParamsAttribute' => 'getNormalizedParamsAttributeService',
            'TYPO3\\CMS\\Core\\Middleware\\ResponsePropagation' => 'getResponsePropagationService',
            'TYPO3\\CMS\\Core\\Middleware\\VerifyHostHeader' => 'getVerifyHostHeaderService',
            'TYPO3\\CMS\\Core\\Package\\Cache\\PackageDependentCacheIdentifier' => 'getPackageDependentCacheIdentifierService',
            'TYPO3\\CMS\\Core\\Package\\FailsafePackageManager' => 'getFailsafePackageManagerService',
            'TYPO3\\CMS\\Core\\PageTitle\\PageTitleProviderManager' => 'getPageTitleProviderManagerService',
            'TYPO3\\CMS\\Core\\PageTitle\\RecordPageTitleProvider' => 'getRecordPageTitleProviderService',
            'TYPO3\\CMS\\Core\\Page\\AssetCollector' => 'getAssetCollectorService',
            'TYPO3\\CMS\\Core\\Page\\AssetRenderer' => 'getAssetRendererService',
            'TYPO3\\CMS\\Core\\Page\\PageRenderer' => 'getPageRendererService',
            'TYPO3\\CMS\\Core\\RateLimiter\\RateLimiterFactory' => 'getRateLimiterFactoryService',
            'TYPO3\\CMS\\Core\\RateLimiter\\Storage\\CachingFrameworkStorage' => 'getCachingFrameworkStorageService',
            'TYPO3\\CMS\\Core\\Registry' => 'getRegistryService',
            'TYPO3\\CMS\\Core\\Resource\\Collection\\FileCollectionRegistry' => 'getFileCollectionRegistryService',
            'TYPO3\\CMS\\Core\\Resource\\Driver\\DriverRegistry' => 'getDriverRegistryService',
            'TYPO3\\CMS\\Core\\Resource\\FileRepository' => 'getFileRepositoryService',
            'TYPO3\\CMS\\Core\\Resource\\Index\\ExtractorRegistry' => 'getExtractorRegistryService',
            'TYPO3\\CMS\\Core\\Resource\\Index\\FileIndexRepository' => 'getFileIndexRepositoryService',
            'TYPO3\\CMS\\Core\\Resource\\Index\\MetaDataRepository' => 'getMetaDataRepositoryService',
            'TYPO3\\CMS\\Core\\Resource\\MetaDataEventListener' => 'getMetaDataEventListenerService',
            'TYPO3\\CMS\\Core\\Resource\\OnlineMedia\\Helpers\\OnlineMediaHelperRegistry' => 'getOnlineMediaHelperRegistryService',
            'TYPO3\\CMS\\Core\\Resource\\ProcessedFileRepository' => 'getProcessedFileRepositoryService',
            'TYPO3\\CMS\\Core\\Resource\\Processing\\FileDeletionAspect' => 'getFileDeletionAspectService',
            'TYPO3\\CMS\\Core\\Resource\\Processing\\ProcessorRegistry' => 'getProcessorRegistryService',
            'TYPO3\\CMS\\Core\\Resource\\Processing\\TaskTypeRegistry' => 'getTaskTypeRegistryService',
            'TYPO3\\CMS\\Core\\Resource\\Rendering\\AudioTagRenderer' => 'getAudioTagRendererService',
            'TYPO3\\CMS\\Core\\Resource\\Rendering\\RendererRegistry' => 'getRendererRegistryService',
            'TYPO3\\CMS\\Core\\Resource\\Rendering\\VideoTagRenderer' => 'getVideoTagRendererService',
            'TYPO3\\CMS\\Core\\Resource\\Rendering\\VimeoRenderer' => 'getVimeoRendererService',
            'TYPO3\\CMS\\Core\\Resource\\Rendering\\YouTubeRenderer' => 'getYouTubeRendererService',
            'TYPO3\\CMS\\Core\\Resource\\ResourceFactory' => 'getResourceFactoryService',
            'TYPO3\\CMS\\Core\\Resource\\Security\\FileMetadataPermissionsAspect' => 'getFileMetadataPermissionsAspectService',
            'TYPO3\\CMS\\Core\\Resource\\Security\\StoragePermissionsAspect' => 'getStoragePermissionsAspectService',
            'TYPO3\\CMS\\Core\\Resource\\Security\\SvgEventListener' => 'getSvgEventListenerService',
            'TYPO3\\CMS\\Core\\Resource\\Security\\SvgHookHandler' => 'getSvgHookHandlerService',
            'TYPO3\\CMS\\Core\\Resource\\Security\\SvgTypeCheck' => 'getSvgTypeCheckService',
            'TYPO3\\CMS\\Core\\Resource\\StorageRepository' => 'getStorageRepositoryService',
            'TYPO3\\CMS\\Core\\Resource\\SynchronizeFolderRelations' => 'getSynchronizeFolderRelationsService',
            'TYPO3\\CMS\\Core\\Resource\\TextExtraction\\TextExtractorRegistry' => 'getTextExtractorRegistryService',
            'TYPO3\\CMS\\Core\\Routing\\SiteMatcher' => 'getSiteMatcherService',
            'TYPO3\\CMS\\Core\\Service\\DependencyOrderingService' => 'getDependencyOrderingServiceService',
            'TYPO3\\CMS\\Core\\Service\\FlexFormService' => 'getFlexFormServiceService',
            'TYPO3\\CMS\\Core\\Service\\OpcodeCacheService' => 'getOpcodeCacheServiceService',
            'TYPO3\\CMS\\Core\\Session\\SessionManager' => 'getSessionManagerService',
            'TYPO3\\CMS\\Core\\TimeTracker\\TimeTracker' => 'getTimeTrackerService',
            'TYPO3\\CMS\\Core\\Tree\\TableConfiguration\\DatabaseTreeDataProvider' => 'getDatabaseTreeDataProviderService',
            'TYPO3\\CMS\\Core\\TypoScript\\Parser\\ConstantConfigurationParser' => 'getConstantConfigurationParserService',
            'TYPO3\\CMS\\Core\\TypoScript\\TypoScriptService' => 'getTypoScriptServiceService',
            'TYPO3\\CMS\\Core\\ViewHelpers\\Form\\TypoScriptConstantsViewHelper' => 'getTypoScriptConstantsViewHelperService',
            'TYPO3\\CMS\\Core\\ViewHelpers\\IconForRecordViewHelper' => 'getIconForRecordViewHelperService',
            'TYPO3\\CMS\\Core\\ViewHelpers\\IconForResourceViewHelper' => 'getIconForResourceViewHelperService',
            'TYPO3\\CMS\\Core\\ViewHelpers\\IconViewHelper' => 'getIconViewHelperService',
            'TYPO3\\CMS\\Core\\ViewHelpers\\NormalizedUrlViewHelper' => 'getNormalizedUrlViewHelperService',
            'TYPO3\\CMS\\Dashboard\\Controller\\DashboardController' => 'getDashboardControllerService',
            'TYPO3\\CMS\\Dashboard\\Controller\\WidgetAjaxController' => 'getWidgetAjaxControllerService',
            'TYPO3\\CMS\\Dashboard\\DashboardPresetRegistry_decorated_1' => 'getDashboardPresetRegistryDecorated1Service',
            'TYPO3\\CMS\\Dashboard\\ViewHelpers\\Widget\\ButtonViewHelper' => 'getButtonViewHelperService',
            'TYPO3\\CMS\\Dashboard\\WidgetGroupRegistry_decorated_1' => 'getWidgetGroupRegistryDecorated1Service',
            'TYPO3\\CMS\\Dashboard\\WidgetRegistry' => 'getWidgetRegistryService',
            'TYPO3\\CMS\\Extbase\\Configuration\\BackendConfigurationManager' => 'getBackendConfigurationManagerService',
            'TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager' => 'getConfigurationManagerService',
            'TYPO3\\CMS\\Extbase\\Configuration\\FrontendConfigurationManager' => 'getFrontendConfigurationManagerService',
            'TYPO3\\CMS\\Extbase\\Core\\Bootstrap' => 'getBootstrapService',
            'TYPO3\\CMS\\Extbase\\Domain\\Repository\\BackendUserGroupRepository' => 'getBackendUserGroupRepository2Service',
            'TYPO3\\CMS\\Extbase\\Domain\\Repository\\BackendUserRepository' => 'getBackendUserRepository2Service',
            'TYPO3\\CMS\\Extbase\\Domain\\Repository\\CategoryRepository' => 'getCategoryRepositoryService',
            'TYPO3\\CMS\\Extbase\\Domain\\Repository\\FrontendUserGroupRepository' => 'getFrontendUserGroupRepositoryService',
            'TYPO3\\CMS\\Extbase\\Domain\\Repository\\FrontendUserRepository' => 'getFrontendUserRepositoryService',
            'TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ControllerContext' => 'getControllerContextService',
            'TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService' => 'getMvcPropertyMappingConfigurationServiceService',
            'TYPO3\\CMS\\Extbase\\Mvc\\Dispatcher' => 'getDispatcherService',
            'TYPO3\\CMS\\Extbase\\Mvc\\View\\EmptyView' => 'getEmptyViewService',
            'TYPO3\\CMS\\Extbase\\Mvc\\View\\JsonView' => 'getJsonViewService',
            'TYPO3\\CMS\\Extbase\\Mvc\\Web\\FrontendRequestHandler' => 'getFrontendRequestHandlerService',
            'TYPO3\\CMS\\Extbase\\Mvc\\Web\\RequestBuilder' => 'getRequestBuilderService',
            'TYPO3\\CMS\\Extbase\\Mvc\\Web\\Routing\\UriBuilder' => 'getUriBuilder2Service',
            'TYPO3\\CMS\\Extbase\\Object\\Container\\Container' => 'getContainerService',
            'TYPO3\\CMS\\Extbase\\Object\\ObjectManager' => 'getObjectManagerService',
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Backend' => 'getBackendService',
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Mapper\\DataMapFactory' => 'getDataMapFactoryService',
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Mapper\\DataMapper' => 'getDataMapperService',
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager' => 'getPersistenceManagerService',
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\QueryObjectModelFactory' => 'getQueryObjectModelFactoryService',
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Query' => 'getQueryService',
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\QueryFactory' => 'getQueryFactoryService',
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\QueryResult' => 'getQueryResultService',
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Session' => 'getSessionService',
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Storage\\Typo3DbBackend' => 'getTypo3DbBackendService',
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Storage\\Typo3DbQueryParser' => 'getTypo3DbQueryParserService',
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Typo3QuerySettings' => 'getTypo3QuerySettingsService',
            'TYPO3\\CMS\\Extbase\\Persistence\\Repository' => 'getRepositoryService',
            'TYPO3\\CMS\\Extbase\\Property\\PropertyMapper' => 'getPropertyMapperService',
            'TYPO3\\CMS\\Extbase\\Property\\PropertyMappingConfigurationBuilder' => 'getPropertyMappingConfigurationBuilderService',
            'TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\ArrayConverter' => 'getArrayConverterService',
            'TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\BooleanConverter' => 'getBooleanConverterService',
            'TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\CoreTypeConverter' => 'getCoreTypeConverterService',
            'TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\DateTimeConverter' => 'getDateTimeConverterService',
            'TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\FileConverter' => 'getFileConverterService',
            'TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\FileReferenceConverter' => 'getFileReferenceConverterService',
            'TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\FloatConverter' => 'getFloatConverterService',
            'TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\FolderConverter' => 'getFolderConverterService',
            'TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\IntegerConverter' => 'getIntegerConverterService',
            'TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\ObjectConverter' => 'getObjectConverterService',
            'TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\ObjectStorageConverter' => 'getObjectStorageConverterService',
            'TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\PersistentObjectConverter' => 'getPersistentObjectConverterService',
            'TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\StringConverter' => 'getStringConverterService',
            'TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService' => 'getReflectionServiceService',
            'TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService' => 'getHashServiceService',
            'TYPO3\\CMS\\Extbase\\Service\\CacheService' => 'getCacheServiceService',
            'TYPO3\\CMS\\Extbase\\Service\\EnvironmentService' => 'getEnvironmentServiceService',
            'TYPO3\\CMS\\Extbase\\Service\\ExtensionService' => 'getExtensionServiceService',
            'TYPO3\\CMS\\Extbase\\Service\\ImageService' => 'getImageServiceService',
            'TYPO3\\CMS\\Extbase\\SignalSlot\\Dispatcher' => 'getDispatcher2Service',
            'TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver' => 'getValidatorResolverService',
            'TYPO3\\CMS\\Extensionmanager\\Command\\ActivateExtensionCommand' => 'getActivateExtensionCommandService',
            'TYPO3\\CMS\\Extensionmanager\\Command\\DeactivateExtensionCommand' => 'getDeactivateExtensionCommandService',
            'TYPO3\\CMS\\Extensionmanager\\Command\\SetupExtensionsCommand' => 'getSetupExtensionsCommandService',
            'TYPO3\\CMS\\Extensionmanager\\Controller\\AbstractController' => 'getAbstractControllerService',
            'TYPO3\\CMS\\Extensionmanager\\Controller\\AbstractModuleController' => 'getAbstractModuleControllerService',
            'TYPO3\\CMS\\Extensionmanager\\Controller\\ActionController' => 'getActionControllerService',
            'TYPO3\\CMS\\Extensionmanager\\Controller\\DistributionController' => 'getDistributionControllerService',
            'TYPO3\\CMS\\Extensionmanager\\Controller\\DownloadController' => 'getDownloadControllerService',
            'TYPO3\\CMS\\Extensionmanager\\Controller\\ExtensionComposerStatusController' => 'getExtensionComposerStatusControllerService',
            'TYPO3\\CMS\\Extensionmanager\\Controller\\ListController' => 'getListControllerService',
            'TYPO3\\CMS\\Extensionmanager\\Controller\\UpdateFromTerController' => 'getUpdateFromTerControllerService',
            'TYPO3\\CMS\\Extensionmanager\\Controller\\UploadExtensionFileController' => 'getUploadExtensionFileControllerService',
            'TYPO3\\CMS\\Extensionmanager\\Domain\\Model\\DownloadQueue' => 'getDownloadQueueService',
            'TYPO3\\CMS\\Extensionmanager\\Domain\\Repository\\BulkExtensionRepositoryWriter' => 'getBulkExtensionRepositoryWriterService',
            'TYPO3\\CMS\\Extensionmanager\\Domain\\Repository\\ExtensionRepository' => 'getExtensionRepositoryService',
            'TYPO3\\CMS\\Extensionmanager\\Remote\\RemoteRegistry' => 'getRemoteRegistryService',
            'TYPO3\\CMS\\Extensionmanager\\Report\\ExtensionComposerStatus' => 'getExtensionComposerStatusService',
            'TYPO3\\CMS\\Extensionmanager\\Service\\ExtensionManagementService' => 'getExtensionManagementServiceService',
            'TYPO3\\CMS\\Extensionmanager\\Utility\\DependencyUtility' => 'getDependencyUtilityService',
            'TYPO3\\CMS\\Extensionmanager\\Utility\\EmConfUtility' => 'getEmConfUtilityService',
            'TYPO3\\CMS\\Extensionmanager\\Utility\\FileHandlingUtility' => 'getFileHandlingUtilityService',
            'TYPO3\\CMS\\Extensionmanager\\Utility\\InstallUtility' => 'getInstallUtilityService',
            'TYPO3\\CMS\\Extensionmanager\\Utility\\ListUtility' => 'getListUtilityService',
            'TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\Be\\TriggerViewHelper' => 'getTriggerViewHelperService',
            'TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\ConstraintsViewHelper' => 'getConstraintsViewHelperService',
            'TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\DownloadExtensionViewHelper' => 'getDownloadExtensionViewHelperService',
            'TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\InstallationStateCssClassViewHelper' => 'getInstallationStateCssClassViewHelperService',
            'TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\ProcessAvailableActionsViewHelper' => 'getProcessAvailableActionsViewHelperService',
            'TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\ReloadSqlDataViewHelper' => 'getReloadSqlDataViewHelperService',
            'TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\RemoveExtensionViewHelper' => 'getRemoveExtensionViewHelperService',
            'TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\ToggleExtensionInstallationStateViewHelper' => 'getToggleExtensionInstallationStateViewHelperService',
            'TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\Typo3DependencyViewHelper' => 'getTypo3DependencyViewHelperService',
            'TYPO3\\CMS\\Filelist\\Controller\\FileDownloadController' => 'getFileDownloadControllerService',
            'TYPO3\\CMS\\Filelist\\Controller\\FileListController' => 'getFileListControllerService',
            'TYPO3\\CMS\\Filelist\\Controller\\File\\CreateFolderController' => 'getCreateFolderControllerService',
            'TYPO3\\CMS\\Filelist\\Controller\\File\\EditFileController' => 'getEditFileControllerService',
            'TYPO3\\CMS\\Filelist\\Controller\\File\\FileUploadController' => 'getFileUploadControllerService',
            'TYPO3\\CMS\\Filelist\\Controller\\File\\RenameFileController' => 'getRenameFileControllerService',
            'TYPO3\\CMS\\Filelist\\Controller\\File\\ReplaceFileController' => 'getReplaceFileControllerService',
            'TYPO3\\CMS\\FluidStyledContent\\ViewHelpers\\Link\\ClickEnlargeViewHelper' => 'getClickEnlargeViewHelperService',
            'TYPO3\\CMS\\Fluid\\Core\\Rendering\\RenderingContext' => 'getRenderingContextService',
            'TYPO3\\CMS\\Fluid\\Core\\Rendering\\RenderingContextFactory' => 'getRenderingContextFactoryService',
            'TYPO3\\CMS\\Fluid\\Core\\ViewHelper\\ViewHelperResolverFactory' => 'getViewHelperResolverFactoryService',
            'TYPO3\\CMS\\Fluid\\Core\\ViewHelper\\ViewHelperResolverFactoryInterface' => 'getViewHelperResolverFactoryInterfaceService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Asset\\CssViewHelper' => 'getCssViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Asset\\ScriptViewHelper' => 'getScriptViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\BaseViewHelper' => 'getBaseViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Buttons\\CshViewHelper' => 'getCshViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Buttons\\ShortcutViewHelper' => 'getShortcutViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\ContainerViewHelper' => 'getContainerViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\InfoboxViewHelper' => 'getInfoboxViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Labels\\CshViewHelper' => 'getCshViewHelper2Service',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\LinkViewHelper' => 'getLinkViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Menus\\ActionMenuItemGroupViewHelper' => 'getActionMenuItemGroupViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Menus\\ActionMenuItemViewHelper' => 'getActionMenuItemViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Menus\\ActionMenuViewHelper' => 'getActionMenuViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\PageInfoViewHelper' => 'getPageInfoViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\PagePathViewHelper' => 'getPagePathViewHelper2Service',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\PageRendererViewHelper' => 'getPageRendererViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Security\\IfAuthenticatedViewHelper' => 'getIfAuthenticatedViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Security\\IfHasRoleViewHelper' => 'getIfHasRoleViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\TableListViewHelper' => 'getTableListViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\UriViewHelper' => 'getUriViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\CObjectViewHelper' => 'getCObjectViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\DebugViewHelper' => 'getDebugViewHelper2Service',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Debug\\RenderViewHelper' => 'getRenderViewHelper2Service',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\FlashMessagesViewHelper' => 'getFlashMessagesViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\FormViewHelper' => 'getFormViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\ButtonViewHelper' => 'getButtonViewHelper2Service',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\CheckboxViewHelper' => 'getCheckboxViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\HiddenViewHelper' => 'getHiddenViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\PasswordViewHelper' => 'getPasswordViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\RadioViewHelper' => 'getRadioViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\SelectViewHelper' => 'getSelectViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\Select\\OptgroupViewHelper' => 'getOptgroupViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\Select\\OptionViewHelper' => 'getOptionViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\SubmitViewHelper' => 'getSubmitViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\TextareaViewHelper' => 'getTextareaViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\TextfieldViewHelper' => 'getTextfieldViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\UploadViewHelper' => 'getUploadViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\ValidationResultsViewHelper' => 'getValidationResultsViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\BytesViewHelper' => 'getBytesViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\CaseViewHelper' => 'getCaseViewHelper2Service',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\CropViewHelper' => 'getCropViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\CurrencyViewHelper' => 'getCurrencyViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\DateViewHelper' => 'getDateViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\HtmlViewHelper' => 'getHtmlViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\HtmlentitiesDecodeViewHelper' => 'getHtmlentitiesDecodeViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\HtmlentitiesViewHelper' => 'getHtmlentitiesViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\JsonViewHelper' => 'getJsonViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\Nl2brViewHelper' => 'getNl2brViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\NumberViewHelper' => 'getNumberViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\PaddingViewHelper' => 'getPaddingViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\StripTagsViewHelper' => 'getStripTagsViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\UrlencodeViewHelper' => 'getUrlencodeViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\ImageViewHelper' => 'getImageViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\ActionViewHelper' => 'getActionViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\EmailViewHelper' => 'getEmailViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\ExternalViewHelper' => 'getExternalViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\FileViewHelper' => 'getFileViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\PageViewHelper' => 'getPageViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\TypolinkViewHelper' => 'getTypolinkViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\MediaViewHelper' => 'getMediaViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\RenderViewHelper' => 'getRenderViewHelper3Service',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Sanitize\\HtmlViewHelper' => 'getHtmlViewHelper2Service',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Security\\IfAuthenticatedViewHelper' => 'getIfAuthenticatedViewHelper2Service',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Security\\IfHasRoleViewHelper' => 'getIfHasRoleViewHelper2Service',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Transform\\HtmlViewHelper' => 'getHtmlViewHelper3Service',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\TranslateViewHelper' => 'getTranslateViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\ActionViewHelper' => 'getActionViewHelper2Service',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\EmailViewHelper' => 'getEmailViewHelper2Service',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\ExternalViewHelper' => 'getExternalViewHelper2Service',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\ImageViewHelper' => 'getImageViewHelper2Service',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\PageViewHelper' => 'getPageViewHelper2Service',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\ResourceViewHelper' => 'getResourceViewHelperService',
            'TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\TypolinkViewHelper' => 'getTypolinkViewHelper2Service',
            'TYPO3\\CMS\\Fluid\\View\\StandaloneView' => 'getStandaloneViewService',
            'TYPO3\\CMS\\Fluid\\View\\TemplateView' => 'getTemplateViewService',
            'TYPO3\\CMS\\Form\\Controller\\FormEditorController' => 'getFormEditorControllerService',
            'TYPO3\\CMS\\Form\\Controller\\FormFrontendController' => 'getFormFrontendControllerService',
            'TYPO3\\CMS\\Form\\Controller\\FormManagerController' => 'getFormManagerControllerService',
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\ConfigurationService' => 'getConfigurationService2Service',
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinitionConversionService' => 'getFormDefinitionConversionServiceService',
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinitionValidationService' => 'getFormDefinitionValidationServiceService',
            'TYPO3\\CMS\\Form\\Domain\\Factory\\ArrayFormFactory' => 'getArrayFormFactoryService',
            'TYPO3\\CMS\\Form\\Domain\\Finishers\\ClosureFinisher' => 'getClosureFinisherService',
            'TYPO3\\CMS\\Form\\Domain\\Finishers\\ConfirmationFinisher' => 'getConfirmationFinisherService',
            'TYPO3\\CMS\\Form\\Domain\\Finishers\\DeleteUploadsFinisher' => 'getDeleteUploadsFinisherService',
            'TYPO3\\CMS\\Form\\Domain\\Finishers\\EmailFinisher' => 'getEmailFinisherService',
            'TYPO3\\CMS\\Form\\Domain\\Finishers\\FlashMessageFinisher' => 'getFlashMessageFinisherService',
            'TYPO3\\CMS\\Form\\Domain\\Finishers\\RedirectFinisher' => 'getRedirectFinisherService',
            'TYPO3\\CMS\\Form\\Domain\\Finishers\\SaveToDatabaseFinisher' => 'getSaveToDatabaseFinisherService',
            'TYPO3\\CMS\\Form\\Domain\\Renderer\\FluidFormRenderer' => 'getFluidFormRendererService',
            'TYPO3\\CMS\\Form\\Domain\\Runtime\\FormRuntime' => 'getFormRuntimeService',
            'TYPO3\\CMS\\Form\\EventListener\\ProcessFileListActionsEventListener' => 'getProcessFileListActionsEventListenerService',
            'TYPO3\\CMS\\Form\\Mvc\\Configuration\\ConfigurationManager' => 'getConfigurationManager2Service',
            'TYPO3\\CMS\\Form\\Mvc\\Configuration\\TypoScriptService' => 'getTypoScriptService2Service',
            'TYPO3\\CMS\\Form\\Mvc\\Persistence\\FormPersistenceManagerInterface' => 'getFormPersistenceManagerInterfaceService',
            'TYPO3\\CMS\\Form\\Mvc\\ProcessingRule' => 'getProcessingRuleService',
            'TYPO3\\CMS\\Form\\Mvc\\Property\\TypeConverter\\FormDefinitionArrayConverter' => 'getFormDefinitionArrayConverterService',
            'TYPO3\\CMS\\Form\\Mvc\\Property\\TypeConverter\\UploadedFileReferenceConverter' => 'getUploadedFileReferenceConverterService',
            'TYPO3\\CMS\\Form\\Service\\TranslationService' => 'getTranslationServiceService',
            'TYPO3\\CMS\\Form\\Slot\\FilePersistenceSlot' => 'getFilePersistenceSlotService',
            'TYPO3\\CMS\\Form\\Slot\\ResourcePublicationSlot' => 'getResourcePublicationSlotService',
            'TYPO3\\CMS\\Form\\SoftReference\\FormPersistenceIdentifierSoftReferenceParser' => 'getFormPersistenceIdentifierSoftReferenceParserService',
            'TYPO3\\CMS\\Form\\ViewHelpers\\Be\\MaximumFileSizeViewHelper' => 'getMaximumFileSizeViewHelperService',
            'TYPO3\\CMS\\Form\\ViewHelpers\\Be\\RenderContentElementPreviewViewHelper' => 'getRenderContentElementPreviewViewHelperService',
            'TYPO3\\CMS\\Form\\ViewHelpers\\FormViewHelper' => 'getFormViewHelper2Service',
            'TYPO3\\CMS\\Form\\ViewHelpers\\Form\\DatePickerViewHelper' => 'getDatePickerViewHelperService',
            'TYPO3\\CMS\\Form\\ViewHelpers\\Form\\TimePickerViewHelper' => 'getTimePickerViewHelperService',
            'TYPO3\\CMS\\Form\\ViewHelpers\\Form\\UploadedResourceViewHelper' => 'getUploadedResourceViewHelperService',
            'TYPO3\\CMS\\Form\\ViewHelpers\\GridColumnClassAutoConfigurationViewHelper' => 'getGridColumnClassAutoConfigurationViewHelperService',
            'TYPO3\\CMS\\Form\\ViewHelpers\\RenderAllFormValuesViewHelper' => 'getRenderAllFormValuesViewHelperService',
            'TYPO3\\CMS\\Form\\ViewHelpers\\RenderFormValueViewHelper' => 'getRenderFormValueViewHelperService',
            'TYPO3\\CMS\\Form\\ViewHelpers\\RenderRenderableViewHelper' => 'getRenderRenderableViewHelperService',
            'TYPO3\\CMS\\Form\\ViewHelpers\\RenderViewHelper' => 'getRenderViewHelper4Service',
            'TYPO3\\CMS\\Form\\ViewHelpers\\TranslateElementErrorViewHelper' => 'getTranslateElementErrorViewHelperService',
            'TYPO3\\CMS\\Form\\ViewHelpers\\TranslateElementPropertyViewHelper' => 'getTranslateElementPropertyViewHelperService',
            'TYPO3\\CMS\\FrontendLogin\\Controller\\LoginController' => 'getLoginController2Service',
            'TYPO3\\CMS\\FrontendLogin\\Controller\\PasswordRecoveryController' => 'getPasswordRecoveryControllerService',
            'TYPO3\\CMS\\FrontendLogin\\Service\\ValidatorResolverService' => 'getValidatorResolverServiceService',
            'TYPO3\\CMS\\Frontend\\Aspect\\FileMetadataOverlayAspect' => 'getFileMetadataOverlayAspectService',
            'TYPO3\\CMS\\Frontend\\ContentObject\\ContentDataProcessor' => 'getContentDataProcessorService',
            'TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectRenderer' => 'getContentObjectRendererService',
            'TYPO3\\CMS\\Frontend\\ContentObject\\Exception\\ProductionExceptionHandler' => 'getProductionExceptionHandler2Service',
            'TYPO3\\CMS\\Frontend\\ContentObject\\Menu\\MenuContentObjectFactory' => 'getMenuContentObjectFactoryService',
            'TYPO3\\CMS\\Frontend\\Hooks\\MediaItemHooks' => 'getMediaItemHooksService',
            'TYPO3\\CMS\\Frontend\\Html\\HtmlWorker' => 'getHtmlWorkerService',
            'TYPO3\\CMS\\Frontend\\Http\\Application' => 'getApplication2Service',
            'TYPO3\\CMS\\Frontend\\Http\\RequestHandler' => 'getRequestHandler2Service',
            'TYPO3\\CMS\\Frontend\\Middleware\\BackendUserAuthenticator' => 'getBackendUserAuthenticator2Service',
            'TYPO3\\CMS\\Frontend\\Middleware\\ContentLengthResponseHeader' => 'getContentLengthResponseHeaderService',
            'TYPO3\\CMS\\Frontend\\Middleware\\EidHandler' => 'getEidHandlerService',
            'TYPO3\\CMS\\Frontend\\Middleware\\FrontendUserAuthenticator' => 'getFrontendUserAuthenticatorService',
            'TYPO3\\CMS\\Frontend\\Middleware\\MaintenanceMode' => 'getMaintenanceModeService',
            'TYPO3\\CMS\\Frontend\\Middleware\\OutputCompression' => 'getOutputCompression2Service',
            'TYPO3\\CMS\\Frontend\\Middleware\\PageArgumentValidator' => 'getPageArgumentValidatorService',
            'TYPO3\\CMS\\Frontend\\Middleware\\PageResolver' => 'getPageResolverService',
            'TYPO3\\CMS\\Frontend\\Middleware\\PrepareTypoScriptFrontendRendering' => 'getPrepareTypoScriptFrontendRenderingService',
            'TYPO3\\CMS\\Frontend\\Middleware\\PreviewSimulator' => 'getPreviewSimulatorService',
            'TYPO3\\CMS\\Frontend\\Middleware\\ShortcutAndMountPointRedirect' => 'getShortcutAndMountPointRedirectService',
            'TYPO3\\CMS\\Frontend\\Middleware\\SiteBaseRedirectResolver' => 'getSiteBaseRedirectResolverService',
            'TYPO3\\CMS\\Frontend\\Middleware\\SiteResolver' => 'getSiteResolver2Service',
            'TYPO3\\CMS\\Frontend\\Middleware\\StaticRouteResolver' => 'getStaticRouteResolverService',
            'TYPO3\\CMS\\Frontend\\Middleware\\TimeTrackerInitialization' => 'getTimeTrackerInitializationService',
            'TYPO3\\CMS\\Frontend\\Middleware\\TypoScriptFrontendInitialization' => 'getTypoScriptFrontendInitializationService',
            'TYPO3\\CMS\\Frontend\\Page\\CacheHashCalculator' => 'getCacheHashCalculatorService',
            'TYPO3\\CMS\\Frontend\\Resource\\PublicUrlPrefixer' => 'getPublicUrlPrefixer2Service',
            'TYPO3\\CMS\\Frontend\\Typolink\\LinkResultFactory' => 'getLinkResultFactoryService',
            'TYPO3\\CMS\\Frontend\\Utility\\CompressionUtility' => 'getCompressionUtilityService',
            'TYPO3\\CMS\\Impexp\\Command\\ExportCommand' => 'getExportCommandService',
            'TYPO3\\CMS\\Impexp\\Command\\ImportCommand' => 'getImportCommandService',
            'TYPO3\\CMS\\Impexp\\Controller\\ExportController' => 'getExportControllerService',
            'TYPO3\\CMS\\Impexp\\Controller\\ImportController' => 'getImportControllerService',
            'TYPO3\\CMS\\Impexp\\Utility\\ImportExportUtility' => 'getImportExportUtilityService',
            'TYPO3\\CMS\\IndexedSearch\\Controller\\AdministrationController' => 'getAdministrationControllerService',
            'TYPO3\\CMS\\IndexedSearch\\Controller\\SearchController' => 'getSearchControllerService',
            'TYPO3\\CMS\\IndexedSearch\\Service\\DatabaseSchemaService' => 'getDatabaseSchemaService2Service',
            'TYPO3\\CMS\\IndexedSearch\\ViewHelpers\\Format\\DateTimeViewHelper' => 'getDateTimeViewHelperService',
            'TYPO3\\CMS\\IndexedSearch\\ViewHelpers\\Format\\FlagValueViewHelper' => 'getFlagValueViewHelperService',
            'TYPO3\\CMS\\IndexedSearch\\ViewHelpers\\Format\\GroupListViewHelper' => 'getGroupListViewHelperService',
            'TYPO3\\CMS\\IndexedSearch\\ViewHelpers\\PageBrowsingResultsViewHelper' => 'getPageBrowsingResultsViewHelperService',
            'TYPO3\\CMS\\IndexedSearch\\ViewHelpers\\PageBrowsingViewHelper' => 'getPageBrowsingViewHelperService',
            'TYPO3\\CMS\\Info\\Controller\\InfoModuleController' => 'getInfoModuleControllerService',
            'TYPO3\\CMS\\Info\\Controller\\InfoPageTyposcriptConfigController' => 'getInfoPageTyposcriptConfigControllerService',
            'TYPO3\\CMS\\Info\\Controller\\PageInformationController' => 'getPageInformationControllerService',
            'TYPO3\\CMS\\Info\\Controller\\TranslationStatusController' => 'getTranslationStatusControllerService',
            'TYPO3\\CMS\\Install\\Command\\LanguagePackCommand' => 'getLanguagePackCommandService',
            'TYPO3\\CMS\\Install\\Command\\UpgradeWizardListCommand' => 'getUpgradeWizardListCommandService',
            'TYPO3\\CMS\\Install\\Command\\UpgradeWizardRunCommand' => 'getUpgradeWizardRunCommandService',
            'TYPO3\\CMS\\Install\\Controller\\BackendModuleController' => 'getBackendModuleControllerService',
            'TYPO3\\CMS\\Install\\Controller\\EnvironmentController' => 'getEnvironmentControllerService',
            'TYPO3\\CMS\\Install\\Controller\\IconController' => 'getIconControllerService',
            'TYPO3\\CMS\\Install\\Controller\\InstallerController' => 'getInstallerControllerService',
            'TYPO3\\CMS\\Install\\Controller\\LayoutController' => 'getLayoutControllerService',
            'TYPO3\\CMS\\Install\\Controller\\LoginController' => 'getLoginController3Service',
            'TYPO3\\CMS\\Install\\Controller\\MaintenanceController' => 'getMaintenanceControllerService',
            'TYPO3\\CMS\\Install\\Controller\\SettingsController' => 'getSettingsControllerService',
            'TYPO3\\CMS\\Install\\Controller\\UpgradeController' => 'getUpgradeControllerService',
            'TYPO3\\CMS\\Install\\Database\\PermissionsCheck' => 'getPermissionsCheckService',
            'TYPO3\\CMS\\Install\\Http\\Application' => 'getApplication3Service',
            'TYPO3\\CMS\\Install\\Http\\NotFoundRequestHandler' => 'getNotFoundRequestHandlerService',
            'TYPO3\\CMS\\Install\\Middleware\\Installer' => 'getInstallerService',
            'TYPO3\\CMS\\Install\\Middleware\\Maintenance' => 'getMaintenanceService',
            'TYPO3\\CMS\\Install\\Service\\ClearCacheService' => 'getClearCacheServiceService',
            'TYPO3\\CMS\\Install\\Service\\CoreUpdateService' => 'getCoreUpdateServiceService',
            'TYPO3\\CMS\\Install\\Service\\CoreVersionService' => 'getCoreVersionServiceService',
            'TYPO3\\CMS\\Install\\Service\\ExtensionConfigurationService' => 'getExtensionConfigurationServiceService',
            'TYPO3\\CMS\\Install\\Service\\LanguagePackService' => 'getLanguagePackServiceService',
            'TYPO3\\CMS\\Install\\Service\\LateBootService' => 'getLateBootServiceService',
            'TYPO3\\CMS\\Install\\Service\\LoadTcaService' => 'getLoadTcaServiceService',
            'TYPO3\\CMS\\Install\\Service\\SilentConfigurationUpgradeService' => 'getSilentConfigurationUpgradeServiceService',
            'TYPO3\\CMS\\Install\\Service\\SilentTemplateFileUpgradeService' => 'getSilentTemplateFileUpgradeServiceService',
            'TYPO3\\CMS\\Install\\Service\\Typo3tempFileService' => 'getTypo3tempFileServiceService',
            'TYPO3\\CMS\\Install\\Service\\UpgradeWizardsService' => 'getUpgradeWizardsServiceService',
            'TYPO3\\CMS\\Install\\Service\\WebServerConfigurationFileService' => 'getWebServerConfigurationFileServiceService',
            'TYPO3\\CMS\\Linkvalidator\\EventListener\\CheckBrokenRteLinkEventListener' => 'getCheckBrokenRteLinkEventListenerService',
            'TYPO3\\CMS\\Linkvalidator\\LinkAnalyzer' => 'getLinkAnalyzerService',
            'TYPO3\\CMS\\Linkvalidator\\Repository\\BrokenLinkRepository' => 'getBrokenLinkRepositoryService',
            'TYPO3\\CMS\\Linkvalidator\\Result\\LinkAnalyzerResult' => 'getLinkAnalyzerResultService',
            'TYPO3\\CMS\\Lowlevel\\Command\\CleanFlexFormsCommand' => 'getCleanFlexFormsCommandService',
            'TYPO3\\CMS\\Lowlevel\\Command\\DeletedRecordsCommand' => 'getDeletedRecordsCommandService',
            'TYPO3\\CMS\\Lowlevel\\Command\\FilesWithMultipleReferencesCommand' => 'getFilesWithMultipleReferencesCommandService',
            'TYPO3\\CMS\\Lowlevel\\Command\\ListSysLogCommand' => 'getListSysLogCommandService',
            'TYPO3\\CMS\\Lowlevel\\Command\\LostFilesCommand' => 'getLostFilesCommandService',
            'TYPO3\\CMS\\Lowlevel\\Command\\MissingFilesCommand' => 'getMissingFilesCommandService',
            'TYPO3\\CMS\\Lowlevel\\Command\\MissingRelationsCommand' => 'getMissingRelationsCommandService',
            'TYPO3\\CMS\\Lowlevel\\Command\\OrphanRecordsCommand' => 'getOrphanRecordsCommandService',
            'TYPO3\\CMS\\Lowlevel\\ConfigurationModuleProvider\\ProviderRegistry' => 'getProviderRegistryService',
            'TYPO3\\CMS\\Lowlevel\\Controller\\ConfigurationController' => 'getConfigurationControllerService',
            'TYPO3\\CMS\\Lowlevel\\Controller\\DatabaseIntegrityController' => 'getDatabaseIntegrityControllerService',
            'TYPO3\\CMS\\Recordlist\\Browser\\DatabaseBrowser' => 'getDatabaseBrowserService',
            'TYPO3\\CMS\\Recordlist\\Browser\\FileBrowser' => 'getFileBrowserService',
            'TYPO3\\CMS\\Recordlist\\Browser\\FolderBrowser' => 'getFolderBrowserService',
            'TYPO3\\CMS\\Recordlist\\Browser\\RecordBrowser' => 'getRecordBrowserService',
            'TYPO3\\CMS\\Recordlist\\Controller\\ElementBrowserController' => 'getElementBrowserControllerService',
            'TYPO3\\CMS\\Recordlist\\Controller\\RecordDownloadController' => 'getRecordDownloadControllerService',
            'TYPO3\\CMS\\Recordlist\\Controller\\RecordListController' => 'getRecordListControllerService',
            'TYPO3\\CMS\\Recordlist\\HookProvider\\AddToRecordListHookProvider' => 'getAddToRecordListHookProviderService',
            'TYPO3\\CMS\\Recordlist\\RecordList\\DatabaseRecordList' => 'getDatabaseRecordListService',
            'TYPO3\\CMS\\Recycler\\Controller\\RecyclerModuleController' => 'getRecyclerModuleControllerService',
            'TYPO3\\CMS\\Redirects\\Command\\CheckIntegrityCommand' => 'getCheckIntegrityCommandService',
            'TYPO3\\CMS\\Redirects\\Command\\CleanupRedirectsCommand' => 'getCleanupRedirectsCommandService',
            'TYPO3\\CMS\\Redirects\\Controller\\ManagementController' => 'getManagementControllerService',
            'TYPO3\\CMS\\Redirects\\Controller\\RecordHistoryRollbackController' => 'getRecordHistoryRollbackControllerService',
            'TYPO3\\CMS\\Redirects\\EventListener\\RecordHistoryRollbackEventsListener' => 'getRecordHistoryRollbackEventsListenerService',
            'TYPO3\\CMS\\Redirects\\Hooks\\DataHandlerSlugUpdateHook' => 'getDataHandlerSlugUpdateHookService',
            'TYPO3\\CMS\\Redirects\\Http\\Middleware\\RedirectHandler' => 'getRedirectHandlerService',
            'TYPO3\\CMS\\Redirects\\ViewHelpers\\TargetPageIdViewHelper' => 'getTargetPageIdViewHelperService',
            'TYPO3\\CMS\\Reports\\Controller\\ReportController' => 'getReportControllerService',
            'TYPO3\\CMS\\RteCKEditor\\Controller\\BrowseLinksController' => 'getBrowseLinksControllerService',
            'TYPO3\\CMS\\Scheduler\\Command\\SchedulerCommand' => 'getSchedulerCommandService',
            'TYPO3\\CMS\\Scheduler\\Controller\\SchedulerModuleController' => 'getSchedulerModuleControllerService',
            'TYPO3\\CMS\\Scheduler\\Scheduler' => 'getSchedulerService',
            'TYPO3\\CMS\\Scheduler\\SystemInformation\\ToolbarItemProvider' => 'getToolbarItemProviderService',
            'TYPO3\\CMS\\Seo\\HrefLang\\HrefLangGenerator' => 'getHrefLangGeneratorService',
            'TYPO3\\CMS\\Seo\\PageTitle\\SeoTitlePageTitleProvider' => 'getSeoTitlePageTitleProviderService',
            'TYPO3\\CMS\\Seo\\XmlSitemap\\XmlSitemapRenderer' => 'getXmlSitemapRendererService',
            'TYPO3\\CMS\\Setup\\Controller\\SetupModuleController' => 'getSetupModuleControllerService',
            'TYPO3\\CMS\\SysNote\\Provider\\RecordListProvider' => 'getRecordListProviderService',
            'TYPO3\\CMS\\T3editor\\Registry\\AddonRegistry' => 'getAddonRegistryService',
            'TYPO3\\CMS\\T3editor\\Registry\\ModeRegistry' => 'getModeRegistryService',
            'TYPO3\\CMS\\T3editor\\T3editor' => 'getT3editorService',
            'TYPO3\\CMS\\Tstemplate\\Controller\\TypoScriptTemplateInformationModuleFunctionController' => 'getTypoScriptTemplateInformationModuleFunctionControllerService',
            'TYPO3\\CMS\\Tstemplate\\Controller\\TypoScriptTemplateModuleController' => 'getTypoScriptTemplateModuleControllerService',
            'TYPO3\\CMS\\Tstemplate\\Hooks\\DataHandlerClearCachePostProcHook' => 'getDataHandlerClearCachePostProcHookService',
            'TYPO3\\CMS\\Viewpage\\Controller\\ViewModuleController' => 'getViewModuleControllerService',
            'TYPO3\\CMS\\Workspaces\\Command\\AutoPublishCommand' => 'getAutoPublishCommandService',
            'TYPO3\\CMS\\Workspaces\\Command\\CleanupPreviewLinksCommand' => 'getCleanupPreviewLinksCommandService',
            'TYPO3\\CMS\\Workspaces\\Command\\WorkspaceVersionRecordsCommand' => 'getWorkspaceVersionRecordsCommandService',
            'TYPO3\\CMS\\Workspaces\\Controller\\PreviewController' => 'getPreviewControllerService',
            'TYPO3\\CMS\\Workspaces\\Controller\\ReviewController' => 'getReviewControllerService',
            'TYPO3\\CMS\\Workspaces\\Middleware\\WorkspacePreview' => 'getWorkspacePreviewService',
            'TYPO3\\CMS\\Workspaces\\Middleware\\WorkspacePreviewPermissions' => 'getWorkspacePreviewPermissionsService',
            'TYPO3\\CMS\\Workspaces\\Preview\\PreviewUriBuilder' => 'getPreviewUriBuilderService',
            'TYPO3\\CMS\\Workspaces\\Service\\Dependency\\CollectionService' => 'getCollectionServiceService',
            'TYPO3\\CMS\\Workspaces\\Service\\GridDataService' => 'getGridDataServiceService',
            'TYPO3\\CMS\\Workspaces\\Service\\HistoryService' => 'getHistoryServiceService',
            'TYPO3\\CMS\\Workspaces\\Service\\RecordService' => 'getRecordServiceService',
            'TYPO3\\CMS\\Workspaces\\Service\\StagesService' => 'getStagesServiceService',
            'TYPO3\\CMS\\Workspaces\\Service\\WorkspaceService' => 'getWorkspaceServiceService',
            'TYPO3\\SymfonyPsrEventDispatcherAdapter\\EventDispatcherAdapter' => 'getEventDispatcherAdapterService',
            'backend.middlewares' => 'getBackend_MiddlewaresService',
            'backend.routes.warmer' => 'getBackend_Routes_WarmerService',
            'backend.routes_decorated_36' => 'getBackend_RoutesDecorated36Service',
            'container.env_var_processors_locator' => 'getContainer_EnvVarProcessorsLocatorService',
            'dashboard.configuration.warmer' => 'getDashboard_Configuration_WarmerService',
            'dashboard.presets_decorated_1' => 'getDashboard_PresetsDecorated1Service',
            'dashboard.views.widget' => 'getDashboard_Views_WidgetService',
            'dashboard.widget.docGettingStarted' => 'getDashboard_Widget_DocGettingStartedService',
            'dashboard.widget.docTSconfig' => 'getDashboard_Widget_DocTSconfigService',
            'dashboard.widget.docTypoScriptReference' => 'getDashboard_Widget_DocTypoScriptReferenceService',
            'dashboard.widget.failedLogins' => 'getDashboard_Widget_FailedLoginsService',
            'dashboard.widget.sysLogErrors' => 'getDashboard_Widget_SysLogErrorsService',
            'dashboard.widget.t3information' => 'getDashboard_Widget_T3informationService',
            'dashboard.widget.t3news' => 'getDashboard_Widget_T3newsService',
            'dashboard.widget.t3securityAdvisories' => 'getDashboard_Widget_T3securityAdvisoriesService',
            'dashboard.widget.typeOfUsers' => 'getDashboard_Widget_TypeOfUsersService',
            'dashboard.widgetGroups_decorated_1' => 'getDashboard_WidgetGroupsDecorated1Service',
            'dashboard.widgets_decorated_1' => 'getDashboard_WidgetsDecorated1Service',
            'docGettingStartedWidgetConfiguration' => 'getDocGettingStartedWidgetConfigurationService',
            'docTSconfigWidgetConfiguration' => 'getDocTSconfigWidgetConfigurationService',
            'docTypoScriptReferenceWidgetConfiguration' => 'getDocTypoScriptReferenceWidgetConfigurationService',
            'failedLoginsWidgetConfiguration' => 'getFailedLoginsWidgetConfigurationService',
            'frontend.middlewares' => 'getFrontend_MiddlewaresService',
            'icons_decorated_36' => 'getIconsDecorated36Service',
            'middlewares_decorated_35' => 'getMiddlewaresDecorated35Service',
            'sysLogErrorsWidgetConfiguration' => 'getSysLogErrorsWidgetConfigurationService',
            't3informationWidgetConfiguration' => 'getT3informationWidgetConfigurationService',
            't3newsWidgetConfiguration' => 'getT3newsWidgetConfigurationService',
            't3securityAdvisoriesWidgetConfiguration' => 'getT3securityAdvisoriesWidgetConfigurationService',
            'typeOfUsersWidgetConfiguration' => 'getTypeOfUsersWidgetConfigurationService',
        ];
        $this->aliases = [
            'Composer\\Autoload\\ClassLoader' => '_early.Composer\\Autoload\\ClassLoader',
            'GuzzleHttp\\ClientInterface' => 'Psr\\Http\\Client\\ClientInterface',
            'Psr\\Container\\ContainerInterface' => 'service_container',
            'Psr\\EventDispatcher\\EventDispatcherInterface' => 'Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1',
            'Psr\\Http\\Message\\RequestFactoryInterface' => 'TYPO3\\CMS\\Core\\Http\\RequestFactory',
            'Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface' => 'TYPO3\\SymfonyPsrEventDispatcherAdapter\\EventDispatcherAdapter',
            'TYPO3\\CMS\\Backend\\Routing\\Router' => 'TYPO3\\CMS\\Backend\\Routing\\Router_decorated_1',
            'TYPO3\\CMS\\Core\\Configuration\\ConfigurationManager' => '_early.TYPO3\\CMS\\Core\\Configuration\\ConfigurationManager',
            'TYPO3\\CMS\\Core\\Console\\CommandRegistry' => 'TYPO3\\CMS\\Core\\Console\\CommandRegistry_decorated_2',
            'TYPO3\\CMS\\Core\\Console\\CommandRegistry_decorated_1' => 'TYPO3\\CMS\\Core\\Console\\CommandRegistry_decorated_2',
            'TYPO3\\CMS\\Core\\Core\\ApplicationContext' => '_early.TYPO3\\CMS\\Core\\Core\\ApplicationContext',
            'TYPO3\\CMS\\Core\\Core\\RequestId' => '_early.TYPO3\\CMS\\Core\\Core\\RequestId',
            'TYPO3\\CMS\\Core\\DependencyInjection\\ContainerBuilder' => '_early.TYPO3\\CMS\\Core\\DependencyInjection\\ContainerBuilder',
            'TYPO3\\CMS\\Core\\EventDispatcher\\ListenerProvider' => 'TYPO3\\CMS\\Core\\EventDispatcher\\ListenerProvider_decorated_3',
            'TYPO3\\CMS\\Core\\EventDispatcher\\ListenerProvider_decorated_1' => 'TYPO3\\CMS\\Core\\EventDispatcher\\ListenerProvider_decorated_3',
            'TYPO3\\CMS\\Core\\EventDispatcher\\ListenerProvider_decorated_2' => 'TYPO3\\CMS\\Core\\EventDispatcher\\ListenerProvider_decorated_3',
            'TYPO3\\CMS\\Core\\Imaging\\IconRegistry' => 'TYPO3\\CMS\\Core\\Imaging\\IconRegistry_decorated_1',
            'TYPO3\\CMS\\Core\\Log\\LogManager' => '_early.TYPO3\\CMS\\Core\\Log\\LogManager',
            'TYPO3\\CMS\\Core\\Package\\PackageManager' => '_early.TYPO3\\CMS\\Core\\Package\\PackageManager',
            'TYPO3\\CMS\\Dashboard\\DashboardPresetRegistry' => 'TYPO3\\CMS\\Dashboard\\DashboardPresetRegistry_decorated_1',
            'TYPO3\\CMS\\Dashboard\\WidgetGroupRegistry' => 'TYPO3\\CMS\\Dashboard\\WidgetGroupRegistry_decorated_1',
            'TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManagerInterface' => 'TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager',
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\QuerySettingsInterface' => 'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Typo3QuerySettings',
            'TYPO3\\CMS\\Extbase\\Persistence\\PersistenceManagerInterface' => 'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager',
            'TYPO3\\CMS\\Extbase\\Persistence\\QueryInterface' => 'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Query',
            'TYPO3\\CMS\\Extbase\\Persistence\\QueryResultInterface' => 'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\QueryResult',
            'TYPO3\\CMS\\Form\\Mvc\\Configuration\\ConfigurationManagerInterface' => 'TYPO3\\CMS\\Form\\Mvc\\Configuration\\ConfigurationManager',
            'backend.routes' => 'backend.routes_decorated_36',
            'backend.routes_decorated_1' => 'backend.routes_decorated_36',
            'backend.routes_decorated_10' => 'backend.routes_decorated_36',
            'backend.routes_decorated_11' => 'backend.routes_decorated_36',
            'backend.routes_decorated_12' => 'backend.routes_decorated_36',
            'backend.routes_decorated_13' => 'backend.routes_decorated_36',
            'backend.routes_decorated_14' => 'backend.routes_decorated_36',
            'backend.routes_decorated_15' => 'backend.routes_decorated_36',
            'backend.routes_decorated_16' => 'backend.routes_decorated_36',
            'backend.routes_decorated_17' => 'backend.routes_decorated_36',
            'backend.routes_decorated_18' => 'backend.routes_decorated_36',
            'backend.routes_decorated_19' => 'backend.routes_decorated_36',
            'backend.routes_decorated_2' => 'backend.routes_decorated_36',
            'backend.routes_decorated_20' => 'backend.routes_decorated_36',
            'backend.routes_decorated_21' => 'backend.routes_decorated_36',
            'backend.routes_decorated_22' => 'backend.routes_decorated_36',
            'backend.routes_decorated_23' => 'backend.routes_decorated_36',
            'backend.routes_decorated_24' => 'backend.routes_decorated_36',
            'backend.routes_decorated_25' => 'backend.routes_decorated_36',
            'backend.routes_decorated_26' => 'backend.routes_decorated_36',
            'backend.routes_decorated_27' => 'backend.routes_decorated_36',
            'backend.routes_decorated_28' => 'backend.routes_decorated_36',
            'backend.routes_decorated_29' => 'backend.routes_decorated_36',
            'backend.routes_decorated_3' => 'backend.routes_decorated_36',
            'backend.routes_decorated_30' => 'backend.routes_decorated_36',
            'backend.routes_decorated_31' => 'backend.routes_decorated_36',
            'backend.routes_decorated_32' => 'backend.routes_decorated_36',
            'backend.routes_decorated_33' => 'backend.routes_decorated_36',
            'backend.routes_decorated_34' => 'backend.routes_decorated_36',
            'backend.routes_decorated_35' => 'backend.routes_decorated_36',
            'backend.routes_decorated_4' => 'backend.routes_decorated_36',
            'backend.routes_decorated_5' => 'backend.routes_decorated_36',
            'backend.routes_decorated_6' => 'backend.routes_decorated_36',
            'backend.routes_decorated_7' => 'backend.routes_decorated_36',
            'backend.routes_decorated_8' => 'backend.routes_decorated_36',
            'backend.routes_decorated_9' => 'backend.routes_decorated_36',
            'boot.state' => '_early.boot.state',
            'cache.assets' => '_early.cache.assets',
            'cache.core' => '_early.cache.core',
            'cache.di' => '_early.cache.di',
            'dashboard.presets' => 'dashboard.presets_decorated_1',
            'dashboard.widgetGroups' => 'dashboard.widgetGroups_decorated_1',
            'dashboard.widgets' => 'dashboard.widgets_decorated_1',
            'icons' => 'icons_decorated_36',
            'icons_decorated_1' => 'icons_decorated_36',
            'icons_decorated_10' => 'icons_decorated_36',
            'icons_decorated_11' => 'icons_decorated_36',
            'icons_decorated_12' => 'icons_decorated_36',
            'icons_decorated_13' => 'icons_decorated_36',
            'icons_decorated_14' => 'icons_decorated_36',
            'icons_decorated_15' => 'icons_decorated_36',
            'icons_decorated_16' => 'icons_decorated_36',
            'icons_decorated_17' => 'icons_decorated_36',
            'icons_decorated_18' => 'icons_decorated_36',
            'icons_decorated_19' => 'icons_decorated_36',
            'icons_decorated_2' => 'icons_decorated_36',
            'icons_decorated_20' => 'icons_decorated_36',
            'icons_decorated_21' => 'icons_decorated_36',
            'icons_decorated_22' => 'icons_decorated_36',
            'icons_decorated_23' => 'icons_decorated_36',
            'icons_decorated_24' => 'icons_decorated_36',
            'icons_decorated_25' => 'icons_decorated_36',
            'icons_decorated_26' => 'icons_decorated_36',
            'icons_decorated_27' => 'icons_decorated_36',
            'icons_decorated_28' => 'icons_decorated_36',
            'icons_decorated_29' => 'icons_decorated_36',
            'icons_decorated_3' => 'icons_decorated_36',
            'icons_decorated_30' => 'icons_decorated_36',
            'icons_decorated_31' => 'icons_decorated_36',
            'icons_decorated_32' => 'icons_decorated_36',
            'icons_decorated_33' => 'icons_decorated_36',
            'icons_decorated_34' => 'icons_decorated_36',
            'icons_decorated_35' => 'icons_decorated_36',
            'icons_decorated_4' => 'icons_decorated_36',
            'icons_decorated_5' => 'icons_decorated_36',
            'icons_decorated_6' => 'icons_decorated_36',
            'icons_decorated_7' => 'icons_decorated_36',
            'icons_decorated_8' => 'icons_decorated_36',
            'icons_decorated_9' => 'icons_decorated_36',
            'middlewares' => 'middlewares_decorated_35',
            'middlewares_decorated_1' => 'middlewares_decorated_35',
            'middlewares_decorated_10' => 'middlewares_decorated_35',
            'middlewares_decorated_11' => 'middlewares_decorated_35',
            'middlewares_decorated_12' => 'middlewares_decorated_35',
            'middlewares_decorated_13' => 'middlewares_decorated_35',
            'middlewares_decorated_14' => 'middlewares_decorated_35',
            'middlewares_decorated_15' => 'middlewares_decorated_35',
            'middlewares_decorated_16' => 'middlewares_decorated_35',
            'middlewares_decorated_17' => 'middlewares_decorated_35',
            'middlewares_decorated_18' => 'middlewares_decorated_35',
            'middlewares_decorated_19' => 'middlewares_decorated_35',
            'middlewares_decorated_2' => 'middlewares_decorated_35',
            'middlewares_decorated_20' => 'middlewares_decorated_35',
            'middlewares_decorated_21' => 'middlewares_decorated_35',
            'middlewares_decorated_22' => 'middlewares_decorated_35',
            'middlewares_decorated_23' => 'middlewares_decorated_35',
            'middlewares_decorated_24' => 'middlewares_decorated_35',
            'middlewares_decorated_25' => 'middlewares_decorated_35',
            'middlewares_decorated_26' => 'middlewares_decorated_35',
            'middlewares_decorated_27' => 'middlewares_decorated_35',
            'middlewares_decorated_28' => 'middlewares_decorated_35',
            'middlewares_decorated_29' => 'middlewares_decorated_35',
            'middlewares_decorated_3' => 'middlewares_decorated_35',
            'middlewares_decorated_30' => 'middlewares_decorated_35',
            'middlewares_decorated_31' => 'middlewares_decorated_35',
            'middlewares_decorated_32' => 'middlewares_decorated_35',
            'middlewares_decorated_33' => 'middlewares_decorated_35',
            'middlewares_decorated_34' => 'middlewares_decorated_35',
            'middlewares_decorated_4' => 'middlewares_decorated_35',
            'middlewares_decorated_5' => 'middlewares_decorated_35',
            'middlewares_decorated_6' => 'middlewares_decorated_35',
            'middlewares_decorated_7' => 'middlewares_decorated_35',
            'middlewares_decorated_8' => 'middlewares_decorated_35',
            'middlewares_decorated_9' => 'middlewares_decorated_35',
        ];
    }

    public function compile(): void
    {
        throw \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(LogicException::class, 'You cannot compile a dumped container that was already compiled.');
    }

    public function isCompiled(): bool
    {
        return true;
    }

    public function getRemovedIds(): array
    {
        return [
            '.abstract.instanceof.TYPO3Fluid\\Fluid\\ViewHelpers\\AliasViewHelper' => true,
            '.abstract.instanceof.TYPO3Fluid\\Fluid\\ViewHelpers\\Cache\\DisableViewHelper' => true,
            '.abstract.instanceof.TYPO3Fluid\\Fluid\\ViewHelpers\\Cache\\StaticViewHelper' => true,
            '.abstract.instanceof.TYPO3Fluid\\Fluid\\ViewHelpers\\Cache\\WarmupViewHelper' => true,
            '.abstract.instanceof.TYPO3Fluid\\Fluid\\ViewHelpers\\CaseViewHelper' => true,
            '.abstract.instanceof.TYPO3Fluid\\Fluid\\ViewHelpers\\CommentViewHelper' => true,
            '.abstract.instanceof.TYPO3Fluid\\Fluid\\ViewHelpers\\CountViewHelper' => true,
            '.abstract.instanceof.TYPO3Fluid\\Fluid\\ViewHelpers\\CycleViewHelper' => true,
            '.abstract.instanceof.TYPO3Fluid\\Fluid\\ViewHelpers\\DebugViewHelper' => true,
            '.abstract.instanceof.TYPO3Fluid\\Fluid\\ViewHelpers\\DefaultCaseViewHelper' => true,
            '.abstract.instanceof.TYPO3Fluid\\Fluid\\ViewHelpers\\ElseViewHelper' => true,
            '.abstract.instanceof.TYPO3Fluid\\Fluid\\ViewHelpers\\ForViewHelper' => true,
            '.abstract.instanceof.TYPO3Fluid\\Fluid\\ViewHelpers\\Format\\CdataViewHelper' => true,
            '.abstract.instanceof.TYPO3Fluid\\Fluid\\ViewHelpers\\Format\\HtmlspecialcharsViewHelper' => true,
            '.abstract.instanceof.TYPO3Fluid\\Fluid\\ViewHelpers\\Format\\PrintfViewHelper' => true,
            '.abstract.instanceof.TYPO3Fluid\\Fluid\\ViewHelpers\\Format\\RawViewHelper' => true,
            '.abstract.instanceof.TYPO3Fluid\\Fluid\\ViewHelpers\\GroupedForViewHelper' => true,
            '.abstract.instanceof.TYPO3Fluid\\Fluid\\ViewHelpers\\IfViewHelper' => true,
            '.abstract.instanceof.TYPO3Fluid\\Fluid\\ViewHelpers\\InlineViewHelper' => true,
            '.abstract.instanceof.TYPO3Fluid\\Fluid\\ViewHelpers\\LayoutViewHelper' => true,
            '.abstract.instanceof.TYPO3Fluid\\Fluid\\ViewHelpers\\OrViewHelper' => true,
            '.abstract.instanceof.TYPO3Fluid\\Fluid\\ViewHelpers\\RenderViewHelper' => true,
            '.abstract.instanceof.TYPO3Fluid\\Fluid\\ViewHelpers\\SectionViewHelper' => true,
            '.abstract.instanceof.TYPO3Fluid\\Fluid\\ViewHelpers\\SpacelessViewHelper' => true,
            '.abstract.instanceof.TYPO3Fluid\\Fluid\\ViewHelpers\\SwitchViewHelper' => true,
            '.abstract.instanceof.TYPO3Fluid\\Fluid\\ViewHelpers\\ThenViewHelper' => true,
            '.abstract.instanceof.TYPO3Fluid\\Fluid\\ViewHelpers\\VariableViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Adminpanel\\Controller\\MainController' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Adminpanel\\Log\\DoctrineSqlLogger' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Adminpanel\\Middleware\\AdminPanelDataPersister' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Adminpanel\\Middleware\\AdminPanelInitiator' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Adminpanel\\Middleware\\AdminPanelRenderer' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Adminpanel\\Middleware\\SqlLogging' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Adminpanel\\Service\\ConfigurationService' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Adminpanel\\Service\\EventDispatcher' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Adminpanel\\ViewHelpers\\IsArrayViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Adminpanel\\ViewHelpers\\SubModuleRenderViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Authentication\\PasswordReset' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Configuration\\TypoScript\\ConditionMatching\\ConditionMatcher' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Controller\\File\\ImageProcessController' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Controller\\MfaController' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Domain\\Repository\\Module\\BackendModuleRepository' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Container\\FlexFormContainerContainer' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Container\\FlexFormElementContainer' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Container\\FlexFormEntryContainer' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Container\\FlexFormNoTabsContainer' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Container\\FlexFormSectionContainer' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Container\\FlexFormTabsContainer' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Container\\FullRecordContainer' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Container\\InlineControlContainer' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Container\\InlineRecordContainer' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Container\\ListOfFieldsContainer' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Container\\NoTabsContainer' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Container\\OuterWrapContainer' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Container\\PaletteAndSingleContainer' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Container\\SingleFieldContainer' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Container\\SiteLanguageContainer' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Container\\TabsContainer' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Element\\BackendLayoutWizardElement' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Element\\CategoryElement' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Element\\CheckboxElement' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Element\\CheckboxLabeledToggleElement' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Element\\CheckboxToggleElement' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Element\\FileInfoElement' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Element\\GroupElement' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Element\\ImageManipulationElement' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Element\\InputColorPickerElement' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Element\\InputDateTimeElement' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Element\\InputHiddenElement' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Element\\InputLinkElement' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Element\\InputSlugElement' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Element\\InputTextElement' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Element\\MfaInfoElement' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Element\\NoneElement' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Element\\PassThroughElement' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Element\\RadioElement' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Element\\SelectCheckBoxElement' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Element\\SelectMultipleSideBySideElement' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Element\\SelectSingleBoxElement' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Element\\SelectSingleElement' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Element\\SelectTreeElement' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Element\\TextElement' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Element\\TextTableElement' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Element\\UnknownElement' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Element\\UserElement' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\Element\\UserSysFileStorageIsPublicElement' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\FieldControl\\AddRecord' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\FieldControl\\EditPopup' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\FieldControl\\ElementBrowser' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\FieldControl\\InsertClipboard' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\FieldControl\\LinkPopup' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\FieldControl\\ListModule' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\FieldControl\\ResetSelection' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\FieldInformation\\AdminIsSystemMaintainer' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\FieldInformation\\BackendLayoutFromParentPage' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\FieldInformation\\TcaDescription' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\FieldWizard\\DefaultLanguageDifferences' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\FieldWizard\\LocalizationStateSelector' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\FieldWizard\\OtherLanguageContent' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\FieldWizard\\OtherLanguageThumbnails' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\FieldWizard\\RecordsOverview' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\FieldWizard\\SelectIcons' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\FieldWizard\\TableList' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\DatabaseDefaultLanguagePageRow' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\DatabaseEditRow' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\DatabaseParentPageRow' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\SiteTcaInline' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaInline' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaSiteLanguage' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\NodeExpansion\\FieldControl' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\NodeExpansion\\FieldInformation' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Form\\NodeExpansion\\FieldWizard' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\FrontendBackendUserAuthentication' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Http\\Application' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Http\\RequestHandler' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Middleware\\AdditionalResponseHeaders' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Middleware\\BackendRouteInitialization' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Middleware\\BackendUserAuthenticator' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Middleware\\ForcedHttpsBackendRedirector' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Middleware\\LockedBackendGuard' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Middleware\\OutputCompression' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Middleware\\SiteResolver' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Module\\ModuleStorage' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Preview\\StandardContentPreviewRenderer' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Routing\\Router' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Routing\\UriBuilder' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\Security\\EmailLoginNotification' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\ViewHelpers\\ArrayBrowserViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\ViewHelpers\\AvatarViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\ViewHelpers\\LanguageColumnViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\ViewHelpers\\Link\\EditRecordViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\ViewHelpers\\Link\\NewRecordViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\ViewHelpers\\Mfa\\IfHasStateViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\ViewHelpers\\ModuleLayoutViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\ViewHelpers\\ModuleLayout\\Button\\LinkButtonViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\ViewHelpers\\ModuleLayout\\Button\\ShortcutButtonViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\ViewHelpers\\ModuleLayout\\MenuItemViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\ViewHelpers\\ModuleLayout\\MenuViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\ViewHelpers\\ModuleLinkViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\ViewHelpers\\ThumbnailViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\ViewHelpers\\Uri\\EditRecordViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\ViewHelpers\\Uri\\NewRecordViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\View\\AuthenticationStyleInformation' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\View\\BackendLayoutView' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\View\\BackendLayout\\DataProviderCollection' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\View\\BackendLayout\\DataProviderContext' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\View\\BackendLayout\\RecordRememberer' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\View\\BackendTemplateView' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Backend\\View\\PageLayoutView' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Belog\\Controller\\BackendLogController' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Belog\\Domain\\Repository\\LogEntryRepository' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Belog\\Domain\\Repository\\WorkspaceRepository' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Belog\\ViewHelpers\\Be\\PagePathViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Belog\\ViewHelpers\\Form\\TranslateLabelSelectViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Belog\\ViewHelpers\\FormatDetailsViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Belog\\ViewHelpers\\UsernameViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Belog\\ViewHelpers\\WorkspaceTitleViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Beuser\\Controller\\BackendUserController' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Beuser\\Domain\\Repository\\BackendUserGroupRepository' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Beuser\\Domain\\Repository\\BackendUserRepository' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Beuser\\ViewHelpers\\ArrayElementViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Beuser\\ViewHelpers\\Display\\TableAccessViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Beuser\\ViewHelpers\\MfaStatusViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Beuser\\ViewHelpers\\PermissionsViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Beuser\\ViewHelpers\\SpriteIconForRecordViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Beuser\\ViewHelpers\\SwitchUserViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Authentication\\AbstractAuthenticationService' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Authentication\\AuthenticationService' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Authentication\\BackendUserAuthentication' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Authentication\\CommandLineUserAuthentication' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Authentication\\Mfa\\MfaProviderPropertyManager' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Cache\\Backend\\ApcuBackend' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Cache\\Backend\\FileBackend' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Cache\\Backend\\MemcachedBackend' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Cache\\Backend\\NullBackend' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Cache\\Backend\\PdoBackend' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Cache\\Backend\\RedisBackend' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Cache\\Backend\\SimpleFileBackend' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Cache\\Backend\\TransientMemoryBackend' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Cache\\Backend\\Typo3DatabaseBackend' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Cache\\Backend\\WincacheBackend' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Cache\\CacheManager' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Category\\CategoryRegistry' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Charset\\CharsetConverter' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Composer\\PackageArtifactBuilder' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Configuration\\Loader\\YamlFileLoader' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Configuration\\SiteConfiguration' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Console\\CommandRegistry' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Context\\Context' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\DataHandling\\DataHandler' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Database\\Connection' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Database\\ReferenceIndex' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Database\\SoftReferenceIndex' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\DependencyInjection\\Cache\\ContainerBackend' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Domain\\Repository\\PageRepository' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Error\\DebugExceptionHandler' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Error\\ErrorHandler' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Error\\ProductionExceptionHandler' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\EventDispatcher\\EventDispatcher' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Html\\RteHtmlParser' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Imaging\\IconRegistry' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\LinkHandling\\LinkService' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Localization\\LanguageStore' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Localization\\Locales' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Localization\\LocalizationFactory' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Locking\\LockFactory' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Mail\\MemorySpool' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Mail\\TransportFactory' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Messaging\\FlashMessageService' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\MetaTag\\MetaTagManagerRegistry' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Middleware\\NormalizedParamsAttribute' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Middleware\\ResponsePropagation' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Middleware\\VerifyHostHeader' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Package\\FailsafePackageManager' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\PageTitle\\PageTitleProviderManager' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\PageTitle\\RecordPageTitleProvider' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Page\\AssetCollector' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Page\\PageRenderer' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Registry' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Resource\\Collection\\FileCollectionRegistry' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Resource\\Driver\\DriverRegistry' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Resource\\FileRepository' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Resource\\Index\\ExtractorRegistry' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Resource\\Index\\FileIndexRepository' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Resource\\Index\\Indexer' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Resource\\Index\\MetaDataRepository' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Resource\\OnlineMedia\\Helpers\\OnlineMediaHelperRegistry' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Resource\\ProcessedFileRepository' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Resource\\Processing\\LocalImageProcessor' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Resource\\Processing\\ProcessorRegistry' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Resource\\Processing\\TaskTypeRegistry' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Resource\\Rendering\\AudioTagRenderer' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Resource\\Rendering\\RendererRegistry' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Resource\\Rendering\\VideoTagRenderer' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Resource\\Rendering\\VimeoRenderer' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Resource\\Rendering\\YouTubeRenderer' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Resource\\ResourceFactory' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Resource\\Security\\FileMetadataPermissionsAspect' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Resource\\StorageRepository' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Resource\\TextExtraction\\TextExtractorRegistry' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Routing\\SiteMatcher' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Service\\FlexFormService' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Session\\Backend\\RedisSessionBackend' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Session\\SessionManager' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Session\\UserSessionManager' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\TimeTracker\\TimeTracker' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\Type\\File\\ImageInfo' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\ViewHelpers\\Form\\TypoScriptConstantsViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\ViewHelpers\\IconForRecordViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\ViewHelpers\\IconForResourceViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\ViewHelpers\\IconViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Core\\ViewHelpers\\NormalizedUrlViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Dashboard\\DashboardPresetRegistry' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Dashboard\\ViewHelpers\\Widget\\ButtonViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Dashboard\\WidgetGroupRegistry' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Dashboard\\WidgetRegistry' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Configuration\\BackendConfigurationManager' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Configuration\\FrontendConfigurationManager' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Domain\\Repository\\BackendUserGroupRepository' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Domain\\Repository\\BackendUserRepository' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Domain\\Repository\\CategoryRepository' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Domain\\Repository\\FrontendUserGroupRepository' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Domain\\Repository\\FrontendUserRepository' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\Dispatcher' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\View\\EmptyView' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\View\\JsonView' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\Web\\FrontendRequestHandler' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\Web\\RequestBuilder' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Object\\Container\\Container' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Object\\ObjectManager' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Backend' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Mapper\\DataMapFactory' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\QueryObjectModelFactory' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Persistence\\Generic\\QueryFactory' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Session' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Storage\\Typo3DbBackend' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Persistence\\Repository' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Property\\PropertyMapper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Property\\PropertyMappingConfigurationBuilder' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\ArrayConverter' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\BooleanConverter' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\CoreTypeConverter' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\DateTimeConverter' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\FileConverter' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\FileReferenceConverter' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\FloatConverter' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\FolderConverter' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\IntegerConverter' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\ObjectConverter' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\ObjectStorageConverter' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\PersistentObjectConverter' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\StringConverter' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Service\\CacheService' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Service\\EnvironmentService' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Service\\ExtensionService' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Service\\ImageService' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\SignalSlot\\Dispatcher' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extensionmanager\\Controller\\AbstractController' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extensionmanager\\Controller\\AbstractModuleController' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extensionmanager\\Controller\\ActionController' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extensionmanager\\Controller\\DistributionController' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extensionmanager\\Controller\\DownloadController' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extensionmanager\\Controller\\ExtensionComposerStatusController' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extensionmanager\\Controller\\ListController' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extensionmanager\\Controller\\UpdateFromTerController' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extensionmanager\\Controller\\UploadExtensionFileController' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extensionmanager\\Domain\\Model\\DownloadQueue' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extensionmanager\\Domain\\Repository\\ExtensionRepository' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extensionmanager\\Service\\ExtensionManagementService' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extensionmanager\\Utility\\DependencyUtility' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extensionmanager\\Utility\\EmConfUtility' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extensionmanager\\Utility\\FileHandlingUtility' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extensionmanager\\Utility\\InstallUtility' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extensionmanager\\Utility\\ListUtility' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\Be\\TriggerViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\ConstraintsViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\DownloadExtensionViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\InstallationStateCssClassViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\ProcessAvailableActionsViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\ReloadSqlDataViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\RemoveExtensionViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\ToggleExtensionInstallationStateViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\Typo3DependencyViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Filelist\\Controller\\FileListController' => true,
            '.abstract.instanceof.TYPO3\\CMS\\FluidStyledContent\\ViewHelpers\\Link\\ClickEnlargeViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Asset\\CssViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Asset\\ScriptViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\BaseViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Buttons\\CshViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Buttons\\ShortcutViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\ContainerViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\InfoboxViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Labels\\CshViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\LinkViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Menus\\ActionMenuItemGroupViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Menus\\ActionMenuItemViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Menus\\ActionMenuViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\PageInfoViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\PagePathViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\PageRendererViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Security\\IfAuthenticatedViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Security\\IfHasRoleViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\TableListViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\UriViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\CObjectViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\DebugViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Debug\\RenderViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\FlashMessagesViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\FormViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\ButtonViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\CheckboxViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\HiddenViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\PasswordViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\RadioViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\SelectViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\Select\\OptgroupViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\Select\\OptionViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\SubmitViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\TextareaViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\TextfieldViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\UploadViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\ValidationResultsViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\BytesViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\CaseViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\CropViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\CurrencyViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\DateViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\HtmlViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\HtmlentitiesDecodeViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\HtmlentitiesViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\JsonViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\Nl2brViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\NumberViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\PaddingViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\StripTagsViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\UrlencodeViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\ImageViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\ActionViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\EmailViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\ExternalViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\FileViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\PageViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\TypolinkViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\MediaViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\RenderViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Sanitize\\HtmlViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Security\\IfAuthenticatedViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Security\\IfHasRoleViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Transform\\HtmlViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\TranslateViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\ActionViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\EmailViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\ExternalViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\ImageViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\PageViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\ResourceViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\TypolinkViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\View\\StandaloneView' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Fluid\\View\\TemplateView' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Form\\Controller\\FormEditorController' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Form\\Controller\\FormFrontendController' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Form\\Controller\\FormManagerController' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Form\\Domain\\Configuration\\ConfigurationService' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinitionConversionService' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinitionValidationService' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Form\\Domain\\Finishers\\ClosureFinisher' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Form\\Domain\\Finishers\\ConfirmationFinisher' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Form\\Domain\\Finishers\\DeleteUploadsFinisher' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Form\\Domain\\Finishers\\EmailFinisher' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Form\\Domain\\Finishers\\FlashMessageFinisher' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Form\\Domain\\Finishers\\RedirectFinisher' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Form\\Domain\\Finishers\\SaveToDatabaseFinisher' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Form\\Hooks\\FormPagePreviewRenderer' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Form\\Mvc\\Configuration\\ConfigurationManager' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Form\\Mvc\\Property\\TypeConverter\\FormDefinitionArrayConverter' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Form\\Mvc\\Property\\TypeConverter\\UploadedFileReferenceConverter' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Form\\Service\\TranslationService' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Form\\Slot\\FilePersistenceSlot' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Form\\Slot\\ResourcePublicationSlot' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Form\\ViewHelpers\\Be\\MaximumFileSizeViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Form\\ViewHelpers\\Be\\RenderContentElementPreviewViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Form\\ViewHelpers\\FormViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Form\\ViewHelpers\\Form\\DatePickerViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Form\\ViewHelpers\\Form\\TimePickerViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Form\\ViewHelpers\\Form\\UploadedResourceViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Form\\ViewHelpers\\GridColumnClassAutoConfigurationViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Form\\ViewHelpers\\RenderAllFormValuesViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Form\\ViewHelpers\\RenderFormValueViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Form\\ViewHelpers\\RenderRenderableViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Form\\ViewHelpers\\RenderViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Form\\ViewHelpers\\TranslateElementErrorViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Form\\ViewHelpers\\TranslateElementPropertyViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\FrontendLogin\\Configuration\\RecoveryConfiguration' => true,
            '.abstract.instanceof.TYPO3\\CMS\\FrontendLogin\\Controller\\LoginController' => true,
            '.abstract.instanceof.TYPO3\\CMS\\FrontendLogin\\Controller\\PasswordRecoveryController' => true,
            '.abstract.instanceof.TYPO3\\CMS\\FrontendLogin\\Service\\ValidatorResolverService' => true,
            '.abstract.instanceof.TYPO3\\CMS\\FrontendLogin\\Validation\\RedirectUrlValidator' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Frontend\\Authentication\\FrontendUserAuthentication' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Frontend\\Configuration\\TypoScript\\ConditionMatching\\ConditionMatcher' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectRenderer' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Frontend\\ContentObject\\Menu\\MenuContentObjectFactory' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Frontend\\Hooks\\MediaItemHooks' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Frontend\\Http\\Application' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Frontend\\Http\\RequestHandler' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Frontend\\Middleware\\BackendUserAuthenticator' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Frontend\\Middleware\\ContentLengthResponseHeader' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Frontend\\Middleware\\EidHandler' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Frontend\\Middleware\\FrontendUserAuthenticator' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Frontend\\Middleware\\MaintenanceMode' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Frontend\\Middleware\\OutputCompression' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Frontend\\Middleware\\PageArgumentValidator' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Frontend\\Middleware\\PageResolver' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Frontend\\Middleware\\PrepareTypoScriptFrontendRendering' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Frontend\\Middleware\\PreviewSimulator' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Frontend\\Middleware\\ShortcutAndMountPointRedirect' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Frontend\\Middleware\\SiteBaseRedirectResolver' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Frontend\\Middleware\\SiteResolver' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Frontend\\Middleware\\StaticRouteResolver' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Frontend\\Middleware\\TimeTrackerInitialization' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Frontend\\Middleware\\TypoScriptFrontendInitialization' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Frontend\\Page\\CacheHashCalculator' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Frontend\\Preview\\ImagePreviewRenderer' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Frontend\\Preview\\TextPreviewRenderer' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Frontend\\Preview\\TextmediaPreviewRenderer' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Frontend\\Preview\\TextpicPreviewRenderer' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Frontend\\Resource\\FileCollector' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Frontend\\Utility\\CompressionUtility' => true,
            '.abstract.instanceof.TYPO3\\CMS\\IndexedSearch\\Controller\\AdministrationController' => true,
            '.abstract.instanceof.TYPO3\\CMS\\IndexedSearch\\Controller\\SearchController' => true,
            '.abstract.instanceof.TYPO3\\CMS\\IndexedSearch\\ViewHelpers\\Format\\DateTimeViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\IndexedSearch\\ViewHelpers\\Format\\FlagValueViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\IndexedSearch\\ViewHelpers\\Format\\GroupListViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\IndexedSearch\\ViewHelpers\\PageBrowsingResultsViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\IndexedSearch\\ViewHelpers\\PageBrowsingViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Redirects\\Http\\Middleware\\RedirectHandler' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Redirects\\Service\\RedirectService' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Redirects\\Service\\SlugService' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Redirects\\ViewHelpers\\TargetPageIdViewHelper' => true,
            '.abstract.instanceof.TYPO3\\CMS\\RteCKEditor\\Form\\Element\\RichTextElement' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Scheduler\\Example\\SleepTask' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Scheduler\\Example\\TestTask' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Scheduler\\Scheduler' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Scheduler\\Task\\CachingFrameworkGarbageCollectionTask' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Scheduler\\Task\\ExecuteSchedulableCommandTask' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Scheduler\\Task\\FileStorageExtractionTask' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Scheduler\\Task\\FileStorageIndexingTask' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Scheduler\\Task\\IpAnonymizationTask' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Scheduler\\Task\\OptimizeDatabaseTableTask' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Scheduler\\Task\\RecyclerGarbageCollectionTask' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Scheduler\\Task\\TableGarbageCollectionTask' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Seo\\PageTitle\\SeoTitlePageTitleProvider' => true,
            '.abstract.instanceof.TYPO3\\CMS\\T3editor\\Form\\Element\\T3editorElement' => true,
            '.abstract.instanceof.TYPO3\\CMS\\T3editor\\Registry\\AddonRegistry' => true,
            '.abstract.instanceof.TYPO3\\CMS\\T3editor\\Registry\\ModeRegistry' => true,
            '.abstract.instanceof.TYPO3\\CMS\\T3editor\\T3editor' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Workspaces\\Authentication\\PreviewUserAuthentication' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Workspaces\\Middleware\\WorkspacePreview' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Workspaces\\Middleware\\WorkspacePreviewPermissions' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Workspaces\\Notification\\StageChangeNotification' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Workspaces\\Service\\Dependency\\CollectionService' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Workspaces\\Service\\GridDataService' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Workspaces\\Service\\HistoryService' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Workspaces\\Service\\RecordService' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Workspaces\\Service\\StagesService' => true,
            '.abstract.instanceof.TYPO3\\CMS\\Workspaces\\Service\\WorkspaceService' => true,
            '.abstract.instanceof.dashboard.views.widget' => true,
            '.instanceof.Psr\\Http\\Server\\MiddlewareInterface.0.TYPO3\\CMS\\Adminpanel\\Middleware\\AdminPanelDataPersister' => true,
            '.instanceof.Psr\\Http\\Server\\MiddlewareInterface.0.TYPO3\\CMS\\Adminpanel\\Middleware\\AdminPanelInitiator' => true,
            '.instanceof.Psr\\Http\\Server\\MiddlewareInterface.0.TYPO3\\CMS\\Adminpanel\\Middleware\\AdminPanelRenderer' => true,
            '.instanceof.Psr\\Http\\Server\\MiddlewareInterface.0.TYPO3\\CMS\\Adminpanel\\Middleware\\SqlLogging' => true,
            '.instanceof.Psr\\Http\\Server\\MiddlewareInterface.0.TYPO3\\CMS\\Backend\\Middleware\\AdditionalResponseHeaders' => true,
            '.instanceof.Psr\\Http\\Server\\MiddlewareInterface.0.TYPO3\\CMS\\Backend\\Middleware\\BackendRouteInitialization' => true,
            '.instanceof.Psr\\Http\\Server\\MiddlewareInterface.0.TYPO3\\CMS\\Backend\\Middleware\\BackendUserAuthenticator' => true,
            '.instanceof.Psr\\Http\\Server\\MiddlewareInterface.0.TYPO3\\CMS\\Backend\\Middleware\\ForcedHttpsBackendRedirector' => true,
            '.instanceof.Psr\\Http\\Server\\MiddlewareInterface.0.TYPO3\\CMS\\Backend\\Middleware\\LockedBackendGuard' => true,
            '.instanceof.Psr\\Http\\Server\\MiddlewareInterface.0.TYPO3\\CMS\\Backend\\Middleware\\OutputCompression' => true,
            '.instanceof.Psr\\Http\\Server\\MiddlewareInterface.0.TYPO3\\CMS\\Backend\\Middleware\\SiteResolver' => true,
            '.instanceof.Psr\\Http\\Server\\MiddlewareInterface.0.TYPO3\\CMS\\Core\\Middleware\\NormalizedParamsAttribute' => true,
            '.instanceof.Psr\\Http\\Server\\MiddlewareInterface.0.TYPO3\\CMS\\Core\\Middleware\\ResponsePropagation' => true,
            '.instanceof.Psr\\Http\\Server\\MiddlewareInterface.0.TYPO3\\CMS\\Core\\Middleware\\VerifyHostHeader' => true,
            '.instanceof.Psr\\Http\\Server\\MiddlewareInterface.0.TYPO3\\CMS\\Frontend\\Middleware\\BackendUserAuthenticator' => true,
            '.instanceof.Psr\\Http\\Server\\MiddlewareInterface.0.TYPO3\\CMS\\Frontend\\Middleware\\ContentLengthResponseHeader' => true,
            '.instanceof.Psr\\Http\\Server\\MiddlewareInterface.0.TYPO3\\CMS\\Frontend\\Middleware\\EidHandler' => true,
            '.instanceof.Psr\\Http\\Server\\MiddlewareInterface.0.TYPO3\\CMS\\Frontend\\Middleware\\FrontendUserAuthenticator' => true,
            '.instanceof.Psr\\Http\\Server\\MiddlewareInterface.0.TYPO3\\CMS\\Frontend\\Middleware\\MaintenanceMode' => true,
            '.instanceof.Psr\\Http\\Server\\MiddlewareInterface.0.TYPO3\\CMS\\Frontend\\Middleware\\OutputCompression' => true,
            '.instanceof.Psr\\Http\\Server\\MiddlewareInterface.0.TYPO3\\CMS\\Frontend\\Middleware\\PageArgumentValidator' => true,
            '.instanceof.Psr\\Http\\Server\\MiddlewareInterface.0.TYPO3\\CMS\\Frontend\\Middleware\\PageResolver' => true,
            '.instanceof.Psr\\Http\\Server\\MiddlewareInterface.0.TYPO3\\CMS\\Frontend\\Middleware\\PrepareTypoScriptFrontendRendering' => true,
            '.instanceof.Psr\\Http\\Server\\MiddlewareInterface.0.TYPO3\\CMS\\Frontend\\Middleware\\PreviewSimulator' => true,
            '.instanceof.Psr\\Http\\Server\\MiddlewareInterface.0.TYPO3\\CMS\\Frontend\\Middleware\\ShortcutAndMountPointRedirect' => true,
            '.instanceof.Psr\\Http\\Server\\MiddlewareInterface.0.TYPO3\\CMS\\Frontend\\Middleware\\SiteBaseRedirectResolver' => true,
            '.instanceof.Psr\\Http\\Server\\MiddlewareInterface.0.TYPO3\\CMS\\Frontend\\Middleware\\SiteResolver' => true,
            '.instanceof.Psr\\Http\\Server\\MiddlewareInterface.0.TYPO3\\CMS\\Frontend\\Middleware\\StaticRouteResolver' => true,
            '.instanceof.Psr\\Http\\Server\\MiddlewareInterface.0.TYPO3\\CMS\\Frontend\\Middleware\\TimeTrackerInitialization' => true,
            '.instanceof.Psr\\Http\\Server\\MiddlewareInterface.0.TYPO3\\CMS\\Frontend\\Middleware\\TypoScriptFrontendInitialization' => true,
            '.instanceof.Psr\\Http\\Server\\MiddlewareInterface.0.TYPO3\\CMS\\Redirects\\Http\\Middleware\\RedirectHandler' => true,
            '.instanceof.Psr\\Http\\Server\\MiddlewareInterface.0.TYPO3\\CMS\\Workspaces\\Middleware\\WorkspacePreview' => true,
            '.instanceof.Psr\\Http\\Server\\MiddlewareInterface.0.TYPO3\\CMS\\Workspaces\\Middleware\\WorkspacePreviewPermissions' => true,
            '.instanceof.Psr\\Http\\Server\\RequestHandlerInterface.0.TYPO3\\CMS\\Backend\\Http\\Application' => true,
            '.instanceof.Psr\\Http\\Server\\RequestHandlerInterface.0.TYPO3\\CMS\\Backend\\Http\\RequestHandler' => true,
            '.instanceof.Psr\\Http\\Server\\RequestHandlerInterface.0.TYPO3\\CMS\\Frontend\\Http\\Application' => true,
            '.instanceof.Psr\\Http\\Server\\RequestHandlerInterface.0.TYPO3\\CMS\\Frontend\\Http\\RequestHandler' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Adminpanel\\Log\\DoctrineSqlLogger' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Authentication\\PasswordReset' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Configuration\\TypoScript\\ConditionMatching\\ConditionMatcher' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Controller\\File\\ImageProcessController' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Controller\\MfaController' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Container\\FlexFormContainerContainer' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Container\\FlexFormElementContainer' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Container\\FlexFormEntryContainer' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Container\\FlexFormNoTabsContainer' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Container\\FlexFormSectionContainer' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Container\\FlexFormTabsContainer' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Container\\FullRecordContainer' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Container\\InlineControlContainer' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Container\\InlineRecordContainer' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Container\\ListOfFieldsContainer' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Container\\NoTabsContainer' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Container\\OuterWrapContainer' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Container\\PaletteAndSingleContainer' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Container\\SingleFieldContainer' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Container\\SiteLanguageContainer' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Container\\TabsContainer' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Element\\BackendLayoutWizardElement' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Element\\CategoryElement' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Element\\CheckboxElement' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Element\\CheckboxLabeledToggleElement' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Element\\CheckboxToggleElement' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Element\\FileInfoElement' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Element\\GroupElement' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Element\\ImageManipulationElement' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Element\\InputColorPickerElement' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Element\\InputDateTimeElement' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Element\\InputHiddenElement' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Element\\InputLinkElement' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Element\\InputSlugElement' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Element\\InputTextElement' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Element\\MfaInfoElement' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Element\\NoneElement' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Element\\PassThroughElement' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Element\\RadioElement' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Element\\SelectCheckBoxElement' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Element\\SelectMultipleSideBySideElement' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Element\\SelectSingleBoxElement' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Element\\SelectSingleElement' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Element\\SelectTreeElement' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Element\\TextElement' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Element\\TextTableElement' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Element\\UnknownElement' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Element\\UserElement' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\Element\\UserSysFileStorageIsPublicElement' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\FieldControl\\AddRecord' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\FieldControl\\EditPopup' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\FieldControl\\ElementBrowser' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\FieldControl\\InsertClipboard' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\FieldControl\\LinkPopup' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\FieldControl\\ListModule' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\FieldControl\\ResetSelection' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\FieldInformation\\AdminIsSystemMaintainer' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\FieldInformation\\BackendLayoutFromParentPage' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\FieldInformation\\TcaDescription' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\FieldWizard\\DefaultLanguageDifferences' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\FieldWizard\\LocalizationStateSelector' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\FieldWizard\\OtherLanguageContent' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\FieldWizard\\OtherLanguageThumbnails' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\FieldWizard\\RecordsOverview' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\FieldWizard\\SelectIcons' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\FieldWizard\\TableList' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\DatabaseDefaultLanguagePageRow' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\DatabaseEditRow' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\DatabaseParentPageRow' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\SiteTcaInline' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaInline' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaSiteLanguage' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\NodeExpansion\\FieldControl' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\NodeExpansion\\FieldInformation' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Form\\NodeExpansion\\FieldWizard' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\FrontendBackendUserAuthentication' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Middleware\\BackendUserAuthenticator' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Preview\\StandardContentPreviewRenderer' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\Security\\EmailLoginNotification' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\View\\AuthenticationStyleInformation' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Backend\\View\\PageLayoutView' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Core\\Authentication\\AbstractAuthenticationService' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Core\\Authentication\\AuthenticationService' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Core\\Authentication\\BackendUserAuthentication' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Core\\Authentication\\CommandLineUserAuthentication' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Core\\Authentication\\Mfa\\MfaProviderPropertyManager' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Core\\Cache\\Backend\\ApcuBackend' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Core\\Cache\\Backend\\FileBackend' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Core\\Cache\\Backend\\MemcachedBackend' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Core\\Cache\\Backend\\NullBackend' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Core\\Cache\\Backend\\PdoBackend' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Core\\Cache\\Backend\\RedisBackend' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Core\\Cache\\Backend\\SimpleFileBackend' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Core\\Cache\\Backend\\TransientMemoryBackend' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Core\\Cache\\Backend\\Typo3DatabaseBackend' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Core\\Cache\\Backend\\WincacheBackend' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Core\\Configuration\\Loader\\YamlFileLoader' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Core\\DataHandling\\DataHandler' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Core\\Database\\Connection' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Core\\Database\\ReferenceIndex' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Core\\DependencyInjection\\Cache\\ContainerBackend' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Core\\Domain\\Repository\\PageRepository' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Core\\Error\\DebugExceptionHandler' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Core\\Error\\ErrorHandler' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Core\\Error\\ProductionExceptionHandler' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Core\\Html\\RteHtmlParser' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Core\\Mail\\TransportFactory' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Core\\PageTitle\\PageTitleProviderManager' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Core\\Resource\\Index\\Indexer' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Core\\Resource\\ProcessedFileRepository' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Core\\Resource\\Processing\\LocalImageProcessor' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Core\\Resource\\StorageRepository' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Core\\Session\\Backend\\RedisSessionBackend' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Core\\Session\\UserSessionManager' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Core\\Type\\File\\ImageInfo' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Extbase\\Object\\Container\\Container' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Extensionmanager\\Utility\\FileHandlingUtility' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Extensionmanager\\Utility\\InstallUtility' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Filelist\\Controller\\FileListController' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Form\\Hooks\\FormPagePreviewRenderer' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\FrontendLogin\\Configuration\\RecoveryConfiguration' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\FrontendLogin\\Validation\\RedirectUrlValidator' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Frontend\\Authentication\\FrontendUserAuthentication' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Frontend\\Configuration\\TypoScript\\ConditionMatching\\ConditionMatcher' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectRenderer' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Frontend\\Middleware\\FrontendUserAuthenticator' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Frontend\\Middleware\\PageArgumentValidator' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Frontend\\Preview\\ImagePreviewRenderer' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Frontend\\Preview\\TextPreviewRenderer' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Frontend\\Preview\\TextmediaPreviewRenderer' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Frontend\\Preview\\TextpicPreviewRenderer' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Frontend\\Resource\\FileCollector' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Redirects\\Http\\Middleware\\RedirectHandler' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Redirects\\Service\\RedirectService' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Redirects\\Service\\SlugService' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\RteCKEditor\\Form\\Element\\RichTextElement' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Scheduler\\Example\\SleepTask' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Scheduler\\Example\\TestTask' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Scheduler\\Task\\CachingFrameworkGarbageCollectionTask' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Scheduler\\Task\\ExecuteSchedulableCommandTask' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Scheduler\\Task\\FileStorageExtractionTask' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Scheduler\\Task\\FileStorageIndexingTask' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Scheduler\\Task\\IpAnonymizationTask' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Scheduler\\Task\\OptimizeDatabaseTableTask' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Scheduler\\Task\\RecyclerGarbageCollectionTask' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Scheduler\\Task\\TableGarbageCollectionTask' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\T3editor\\Form\\Element\\T3editorElement' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Workspaces\\Authentication\\PreviewUserAuthentication' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Workspaces\\Notification\\StageChangeNotification' => true,
            '.instanceof.Psr\\Log\\LoggerAwareInterface.0.TYPO3\\CMS\\Workspaces\\Service\\GridDataService' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3Fluid\\Fluid\\ViewHelpers\\AliasViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3Fluid\\Fluid\\ViewHelpers\\Cache\\DisableViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3Fluid\\Fluid\\ViewHelpers\\Cache\\StaticViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3Fluid\\Fluid\\ViewHelpers\\Cache\\WarmupViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3Fluid\\Fluid\\ViewHelpers\\CaseViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3Fluid\\Fluid\\ViewHelpers\\CommentViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3Fluid\\Fluid\\ViewHelpers\\CountViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3Fluid\\Fluid\\ViewHelpers\\CycleViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3Fluid\\Fluid\\ViewHelpers\\DebugViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3Fluid\\Fluid\\ViewHelpers\\DefaultCaseViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3Fluid\\Fluid\\ViewHelpers\\ElseViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3Fluid\\Fluid\\ViewHelpers\\ForViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3Fluid\\Fluid\\ViewHelpers\\Format\\CdataViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3Fluid\\Fluid\\ViewHelpers\\Format\\HtmlspecialcharsViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3Fluid\\Fluid\\ViewHelpers\\Format\\PrintfViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3Fluid\\Fluid\\ViewHelpers\\Format\\RawViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3Fluid\\Fluid\\ViewHelpers\\GroupedForViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3Fluid\\Fluid\\ViewHelpers\\IfViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3Fluid\\Fluid\\ViewHelpers\\InlineViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3Fluid\\Fluid\\ViewHelpers\\LayoutViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3Fluid\\Fluid\\ViewHelpers\\OrViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3Fluid\\Fluid\\ViewHelpers\\RenderViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3Fluid\\Fluid\\ViewHelpers\\SectionViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3Fluid\\Fluid\\ViewHelpers\\SpacelessViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3Fluid\\Fluid\\ViewHelpers\\SwitchViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3Fluid\\Fluid\\ViewHelpers\\ThenViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3Fluid\\Fluid\\ViewHelpers\\VariableViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Adminpanel\\ViewHelpers\\IsArrayViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Adminpanel\\ViewHelpers\\SubModuleRenderViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Backend\\ViewHelpers\\ArrayBrowserViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Backend\\ViewHelpers\\AvatarViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Backend\\ViewHelpers\\LanguageColumnViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Backend\\ViewHelpers\\Link\\EditRecordViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Backend\\ViewHelpers\\Link\\NewRecordViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Backend\\ViewHelpers\\Mfa\\IfHasStateViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Backend\\ViewHelpers\\ModuleLayoutViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Backend\\ViewHelpers\\ModuleLayout\\Button\\LinkButtonViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Backend\\ViewHelpers\\ModuleLayout\\Button\\ShortcutButtonViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Backend\\ViewHelpers\\ModuleLayout\\MenuItemViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Backend\\ViewHelpers\\ModuleLayout\\MenuViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Backend\\ViewHelpers\\ModuleLinkViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Backend\\ViewHelpers\\ThumbnailViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Backend\\ViewHelpers\\Uri\\EditRecordViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Backend\\ViewHelpers\\Uri\\NewRecordViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Belog\\ViewHelpers\\Be\\PagePathViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Belog\\ViewHelpers\\Form\\TranslateLabelSelectViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Belog\\ViewHelpers\\FormatDetailsViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Belog\\ViewHelpers\\UsernameViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Belog\\ViewHelpers\\WorkspaceTitleViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Beuser\\ViewHelpers\\ArrayElementViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Beuser\\ViewHelpers\\Display\\TableAccessViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Beuser\\ViewHelpers\\MfaStatusViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Beuser\\ViewHelpers\\PermissionsViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Beuser\\ViewHelpers\\SpriteIconForRecordViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Beuser\\ViewHelpers\\SwitchUserViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Core\\ViewHelpers\\Form\\TypoScriptConstantsViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Core\\ViewHelpers\\IconForRecordViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Core\\ViewHelpers\\IconForResourceViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Core\\ViewHelpers\\IconViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Core\\ViewHelpers\\NormalizedUrlViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Dashboard\\ViewHelpers\\Widget\\ButtonViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\Be\\TriggerViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\ConstraintsViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\DownloadExtensionViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\InstallationStateCssClassViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\ProcessAvailableActionsViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\ReloadSqlDataViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\RemoveExtensionViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\ToggleExtensionInstallationStateViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\Typo3DependencyViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\FluidStyledContent\\ViewHelpers\\Link\\ClickEnlargeViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Asset\\CssViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Asset\\ScriptViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\BaseViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Buttons\\CshViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Buttons\\ShortcutViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\ContainerViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\InfoboxViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Labels\\CshViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\LinkViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Menus\\ActionMenuItemGroupViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Menus\\ActionMenuItemViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Menus\\ActionMenuViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\PageInfoViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\PagePathViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\PageRendererViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Security\\IfAuthenticatedViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Security\\IfHasRoleViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\TableListViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\UriViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\CObjectViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\DebugViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Debug\\RenderViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\FlashMessagesViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\FormViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\ButtonViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\CheckboxViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\HiddenViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\PasswordViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\RadioViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\SelectViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\Select\\OptgroupViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\Select\\OptionViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\SubmitViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\TextareaViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\TextfieldViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\UploadViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\ValidationResultsViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\BytesViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\CaseViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\CropViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\CurrencyViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\DateViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\HtmlViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\HtmlentitiesDecodeViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\HtmlentitiesViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\JsonViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\Nl2brViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\NumberViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\PaddingViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\StripTagsViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\UrlencodeViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\ImageViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\ActionViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\EmailViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\ExternalViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\FileViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\PageViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\TypolinkViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\MediaViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\RenderViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Sanitize\\HtmlViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Security\\IfAuthenticatedViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Security\\IfHasRoleViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Transform\\HtmlViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\TranslateViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\ActionViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\EmailViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\ExternalViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\ImageViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\PageViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\ResourceViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\TypolinkViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Form\\ViewHelpers\\Be\\MaximumFileSizeViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Form\\ViewHelpers\\Be\\RenderContentElementPreviewViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Form\\ViewHelpers\\FormViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Form\\ViewHelpers\\Form\\DatePickerViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Form\\ViewHelpers\\Form\\TimePickerViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Form\\ViewHelpers\\Form\\UploadedResourceViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Form\\ViewHelpers\\GridColumnClassAutoConfigurationViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Form\\ViewHelpers\\RenderAllFormValuesViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Form\\ViewHelpers\\RenderFormValueViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Form\\ViewHelpers\\RenderRenderableViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Form\\ViewHelpers\\RenderViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Form\\ViewHelpers\\TranslateElementErrorViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Form\\ViewHelpers\\TranslateElementPropertyViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\IndexedSearch\\ViewHelpers\\Format\\DateTimeViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\IndexedSearch\\ViewHelpers\\Format\\FlagValueViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\IndexedSearch\\ViewHelpers\\Format\\GroupListViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\IndexedSearch\\ViewHelpers\\PageBrowsingResultsViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\IndexedSearch\\ViewHelpers\\PageBrowsingViewHelper' => true,
            '.instanceof.TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperInterface.0.TYPO3\\CMS\\Redirects\\ViewHelpers\\TargetPageIdViewHelper' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Adminpanel\\Controller\\MainController' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Adminpanel\\Service\\ConfigurationService' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Adminpanel\\Service\\EventDispatcher' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Backend\\Domain\\Repository\\Module\\BackendModuleRepository' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Backend\\Module\\ModuleStorage' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Backend\\Routing\\Router' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Backend\\Routing\\UriBuilder' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Backend\\View\\BackendLayoutView' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Backend\\View\\BackendLayout\\DataProviderCollection' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Backend\\View\\BackendLayout\\DataProviderContext' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Backend\\View\\BackendLayout\\RecordRememberer' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Belog\\Domain\\Repository\\LogEntryRepository' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Belog\\Domain\\Repository\\WorkspaceRepository' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Beuser\\Domain\\Repository\\BackendUserGroupRepository' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Beuser\\Domain\\Repository\\BackendUserRepository' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Cache\\CacheManager' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Category\\CategoryRegistry' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Charset\\CharsetConverter' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Composer\\PackageArtifactBuilder' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Configuration\\SiteConfiguration' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Console\\CommandRegistry' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Context\\Context' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Database\\SoftReferenceIndex' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Error\\DebugExceptionHandler' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Error\\ProductionExceptionHandler' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\EventDispatcher\\EventDispatcher' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Imaging\\IconRegistry' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\LinkHandling\\LinkService' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Localization\\LanguageStore' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Localization\\Locales' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Localization\\LocalizationFactory' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Locking\\LockFactory' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Mail\\MemorySpool' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Mail\\TransportFactory' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Messaging\\FlashMessageService' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\MetaTag\\MetaTagManagerRegistry' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Package\\FailsafePackageManager' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\PageTitle\\PageTitleProviderManager' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\PageTitle\\RecordPageTitleProvider' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Page\\AssetCollector' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Page\\PageRenderer' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Registry' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Resource\\Collection\\FileCollectionRegistry' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Resource\\Driver\\DriverRegistry' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Resource\\FileRepository' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Resource\\Index\\ExtractorRegistry' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Resource\\Index\\FileIndexRepository' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Resource\\Index\\MetaDataRepository' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Resource\\OnlineMedia\\Helpers\\OnlineMediaHelperRegistry' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Resource\\ProcessedFileRepository' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Resource\\Processing\\ProcessorRegistry' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Resource\\Processing\\TaskTypeRegistry' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Resource\\Rendering\\AudioTagRenderer' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Resource\\Rendering\\RendererRegistry' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Resource\\Rendering\\VideoTagRenderer' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Resource\\Rendering\\VimeoRenderer' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Resource\\Rendering\\YouTubeRenderer' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Resource\\ResourceFactory' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Resource\\Security\\FileMetadataPermissionsAspect' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Resource\\TextExtraction\\TextExtractorRegistry' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Routing\\SiteMatcher' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Service\\FlexFormService' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\Session\\SessionManager' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Core\\TimeTracker\\TimeTracker' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Dashboard\\DashboardPresetRegistry' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Dashboard\\WidgetGroupRegistry' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Dashboard\\WidgetRegistry' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Configuration\\BackendConfigurationManager' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Configuration\\FrontendConfigurationManager' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Domain\\Repository\\BackendUserGroupRepository' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Domain\\Repository\\BackendUserRepository' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Domain\\Repository\\CategoryRepository' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Domain\\Repository\\FrontendUserGroupRepository' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Domain\\Repository\\FrontendUserRepository' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Mvc\\Dispatcher' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Mvc\\Web\\RequestBuilder' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Object\\Container\\Container' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Object\\ObjectManager' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Backend' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Mapper\\DataMapFactory' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\QueryObjectModelFactory' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Persistence\\Generic\\QueryFactory' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Session' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Storage\\Typo3DbBackend' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Persistence\\Repository' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Property\\PropertyMapper' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Property\\PropertyMappingConfigurationBuilder' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\ArrayConverter' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\BooleanConverter' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\CoreTypeConverter' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\DateTimeConverter' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\FileConverter' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\FileReferenceConverter' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\FloatConverter' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\FolderConverter' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\IntegerConverter' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\ObjectConverter' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\ObjectStorageConverter' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\PersistentObjectConverter' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\StringConverter' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Service\\CacheService' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Service\\EnvironmentService' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Service\\ExtensionService' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Service\\ImageService' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\SignalSlot\\Dispatcher' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extensionmanager\\Domain\\Model\\DownloadQueue' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extensionmanager\\Domain\\Repository\\ExtensionRepository' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extensionmanager\\Service\\ExtensionManagementService' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extensionmanager\\Utility\\DependencyUtility' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extensionmanager\\Utility\\EmConfUtility' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extensionmanager\\Utility\\FileHandlingUtility' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extensionmanager\\Utility\\InstallUtility' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Extensionmanager\\Utility\\ListUtility' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Form\\Domain\\Configuration\\ConfigurationService' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinitionConversionService' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinitionValidationService' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Form\\Mvc\\Configuration\\ConfigurationManager' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Form\\Mvc\\Property\\TypeConverter\\FormDefinitionArrayConverter' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Form\\Mvc\\Property\\TypeConverter\\UploadedFileReferenceConverter' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Form\\Service\\TranslationService' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Form\\Slot\\FilePersistenceSlot' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Form\\Slot\\ResourcePublicationSlot' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\FrontendLogin\\Service\\ValidatorResolverService' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Frontend\\ContentObject\\Menu\\MenuContentObjectFactory' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Frontend\\Hooks\\MediaItemHooks' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Frontend\\Page\\CacheHashCalculator' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Frontend\\Utility\\CompressionUtility' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Scheduler\\Scheduler' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Seo\\PageTitle\\SeoTitlePageTitleProvider' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\T3editor\\Registry\\AddonRegistry' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\T3editor\\Registry\\ModeRegistry' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\T3editor\\T3editor' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Workspaces\\Service\\Dependency\\CollectionService' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Workspaces\\Service\\HistoryService' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Workspaces\\Service\\RecordService' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Workspaces\\Service\\StagesService' => true,
            '.instanceof.TYPO3\\CMS\\Core\\SingletonInterface.0.TYPO3\\CMS\\Workspaces\\Service\\WorkspaceService' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ActionController.0.TYPO3\\CMS\\Belog\\Controller\\BackendLogController' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ActionController.0.TYPO3\\CMS\\Beuser\\Controller\\BackendUserController' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ActionController.0.TYPO3\\CMS\\Extensionmanager\\Controller\\AbstractController' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ActionController.0.TYPO3\\CMS\\Extensionmanager\\Controller\\AbstractModuleController' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ActionController.0.TYPO3\\CMS\\Extensionmanager\\Controller\\ActionController' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ActionController.0.TYPO3\\CMS\\Extensionmanager\\Controller\\DistributionController' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ActionController.0.TYPO3\\CMS\\Extensionmanager\\Controller\\DownloadController' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ActionController.0.TYPO3\\CMS\\Extensionmanager\\Controller\\ExtensionComposerStatusController' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ActionController.0.TYPO3\\CMS\\Extensionmanager\\Controller\\ListController' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ActionController.0.TYPO3\\CMS\\Extensionmanager\\Controller\\UpdateFromTerController' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ActionController.0.TYPO3\\CMS\\Extensionmanager\\Controller\\UploadExtensionFileController' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ActionController.0.TYPO3\\CMS\\Form\\Controller\\FormEditorController' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ActionController.0.TYPO3\\CMS\\Form\\Controller\\FormFrontendController' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ActionController.0.TYPO3\\CMS\\Form\\Controller\\FormManagerController' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ActionController.0.TYPO3\\CMS\\FrontendLogin\\Controller\\LoginController' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ActionController.0.TYPO3\\CMS\\FrontendLogin\\Controller\\PasswordRecoveryController' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ActionController.0.TYPO3\\CMS\\IndexedSearch\\Controller\\AdministrationController' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ActionController.0.TYPO3\\CMS\\IndexedSearch\\Controller\\SearchController' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ControllerInterface.0.TYPO3\\CMS\\Belog\\Controller\\BackendLogController' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ControllerInterface.0.TYPO3\\CMS\\Beuser\\Controller\\BackendUserController' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ControllerInterface.0.TYPO3\\CMS\\Extensionmanager\\Controller\\AbstractController' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ControllerInterface.0.TYPO3\\CMS\\Extensionmanager\\Controller\\AbstractModuleController' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ControllerInterface.0.TYPO3\\CMS\\Extensionmanager\\Controller\\ActionController' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ControllerInterface.0.TYPO3\\CMS\\Extensionmanager\\Controller\\DistributionController' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ControllerInterface.0.TYPO3\\CMS\\Extensionmanager\\Controller\\DownloadController' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ControllerInterface.0.TYPO3\\CMS\\Extensionmanager\\Controller\\ExtensionComposerStatusController' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ControllerInterface.0.TYPO3\\CMS\\Extensionmanager\\Controller\\ListController' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ControllerInterface.0.TYPO3\\CMS\\Extensionmanager\\Controller\\UpdateFromTerController' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ControllerInterface.0.TYPO3\\CMS\\Extensionmanager\\Controller\\UploadExtensionFileController' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ControllerInterface.0.TYPO3\\CMS\\Form\\Controller\\FormEditorController' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ControllerInterface.0.TYPO3\\CMS\\Form\\Controller\\FormFrontendController' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ControllerInterface.0.TYPO3\\CMS\\Form\\Controller\\FormManagerController' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ControllerInterface.0.TYPO3\\CMS\\FrontendLogin\\Controller\\LoginController' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ControllerInterface.0.TYPO3\\CMS\\FrontendLogin\\Controller\\PasswordRecoveryController' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ControllerInterface.0.TYPO3\\CMS\\IndexedSearch\\Controller\\AdministrationController' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ControllerInterface.0.TYPO3\\CMS\\IndexedSearch\\Controller\\SearchController' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\RequestHandlerInterface.0.TYPO3\\CMS\\Extbase\\Mvc\\Web\\FrontendRequestHandler' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\View\\ViewInterface.0.TYPO3\\CMS\\Backend\\View\\BackendTemplateView' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\View\\ViewInterface.0.TYPO3\\CMS\\Extbase\\Mvc\\View\\EmptyView' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\View\\ViewInterface.0.TYPO3\\CMS\\Extbase\\Mvc\\View\\JsonView' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\View\\ViewInterface.0.TYPO3\\CMS\\Fluid\\View\\StandaloneView' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\View\\ViewInterface.0.TYPO3\\CMS\\Fluid\\View\\TemplateView' => true,
            '.instanceof.TYPO3\\CMS\\Extbase\\Mvc\\View\\ViewInterface.0.dashboard.views.widget' => true,
            '.instanceof.TYPO3\\CMS\\Form\\Domain\\Finishers\\FinisherInterface.0.TYPO3\\CMS\\Form\\Domain\\Finishers\\ClosureFinisher' => true,
            '.instanceof.TYPO3\\CMS\\Form\\Domain\\Finishers\\FinisherInterface.0.TYPO3\\CMS\\Form\\Domain\\Finishers\\ConfirmationFinisher' => true,
            '.instanceof.TYPO3\\CMS\\Form\\Domain\\Finishers\\FinisherInterface.0.TYPO3\\CMS\\Form\\Domain\\Finishers\\DeleteUploadsFinisher' => true,
            '.instanceof.TYPO3\\CMS\\Form\\Domain\\Finishers\\FinisherInterface.0.TYPO3\\CMS\\Form\\Domain\\Finishers\\EmailFinisher' => true,
            '.instanceof.TYPO3\\CMS\\Form\\Domain\\Finishers\\FinisherInterface.0.TYPO3\\CMS\\Form\\Domain\\Finishers\\FlashMessageFinisher' => true,
            '.instanceof.TYPO3\\CMS\\Form\\Domain\\Finishers\\FinisherInterface.0.TYPO3\\CMS\\Form\\Domain\\Finishers\\RedirectFinisher' => true,
            '.instanceof.TYPO3\\CMS\\Form\\Domain\\Finishers\\FinisherInterface.0.TYPO3\\CMS\\Form\\Domain\\Finishers\\SaveToDatabaseFinisher' => true,
            '.service_locator.7iHj9.7' => true,
            'GuzzleHttp\\Client' => true,
            'Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1.inner' => true,
            'Psr\\EventDispatcher\\ListenerProviderInterface' => true,
            'Symfony\\Component\\DependencyInjection\\ContainerInterface' => true,
            'TYPO3\\CMS\\Adminpanel\\Controller\\AjaxController' => true,
            'TYPO3\\CMS\\Adminpanel\\Exceptions\\InvalidConfigurationException' => true,
            'TYPO3\\CMS\\Adminpanel\\Log\\DoctrineSqlLogger' => true,
            'TYPO3\\CMS\\Adminpanel\\Log\\InMemoryLogWriter' => true,
            'TYPO3\\CMS\\Adminpanel\\ModuleApi\\ModuleData' => true,
            'TYPO3\\CMS\\Adminpanel\\ModuleApi\\ModuleDataStorageCollection' => true,
            'TYPO3\\CMS\\Adminpanel\\Modules\\CacheModule' => true,
            'TYPO3\\CMS\\Adminpanel\\Modules\\DebugModule' => true,
            'TYPO3\\CMS\\Adminpanel\\Modules\\Debug\\Events' => true,
            'TYPO3\\CMS\\Adminpanel\\Modules\\Debug\\Log' => true,
            'TYPO3\\CMS\\Adminpanel\\Modules\\Debug\\PageTitle' => true,
            'TYPO3\\CMS\\Adminpanel\\Modules\\Debug\\QueryInformation' => true,
            'TYPO3\\CMS\\Adminpanel\\Modules\\InfoModule' => true,
            'TYPO3\\CMS\\Adminpanel\\Modules\\Info\\GeneralInformation' => true,
            'TYPO3\\CMS\\Adminpanel\\Modules\\Info\\PhpInformation' => true,
            'TYPO3\\CMS\\Adminpanel\\Modules\\Info\\RequestInformation' => true,
            'TYPO3\\CMS\\Adminpanel\\Modules\\Info\\UserIntInformation' => true,
            'TYPO3\\CMS\\Adminpanel\\Modules\\PreviewModule' => true,
            'TYPO3\\CMS\\Adminpanel\\Modules\\TsDebugModule' => true,
            'TYPO3\\CMS\\Adminpanel\\Modules\\TsDebug\\TypoScriptWaterfall' => true,
            'TYPO3\\CMS\\Adminpanel\\Repositories\\FrontendGroupsRepository' => true,
            'TYPO3\\CMS\\Adminpanel\\Service\\ModuleLoader' => true,
            'TYPO3\\CMS\\Adminpanel\\Utility\\MemoryUtility' => true,
            'TYPO3\\CMS\\Adminpanel\\Utility\\ResourceUtility' => true,
            'TYPO3\\CMS\\Adminpanel\\Utility\\StateUtility' => true,
            'TYPO3\\CMS\\Backend\\Authentication\\Event\\SwitchUserEvent' => true,
            'TYPO3\\CMS\\Backend\\Authentication\\PasswordReset' => true,
            'TYPO3\\CMS\\Backend\\Backend\\Avatar\\Avatar' => true,
            'TYPO3\\CMS\\Backend\\Backend\\Avatar\\AvatarProviderInterface' => true,
            'TYPO3\\CMS\\Backend\\Backend\\Avatar\\DefaultAvatarProvider' => true,
            'TYPO3\\CMS\\Backend\\Backend\\Avatar\\Image' => true,
            'TYPO3\\CMS\\Backend\\Backend\\Event\\ModifyClearCacheActionsEvent' => true,
            'TYPO3\\CMS\\Backend\\Backend\\Event\\SystemInformationToolbarCollectorEvent' => true,
            'TYPO3\\CMS\\Backend\\Backend\\ToolbarItems\\HelpToolbarItem' => true,
            'TYPO3\\CMS\\Backend\\Backend\\ToolbarItems\\LiveSearchToolbarItem' => true,
            'TYPO3\\CMS\\Backend\\Backend\\ToolbarItems\\ShortcutToolbarItem' => true,
            'TYPO3\\CMS\\Backend\\Backend\\ToolbarItems\\SystemInformationToolbarItem' => true,
            'TYPO3\\CMS\\Backend\\Backend\\ToolbarItems\\UserToolbarItem' => true,
            'TYPO3\\CMS\\Backend\\Command\\ProgressListener\\ReferenceIndexProgressListener' => true,
            'TYPO3\\CMS\\Backend\\Composer\\InstallerScripts' => true,
            'TYPO3\\CMS\\Backend\\Configuration\\BackendUserConfiguration' => true,
            'TYPO3\\CMS\\Backend\\Configuration\\SiteTcaConfiguration' => true,
            'TYPO3\\CMS\\Backend\\Configuration\\TCA\\ItemsProcessorFunctions' => true,
            'TYPO3\\CMS\\Backend\\Configuration\\TCA\\UserFunctions' => true,
            'TYPO3\\CMS\\Backend\\Configuration\\TranslationConfigurationProvider' => true,
            'TYPO3\\CMS\\Backend\\Configuration\\TypoScript\\ConditionMatching\\ConditionMatcher' => true,
            'TYPO3\\CMS\\Backend\\ContextMenu\\ContextMenu' => true,
            'TYPO3\\CMS\\Backend\\ContextMenu\\ItemProviders\\AbstractProvider' => true,
            'TYPO3\\CMS\\Backend\\ContextMenu\\ItemProviders\\PageProvider' => true,
            'TYPO3\\CMS\\Backend\\ContextMenu\\ItemProviders\\RecordProvider' => true,
            'TYPO3\\CMS\\Backend\\Controller\\AjaxLoginController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\ContextHelpAjaxController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\ContextMenuController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\Event\\AfterFormEnginePageInitializedEvent' => true,
            'TYPO3\\CMS\\Backend\\Controller\\Event\\AfterPageColumnsSelectedForLocalizationEvent' => true,
            'TYPO3\\CMS\\Backend\\Controller\\Event\\BeforeFormEnginePageInitializedEvent' => true,
            'TYPO3\\CMS\\Backend\\Controller\\FileStorage\\TreeController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\File\\ThumbnailController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\FlashMessageController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\FormFlexAjaxController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\FormInlineAjaxController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\FormSelectTreeAjaxController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\FormSlugAjaxController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\LiveSearchController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\LogoutController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\OnlineMediaController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\Page\\LocalizationController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\Page\\TreeController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\ShortcutController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\SimpleDataHandlerController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\SiteInlineAjaxController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\StateTrackerController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\SystemInformationController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\UserSettingsController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\Wizard\\AbstractWizardController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\Wizard\\AddController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\Wizard\\EditController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\Wizard\\ImageManipulationController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\Wizard\\ListController' => true,
            'TYPO3\\CMS\\Backend\\Controller\\Wizard\\SuggestWizardController' => true,
            'TYPO3\\CMS\\Backend\\Domain\\Model\\Module\\BackendModule' => true,
            'TYPO3\\CMS\\Backend\\Domain\\Repository\\Localization\\LocalizationRepository' => true,
            'TYPO3\\CMS\\Backend\\Domain\\Repository\\TableManualRepository' => true,
            'TYPO3\\CMS\\Backend\\Exception' => true,
            'TYPO3\\CMS\\Backend\\Exception\\BackendAccessDeniedException' => true,
            'TYPO3\\CMS\\Backend\\Exception\\BackendLockedException' => true,
            'TYPO3\\CMS\\Backend\\Exception\\SiteValidationErrorException' => true,
            'TYPO3\\CMS\\Backend\\Form\\Behavior\\ReloadOnFieldChange' => true,
            'TYPO3\\CMS\\Backend\\Form\\Behavior\\UpdateBitmaskOnFieldChange' => true,
            'TYPO3\\CMS\\Backend\\Form\\Behavior\\UpdateValueOnFieldChange' => true,
            'TYPO3\\CMS\\Backend\\Form\\Container\\FlexFormContainerContainer' => true,
            'TYPO3\\CMS\\Backend\\Form\\Container\\FlexFormElementContainer' => true,
            'TYPO3\\CMS\\Backend\\Form\\Container\\FlexFormEntryContainer' => true,
            'TYPO3\\CMS\\Backend\\Form\\Container\\FlexFormNoTabsContainer' => true,
            'TYPO3\\CMS\\Backend\\Form\\Container\\FlexFormSectionContainer' => true,
            'TYPO3\\CMS\\Backend\\Form\\Container\\FlexFormTabsContainer' => true,
            'TYPO3\\CMS\\Backend\\Form\\Container\\FullRecordContainer' => true,
            'TYPO3\\CMS\\Backend\\Form\\Container\\InlineControlContainer' => true,
            'TYPO3\\CMS\\Backend\\Form\\Container\\InlineRecordContainer' => true,
            'TYPO3\\CMS\\Backend\\Form\\Container\\ListOfFieldsContainer' => true,
            'TYPO3\\CMS\\Backend\\Form\\Container\\NoTabsContainer' => true,
            'TYPO3\\CMS\\Backend\\Form\\Container\\OuterWrapContainer' => true,
            'TYPO3\\CMS\\Backend\\Form\\Container\\PaletteAndSingleContainer' => true,
            'TYPO3\\CMS\\Backend\\Form\\Container\\SingleFieldContainer' => true,
            'TYPO3\\CMS\\Backend\\Form\\Container\\SiteLanguageContainer' => true,
            'TYPO3\\CMS\\Backend\\Form\\Container\\TabsContainer' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\BackendLayoutWizardElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\CategoryElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\CheckboxElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\CheckboxLabeledToggleElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\CheckboxToggleElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\FileInfoElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\GroupElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\ImageManipulationElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\InputColorPickerElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\InputDateTimeElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\InputHiddenElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\InputLinkElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\InputSlugElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\InputTextElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\MfaInfoElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\NoneElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\PassThroughElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\RadioElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\SelectCheckBoxElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\SelectMultipleSideBySideElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\SelectSingleBoxElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\SelectSingleElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\SelectTreeElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\TextElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\TextTableElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\UnknownElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\UserElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Element\\UserSysFileStorageIsPublicElement' => true,
            'TYPO3\\CMS\\Backend\\Form\\Exception' => true,
            'TYPO3\\CMS\\Backend\\Form\\Exception\\AccessDeniedContentEditException' => true,
            'TYPO3\\CMS\\Backend\\Form\\Exception\\AccessDeniedEditInternalsException' => true,
            'TYPO3\\CMS\\Backend\\Form\\Exception\\AccessDeniedHookException' => true,
            'TYPO3\\CMS\\Backend\\Form\\Exception\\AccessDeniedPageEditException' => true,
            'TYPO3\\CMS\\Backend\\Form\\Exception\\AccessDeniedPageNewException' => true,
            'TYPO3\\CMS\\Backend\\Form\\Exception\\AccessDeniedRootNodeException' => true,
            'TYPO3\\CMS\\Backend\\Form\\Exception\\AccessDeniedTableModifyException' => true,
            'TYPO3\\CMS\\Backend\\Form\\Exception\\DatabaseDefaultLanguageException' => true,
            'TYPO3\\CMS\\Backend\\Form\\Exception\\DatabaseRecordException' => true,
            'TYPO3\\CMS\\Backend\\Form\\Exception\\DatabaseRecordWorkspaceDeletePlaceholderException' => true,
            'TYPO3\\CMS\\Backend\\Form\\FieldControl\\AddRecord' => true,
            'TYPO3\\CMS\\Backend\\Form\\FieldControl\\EditPopup' => true,
            'TYPO3\\CMS\\Backend\\Form\\FieldControl\\ElementBrowser' => true,
            'TYPO3\\CMS\\Backend\\Form\\FieldControl\\InsertClipboard' => true,
            'TYPO3\\CMS\\Backend\\Form\\FieldControl\\LinkPopup' => true,
            'TYPO3\\CMS\\Backend\\Form\\FieldControl\\ListModule' => true,
            'TYPO3\\CMS\\Backend\\Form\\FieldControl\\ResetSelection' => true,
            'TYPO3\\CMS\\Backend\\Form\\FieldInformation\\AdminIsSystemMaintainer' => true,
            'TYPO3\\CMS\\Backend\\Form\\FieldInformation\\BackendLayoutFromParentPage' => true,
            'TYPO3\\CMS\\Backend\\Form\\FieldInformation\\TcaDescription' => true,
            'TYPO3\\CMS\\Backend\\Form\\FieldWizard\\DefaultLanguageDifferences' => true,
            'TYPO3\\CMS\\Backend\\Form\\FieldWizard\\LocalizationStateSelector' => true,
            'TYPO3\\CMS\\Backend\\Form\\FieldWizard\\OtherLanguageContent' => true,
            'TYPO3\\CMS\\Backend\\Form\\FieldWizard\\OtherLanguageThumbnails' => true,
            'TYPO3\\CMS\\Backend\\Form\\FieldWizard\\RecordsOverview' => true,
            'TYPO3\\CMS\\Backend\\Form\\FieldWizard\\SelectIcons' => true,
            'TYPO3\\CMS\\Backend\\Form\\FieldWizard\\TableList' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataCompiler' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataGroup\\FlexFormSegment' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataGroup\\OnTheFly' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataGroup\\OrderedProviderList' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataGroup\\SiteConfigurationDataGroup' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataGroup\\TcaDatabaseRecord' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataGroup\\TcaInputPlaceholderRecord' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataGroup\\TcaSelectTreeAjaxFieldData' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\DatabaseDefaultLanguagePageRow' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\DatabaseEditRow' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\DatabaseEffectivePid' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\DatabaseLanguageRows' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\DatabasePageLanguageOverlayRows' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\DatabasePageRootline' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\DatabaseParentPageRow' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\DatabaseRecordOverrideValues' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\DatabaseRecordTypeValue' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\DatabaseRowDateTimeFields' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\DatabaseRowDefaultAsReadonly' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\DatabaseRowDefaultValues' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\DatabaseRowInitializeNew' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\DatabaseSystemLanguageRows' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\DatabaseUniqueUidNewRow' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\DatabaseUserPermissionCheck' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\EvaluateDisplayConditions' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\InitializeProcessedTca' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\InlineOverrideChildTca' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\PageTsConfig' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\PageTsConfigMerged' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\ReturnUrl' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\SiteResolving' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\SiteTcaInline' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\SiteTcaSelectItems' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaCategory' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaCheckboxItems' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaColumnsOverrides' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaColumnsProcessCommon' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaColumnsProcessFieldDescriptions' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaColumnsProcessFieldLabels' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaColumnsProcessPlaceholders' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaColumnsProcessRecordTitle' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaColumnsProcessShowitem' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaColumnsRemoveUnused' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaFlexPrepare' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaFlexProcess' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaGroup' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaInline' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaInlineConfiguration' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaInlineExpandCollapseState' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaInlineIsOnSymmetricSide' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaInputPlaceholders' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaLanguage' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaRadioItems' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaRecordTitle' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaSelectItems' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaSelectTreeItems' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaSiteLanguage' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaSlug' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaText' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\TcaTypesShowitem' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\UserTsConfig' => true,
            'TYPO3\\CMS\\Backend\\Form\\FormResultCompiler' => true,
            'TYPO3\\CMS\\Backend\\Form\\InlineStackProcessor' => true,
            'TYPO3\\CMS\\Backend\\Form\\NodeExpansion\\FieldControl' => true,
            'TYPO3\\CMS\\Backend\\Form\\NodeExpansion\\FieldInformation' => true,
            'TYPO3\\CMS\\Backend\\Form\\NodeExpansion\\FieldWizard' => true,
            'TYPO3\\CMS\\Backend\\Form\\NodeFactory' => true,
            'TYPO3\\CMS\\Backend\\Form\\Utility\\FormEngineUtility' => true,
            'TYPO3\\CMS\\Backend\\Form\\Wizard\\SuggestWizardDefaultReceiver' => true,
            'TYPO3\\CMS\\Backend\\FrontendBackendUserAuthentication' => true,
            'TYPO3\\CMS\\Backend\\History\\Event\\AfterHistoryRollbackFinishedEvent' => true,
            'TYPO3\\CMS\\Backend\\History\\Event\\BeforeHistoryRollbackStartEvent' => true,
            'TYPO3\\CMS\\Backend\\History\\RecordHistory' => true,
            'TYPO3\\CMS\\Backend\\LoginProvider\\Event\\ModifyPageLayoutOnLoginProviderSelectionEvent' => true,
            'TYPO3\\CMS\\Backend\\LoginProvider\\LoginProviderInterface' => true,
            'TYPO3\\CMS\\Backend\\LoginProvider\\LoginProviderResolver' => true,
            'TYPO3\\CMS\\Backend\\LoginProvider\\UsernamePasswordLoginProvider' => true,
            'TYPO3\\CMS\\Backend\\Module\\ModuleLoader' => true,
            'TYPO3\\CMS\\Backend\\Preview\\PreviewRendererInterface' => true,
            'TYPO3\\CMS\\Backend\\Preview\\PreviewRendererResolverInterface' => true,
            'TYPO3\\CMS\\Backend\\Preview\\StandardContentPreviewRenderer' => true,
            'TYPO3\\CMS\\Backend\\Preview\\StandardPreviewRendererResolver' => true,
            'TYPO3\\CMS\\Backend\\Provider\\PageTsBackendLayoutDataProvider' => true,
            'TYPO3\\CMS\\Backend\\Resource\\Processing\\DeferredBackendImageProcessor' => true,
            'TYPO3\\CMS\\Backend\\Routing\\Exception\\InvalidRequestTokenException' => true,
            'TYPO3\\CMS\\Backend\\Routing\\Exception\\MethodNotAllowedException' => true,
            'TYPO3\\CMS\\Backend\\Routing\\Exception\\MissingRequestTokenException' => true,
            'TYPO3\\CMS\\Backend\\Routing\\Exception\\ResourceNotFoundException' => true,
            'TYPO3\\CMS\\Backend\\Routing\\Exception\\RouteNotFoundException' => true,
            'TYPO3\\CMS\\Backend\\Routing\\Exception\\RouteTypeNotAllowedException' => true,
            'TYPO3\\CMS\\Backend\\Routing\\PreviewUriBuilder' => true,
            'TYPO3\\CMS\\Backend\\Routing\\Route' => true,
            'TYPO3\\CMS\\Backend\\Routing\\Router_decorated_1.inner' => true,
            'TYPO3\\CMS\\Backend\\Search\\LiveSearch\\LiveSearch' => true,
            'TYPO3\\CMS\\Backend\\Search\\LiveSearch\\QueryParser' => true,
            'TYPO3\\CMS\\Backend\\Security\\EmailLoginNotification' => true,
            'TYPO3\\CMS\\Backend\\Security\\FailedLoginAttemptNotification' => true,
            'TYPO3\\CMS\\Backend\\ServiceProvider' => true,
            'TYPO3\\CMS\\Backend\\Template\\Components\\AbstractControl' => true,
            'TYPO3\\CMS\\Backend\\Template\\Components\\ButtonBar' => true,
            'TYPO3\\CMS\\Backend\\Template\\Components\\Buttons\\AbstractButton' => true,
            'TYPO3\\CMS\\Backend\\Template\\Components\\Buttons\\Action\\HelpButton' => true,
            'TYPO3\\CMS\\Backend\\Template\\Components\\Buttons\\Action\\ShortcutButton' => true,
            'TYPO3\\CMS\\Backend\\Template\\Components\\Buttons\\FullyRenderedButton' => true,
            'TYPO3\\CMS\\Backend\\Template\\Components\\Buttons\\InputButton' => true,
            'TYPO3\\CMS\\Backend\\Template\\Components\\Buttons\\LinkButton' => true,
            'TYPO3\\CMS\\Backend\\Template\\Components\\Buttons\\SplitButton' => true,
            'TYPO3\\CMS\\Backend\\Template\\Components\\DocHeaderComponent' => true,
            'TYPO3\\CMS\\Backend\\Template\\Components\\MenuRegistry' => true,
            'TYPO3\\CMS\\Backend\\Template\\Components\\Menu\\Menu' => true,
            'TYPO3\\CMS\\Backend\\Template\\Components\\Menu\\MenuItem' => true,
            'TYPO3\\CMS\\Backend\\Template\\Components\\MetaInformation' => true,
            'TYPO3\\CMS\\Backend\\Toolbar\\Enumeration\\InformationStatus' => true,
            'TYPO3\\CMS\\Backend\\Tree\\FileStorageTreeProvider' => true,
            'TYPO3\\CMS\\Backend\\Tree\\Renderer\\UnorderedListTreeRenderer' => true,
            'TYPO3\\CMS\\Backend\\Tree\\Repository\\PageTreeRepository' => true,
            'TYPO3\\CMS\\Backend\\Tree\\SortedTreeNodeCollection' => true,
            'TYPO3\\CMS\\Backend\\Tree\\TreeNode' => true,
            'TYPO3\\CMS\\Backend\\Tree\\TreeNodeCollection' => true,
            'TYPO3\\CMS\\Backend\\Tree\\TreeRepresentationNode' => true,
            'TYPO3\\CMS\\Backend\\Tree\\View\\BrowseTreeView' => true,
            'TYPO3\\CMS\\Backend\\Tree\\View\\ElementBrowserPageTreeView' => true,
            'TYPO3\\CMS\\Backend\\Tree\\View\\NewRecordPageTreeView' => true,
            'TYPO3\\CMS\\Backend\\Tree\\View\\PageMovingPagePositionMap' => true,
            'TYPO3\\CMS\\Backend\\Tree\\View\\PagePositionMap' => true,
            'TYPO3\\CMS\\Backend\\Tree\\View\\PageTreeView' => true,
            'TYPO3\\CMS\\Backend\\Utility\\BackendUtility' => true,
            'TYPO3\\CMS\\Backend\\View\\ArrayBrowser' => true,
            'TYPO3\\CMS\\Backend\\View\\BackendLayout\\BackendLayout' => true,
            'TYPO3\\CMS\\Backend\\View\\BackendLayout\\BackendLayoutCollection' => true,
            'TYPO3\\CMS\\Backend\\View\\BackendLayout\\ContentFetcher' => true,
            'TYPO3\\CMS\\Backend\\View\\BackendLayout\\DefaultDataProvider' => true,
            'TYPO3\\CMS\\Backend\\View\\BackendLayout\\Grid\\Grid' => true,
            'TYPO3\\CMS\\Backend\\View\\BackendLayout\\Grid\\GridColumn' => true,
            'TYPO3\\CMS\\Backend\\View\\BackendLayout\\Grid\\GridColumnItem' => true,
            'TYPO3\\CMS\\Backend\\View\\BackendLayout\\Grid\\GridRow' => true,
            'TYPO3\\CMS\\Backend\\View\\BackendLayout\\Grid\\LanguageColumn' => true,
            'TYPO3\\CMS\\Backend\\View\\Drawing\\BackendLayoutRenderer' => true,
            'TYPO3\\CMS\\Backend\\View\\Drawing\\DrawingConfiguration' => true,
            'TYPO3\\CMS\\Backend\\View\\Event\\AfterSectionMarkupGeneratedEvent' => true,
            'TYPO3\\CMS\\Backend\\View\\Event\\BeforeSectionMarkupGeneratedEvent' => true,
            'TYPO3\\CMS\\Backend\\View\\PageLayoutContext' => true,
            'TYPO3\\CMS\\Backend\\View\\ProgressListenerInterface' => true,
            'TYPO3\\CMS\\Belog\\Domain\\Model\\Constraint' => true,
            'TYPO3\\CMS\\Belog\\Domain\\Model\\LogEntry' => true,
            'TYPO3\\CMS\\Belog\\Domain\\Model\\Workspace' => true,
            'TYPO3\\CMS\\Belog\\Module\\BackendLogModuleBootstrap' => true,
            'TYPO3\\CMS\\Beuser\\Domain\\Model\\BackendUser' => true,
            'TYPO3\\CMS\\Beuser\\Domain\\Model\\BackendUserGroup' => true,
            'TYPO3\\CMS\\Beuser\\Domain\\Model\\Demand' => true,
            'TYPO3\\CMS\\Beuser\\Domain\\Model\\ModuleData' => true,
            'TYPO3\\CMS\\Beuser\\Domain\\Repository\\BackendUserSessionRepository' => true,
            'TYPO3\\CMS\\Beuser\\Exception' => true,
            'TYPO3\\CMS\\Beuser\\Service\\UserInformationService' => true,
            'TYPO3\\CMS\\Core\\Authentication\\AbstractAuthenticationService' => true,
            'TYPO3\\CMS\\Core\\Authentication\\AuthenticationService' => true,
            'TYPO3\\CMS\\Core\\Authentication\\BackendUserAuthentication' => true,
            'TYPO3\\CMS\\Core\\Authentication\\CommandLineUserAuthentication' => true,
            'TYPO3\\CMS\\Core\\Authentication\\Event\\AfterGroupsResolvedEvent' => true,
            'TYPO3\\CMS\\Core\\Authentication\\IpLocker' => true,
            'TYPO3\\CMS\\Core\\Authentication\\LoginType' => true,
            'TYPO3\\CMS\\Core\\Authentication\\Mfa\\MfaProviderManifest' => true,
            'TYPO3\\CMS\\Core\\Authentication\\Mfa\\MfaProviderManifestInterface' => true,
            'TYPO3\\CMS\\Core\\Authentication\\Mfa\\MfaProviderPropertyManager' => true,
            'TYPO3\\CMS\\Core\\Authentication\\Mfa\\MfaRequiredException' => true,
            'TYPO3\\CMS\\Core\\Authentication\\Mfa\\MfaViewType' => true,
            'TYPO3\\CMS\\Core\\Authentication\\Mfa\\Provider\\RecoveryCodes' => true,
            'TYPO3\\CMS\\Core\\Authentication\\Mfa\\Provider\\Totp' => true,
            'TYPO3\\CMS\\Core\\Cache\\Backend\\ApcuBackend' => true,
            'TYPO3\\CMS\\Core\\Cache\\Backend\\FileBackend' => true,
            'TYPO3\\CMS\\Core\\Cache\\Backend\\FreezableBackendInterface' => true,
            'TYPO3\\CMS\\Core\\Cache\\Backend\\MemcachedBackend' => true,
            'TYPO3\\CMS\\Core\\Cache\\Backend\\NullBackend' => true,
            'TYPO3\\CMS\\Core\\Cache\\Backend\\PdoBackend' => true,
            'TYPO3\\CMS\\Core\\Cache\\Backend\\RedisBackend' => true,
            'TYPO3\\CMS\\Core\\Cache\\Backend\\SimpleFileBackend' => true,
            'TYPO3\\CMS\\Core\\Cache\\Backend\\TransientMemoryBackend' => true,
            'TYPO3\\CMS\\Core\\Cache\\Backend\\Typo3DatabaseBackend' => true,
            'TYPO3\\CMS\\Core\\Cache\\Backend\\WincacheBackend' => true,
            'TYPO3\\CMS\\Core\\Cache\\Event\\CacheFlushEvent' => true,
            'TYPO3\\CMS\\Core\\Cache\\Event\\CacheWarmupEvent' => true,
            'TYPO3\\CMS\\Core\\Cache\\Exception' => true,
            'TYPO3\\CMS\\Core\\Cache\\Exception\\DuplicateIdentifierException' => true,
            'TYPO3\\CMS\\Core\\Cache\\Exception\\InvalidBackendException' => true,
            'TYPO3\\CMS\\Core\\Cache\\Exception\\InvalidCacheException' => true,
            'TYPO3\\CMS\\Core\\Cache\\Exception\\InvalidDataException' => true,
            'TYPO3\\CMS\\Core\\Cache\\Exception\\NoSuchCacheException' => true,
            'TYPO3\\CMS\\Core\\Cache\\Exception\\NoSuchCacheGroupException' => true,
            'TYPO3\\CMS\\Core\\Cache\\Frontend\\NullFrontend' => true,
            'TYPO3\\CMS\\Core\\Cache\\Frontend\\PhpFrontend' => true,
            'TYPO3\\CMS\\Core\\Cache\\Frontend\\VariableFrontend' => true,
            'TYPO3\\CMS\\Core\\Category\\Collection\\CategoryCollection' => true,
            'TYPO3\\CMS\\Core\\Charset\\UnknownCharsetException' => true,
            'TYPO3\\CMS\\Core\\Collection\\EditableCollectionInterface' => true,
            'TYPO3\\CMS\\Core\\Command\\Descriptor\\TextDescriptor' => true,
            'TYPO3\\CMS\\Core\\Compatibility\\PseudoSiteTcaDisplayCondition' => true,
            'TYPO3\\CMS\\Core\\Composer\\CliEntryPoint' => true,
            'TYPO3\\CMS\\Core\\Composer\\InstallerScripts' => true,
            'TYPO3\\CMS\\Core\\Configuration\\Event\\AfterTcaCompilationEvent' => true,
            'TYPO3\\CMS\\Core\\Configuration\\Event\\ModifyLoadedPageTsConfigEvent' => true,
            'TYPO3\\CMS\\Core\\Configuration\\Exception\\ExtensionConfigurationExtensionNotConfiguredException' => true,
            'TYPO3\\CMS\\Core\\Configuration\\Exception\\ExtensionConfigurationPathDoesNotExistException' => true,
            'TYPO3\\CMS\\Core\\Configuration\\Exception\\SiteConfigurationWriteException' => true,
            'TYPO3\\CMS\\Core\\Configuration\\ExtensionConfiguration' => true,
            'TYPO3\\CMS\\Core\\Configuration\\Features' => true,
            'TYPO3\\CMS\\Core\\Configuration\\FlexForm\\Exception\\InvalidCombinedPointerFieldException' => true,
            'TYPO3\\CMS\\Core\\Configuration\\FlexForm\\Exception\\InvalidIdentifierException' => true,
            'TYPO3\\CMS\\Core\\Configuration\\FlexForm\\Exception\\InvalidParentRowException' => true,
            'TYPO3\\CMS\\Core\\Configuration\\FlexForm\\Exception\\InvalidParentRowLoopException' => true,
            'TYPO3\\CMS\\Core\\Configuration\\FlexForm\\Exception\\InvalidParentRowRootException' => true,
            'TYPO3\\CMS\\Core\\Configuration\\FlexForm\\Exception\\InvalidPointerFieldValueException' => true,
            'TYPO3\\CMS\\Core\\Configuration\\FlexForm\\Exception\\InvalidSinglePointerFieldException' => true,
            'TYPO3\\CMS\\Core\\Configuration\\FlexForm\\Exception\\InvalidTcaException' => true,
            'TYPO3\\CMS\\Core\\Configuration\\FlexForm\\FlexFormTools' => true,
            'TYPO3\\CMS\\Core\\Configuration\\Loader\\Exception\\YamlFileLoadingException' => true,
            'TYPO3\\CMS\\Core\\Configuration\\Loader\\Exception\\YamlParseException' => true,
            'TYPO3\\CMS\\Core\\Configuration\\Loader\\YamlFileLoader' => true,
            'TYPO3\\CMS\\Core\\Configuration\\Parser\\PageTsConfigParser' => true,
            'TYPO3\\CMS\\Core\\Configuration\\Processor\\PlaceholderProcessorList' => true,
            'TYPO3\\CMS\\Core\\Configuration\\Processor\\Placeholder\\EnvVariableProcessor' => true,
            'TYPO3\\CMS\\Core\\Configuration\\Processor\\Placeholder\\ValueFromReferenceArrayProcessor' => true,
            'TYPO3\\CMS\\Core\\Configuration\\Richtext' => true,
            'TYPO3\\CMS\\Core\\Configuration\\TypoScript\\Exception\\InvalidTypoScriptConditionException' => true,
            'TYPO3\\CMS\\Core\\Console\\CommandNameAlreadyInUseException' => true,
            'TYPO3\\CMS\\Core\\Console\\CommandRegistry_decorated_1.inner' => true,
            'TYPO3\\CMS\\Core\\Console\\CommandRegistry_decorated_2.inner' => true,
            'TYPO3\\CMS\\Core\\Console\\UnknownCommandException' => true,
            'TYPO3\\CMS\\Core\\Context\\DateTimeAspect' => true,
            'TYPO3\\CMS\\Core\\Context\\Exception\\AspectNotFoundException' => true,
            'TYPO3\\CMS\\Core\\Context\\Exception\\AspectPropertyNotFoundException' => true,
            'TYPO3\\CMS\\Core\\Context\\FileProcessingAspect' => true,
            'TYPO3\\CMS\\Core\\Context\\LanguageAspect' => true,
            'TYPO3\\CMS\\Core\\Context\\LanguageAspectFactory' => true,
            'TYPO3\\CMS\\Core\\Context\\TypoScriptAspect' => true,
            'TYPO3\\CMS\\Core\\Context\\UserAspect' => true,
            'TYPO3\\CMS\\Core\\Context\\VisibilityAspect' => true,
            'TYPO3\\CMS\\Core\\Context\\WorkspaceAspect' => true,
            'TYPO3\\CMS\\Core\\Controller\\ErrorPageController' => true,
            'TYPO3\\CMS\\Core\\Controller\\IconController' => true,
            'TYPO3\\CMS\\Core\\Controller\\RequireJsController' => true,
            'TYPO3\\CMS\\Core\\Core\\ApplicationInterface' => true,
            'TYPO3\\CMS\\Core\\Core\\Bootstrap' => true,
            'TYPO3\\CMS\\Core\\Core\\ClassLoadingInformationGenerator' => true,
            'TYPO3\\CMS\\Core\\Core\\Environment' => true,
            'TYPO3\\CMS\\Core\\Core\\Event\\BootCompletedEvent' => true,
            'TYPO3\\CMS\\Core\\Core\\SystemEnvironmentBuilder' => true,
            'TYPO3\\CMS\\Core\\Crypto\\PasswordHashing\\Argon2iPasswordHash' => true,
            'TYPO3\\CMS\\Core\\Crypto\\PasswordHashing\\Argon2idPasswordHash' => true,
            'TYPO3\\CMS\\Core\\Crypto\\PasswordHashing\\BcryptPasswordHash' => true,
            'TYPO3\\CMS\\Core\\Crypto\\PasswordHashing\\BlowfishPasswordHash' => true,
            'TYPO3\\CMS\\Core\\Crypto\\PasswordHashing\\InvalidPasswordHashException' => true,
            'TYPO3\\CMS\\Core\\Crypto\\PasswordHashing\\Md5PasswordHash' => true,
            'TYPO3\\CMS\\Core\\Crypto\\PasswordHashing\\Pbkdf2PasswordHash' => true,
            'TYPO3\\CMS\\Core\\Crypto\\PasswordHashing\\PhpassPasswordHash' => true,
            'TYPO3\\CMS\\Core\\Crypto\\Random' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\DataHandler' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\DataHandlerCheckModifyAccessListHookInterface' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\Event\\AppendLinkHandlerElementsEvent' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\Event\\IsTableExcludedFromReferenceIndexEvent' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\History\\RecordHistoryStore' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\ItemProcessingService' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\Localization\\DataMapItem' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\Localization\\DataMapProcessor' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\Localization\\State' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\Model\\CorrelationId' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\Model\\EntityContext' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\Model\\EntityPointer' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\Model\\EntityPointerLink' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\Model\\EntityUidPointer' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\Model\\RecordState' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\Model\\RecordStateFactory' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\PagePermissionAssembler' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\PlainDataResolver' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\ReferenceIndexUpdater' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\SlugEnricher' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\SlugHelper' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\SoftReferenceParserResult' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\TableColumnSubType' => true,
            'TYPO3\\CMS\\Core\\DataHandling\\TableColumnType' => true,
            'TYPO3\\CMS\\Core\\Database\\Connection' => true,
            'TYPO3\\CMS\\Core\\Database\\Driver\\PDOConnection' => true,
            'TYPO3\\CMS\\Core\\Database\\Driver\\PDOMySql\\Driver' => true,
            'TYPO3\\CMS\\Core\\Database\\Driver\\PDOPgSql\\Driver' => true,
            'TYPO3\\CMS\\Core\\Database\\Driver\\PDOSqlite\\Driver' => true,
            'TYPO3\\CMS\\Core\\Database\\Driver\\PDOSqlsrv\\Connection' => true,
            'TYPO3\\CMS\\Core\\Database\\Driver\\PDOSqlsrv\\Driver' => true,
            'TYPO3\\CMS\\Core\\Database\\Event\\AlterTableDefinitionStatementsEvent' => true,
            'TYPO3\\CMS\\Core\\Database\\Platform\\PlatformInformation' => true,
            'TYPO3\\CMS\\Core\\Database\\QueryGenerator' => true,
            'TYPO3\\CMS\\Core\\Database\\QueryView' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\BulkInsertQuery' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\Expression\\CompositeExpression' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\Expression\\ExpressionBuilder' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\QueryHelper' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\Restriction\\BackendWorkspaceRestriction' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\Restriction\\DefaultRestrictionContainer' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\Restriction\\DeletedRestriction' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\Restriction\\DocumentTypeExclusionRestriction' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\Restriction\\EndTimeRestriction' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\Restriction\\FrontendGroupRestriction' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\Restriction\\FrontendRestrictionContainer' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\Restriction\\FrontendWorkspaceRestriction' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\Restriction\\HiddenRestriction' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\Restriction\\LimitToTablesRestrictionContainer' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\Restriction\\PagePermissionRestriction' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\Restriction\\RootLevelRestriction' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\Restriction\\StartTimeRestriction' => true,
            'TYPO3\\CMS\\Core\\Database\\Query\\Restriction\\WorkspaceRestriction' => true,
            'TYPO3\\CMS\\Core\\Database\\ReferenceIndex' => true,
            'TYPO3\\CMS\\Core\\Database\\RelationHandler' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Comparator' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\ConnectionMigrator' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\DefaultTcaSchema' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\EventListener\\SchemaAlterTableListener' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\EventListener\\SchemaColumnDefinitionListener' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\EventListener\\SchemaIndexDefinitionListener' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Exception\\DefaultTcaSchemaTablePositionException' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Exception\\StatementException' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Exception\\UnexpectedSignalReturnValueTypeException' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\CreateColumnDefinitionItem' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\CreateDefinition' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\CreateForeignKeyDefinitionItem' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\CreateIndexDefinitionItem' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\CreateTableClause' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\CreateTableStatement' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\BigIntDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\BinaryDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\BitDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\BlobDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\CharDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\DateDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\DateTimeDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\DecimalDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\DoubleDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\EnumDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\FloatDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\IntegerDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\JsonDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\LongBlobDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\LongTextDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\MediumBlobDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\MediumIntDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\MediumTextDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\NumericDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\RealDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\SetDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\SmallIntDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\TextDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\TimeDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\TimestampDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\TinyBlobDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\TinyIntDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\TinyTextDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\VarBinaryDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\VarCharDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\DataType\\YearDataType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\Identifier' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\IndexColumnName' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\AST\\ReferenceDefinition' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\Lexer' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\Parser' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Parser\\TableBuilder' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\SchemaMigrator' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\TableDiff' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Types\\EnumType' => true,
            'TYPO3\\CMS\\Core\\Database\\Schema\\Types\\SetType' => true,
            'TYPO3\\CMS\\Core\\DependencyInjection\\AutowireInjectMethodsPass' => true,
            'TYPO3\\CMS\\Core\\DependencyInjection\\Cache\\ContainerBackend' => true,
            'TYPO3\\CMS\\Core\\DependencyInjection\\CommonFactory' => true,
            'TYPO3\\CMS\\Core\\DependencyInjection\\ConsoleCommandPass' => true,
            'TYPO3\\CMS\\Core\\DependencyInjection\\ContainerException' => true,
            'TYPO3\\CMS\\Core\\DependencyInjection\\EnvVarProcessor' => true,
            'TYPO3\\CMS\\Core\\DependencyInjection\\FailsafeContainer' => true,
            'TYPO3\\CMS\\Core\\DependencyInjection\\ListenerProviderPass' => true,
            'TYPO3\\CMS\\Core\\DependencyInjection\\LoggerAwarePass' => true,
            'TYPO3\\CMS\\Core\\DependencyInjection\\LoggerInterfacePass' => true,
            'TYPO3\\CMS\\Core\\DependencyInjection\\MfaProviderPass' => true,
            'TYPO3\\CMS\\Core\\DependencyInjection\\NotFoundException' => true,
            'TYPO3\\CMS\\Core\\DependencyInjection\\PublicServicePass' => true,
            'TYPO3\\CMS\\Core\\DependencyInjection\\ServiceProviderCompilationPass' => true,
            'TYPO3\\CMS\\Core\\DependencyInjection\\ServiceProviderRegistry' => true,
            'TYPO3\\CMS\\Core\\DependencyInjection\\SingletonPass' => true,
            'TYPO3\\CMS\\Core\\DependencyInjection\\SoftReferenceParserPass' => true,
            'TYPO3\\CMS\\Core\\Domain\\Repository\\PageRepository' => true,
            'TYPO3\\CMS\\Core\\Error\\ErrorHandler' => true,
            'TYPO3\\CMS\\Core\\Error\\ErrorHandlerInterface' => true,
            'TYPO3\\CMS\\Core\\Error\\Exception' => true,
            'TYPO3\\CMS\\Core\\Error\\Http\\BadRequestException' => true,
            'TYPO3\\CMS\\Core\\Error\\Http\\ForbiddenException' => true,
            'TYPO3\\CMS\\Core\\Error\\Http\\InternalServerErrorException' => true,
            'TYPO3\\CMS\\Core\\Error\\Http\\PageNotFoundException' => true,
            'TYPO3\\CMS\\Core\\Error\\Http\\ServiceUnavailableException' => true,
            'TYPO3\\CMS\\Core\\Error\\Http\\ShortcutTargetPageNotFoundException' => true,
            'TYPO3\\CMS\\Core\\Error\\Http\\StatusException' => true,
            'TYPO3\\CMS\\Core\\Error\\Http\\UnauthorizedException' => true,
            'TYPO3\\CMS\\Core\\Error\\PageErrorHandler\\FluidPageErrorHandler' => true,
            'TYPO3\\CMS\\Core\\Error\\PageErrorHandler\\InvalidPageErrorHandlerException' => true,
            'TYPO3\\CMS\\Core\\Error\\PageErrorHandler\\PageContentErrorHandler' => true,
            'TYPO3\\CMS\\Core\\Error\\PageErrorHandler\\PageErrorHandlerNotConfiguredException' => true,
            'TYPO3\\CMS\\Core\\EventDispatcher\\ListenerProvider_decorated_1.inner' => true,
            'TYPO3\\CMS\\Core\\EventDispatcher\\ListenerProvider_decorated_2.inner' => true,
            'TYPO3\\CMS\\Core\\EventDispatcher\\ListenerProvider_decorated_3.inner' => true,
            'TYPO3\\CMS\\Core\\Exception' => true,
            'TYPO3\\CMS\\Core\\Exception\\Archive\\ExtractException' => true,
            'TYPO3\\CMS\\Core\\Exception\\MissingTsfeException' => true,
            'TYPO3\\CMS\\Core\\Exception\\Page\\BrokenRootLineException' => true,
            'TYPO3\\CMS\\Core\\Exception\\Page\\CircularRootLineException' => true,
            'TYPO3\\CMS\\Core\\Exception\\Page\\MountPointException' => true,
            'TYPO3\\CMS\\Core\\Exception\\Page\\MountPointsDisabledException' => true,
            'TYPO3\\CMS\\Core\\Exception\\Page\\PageNotFoundException' => true,
            'TYPO3\\CMS\\Core\\Exception\\Page\\PagePropertyRelationNotFoundException' => true,
            'TYPO3\\CMS\\Core\\Exception\\Page\\RootLineException' => true,
            'TYPO3\\CMS\\Core\\Exception\\SiteNotFoundException' => true,
            'TYPO3\\CMS\\Core\\ExpressionLanguage\\DefaultProvider' => true,
            'TYPO3\\CMS\\Core\\ExpressionLanguage\\FunctionsProvider\\DefaultFunctionsProvider' => true,
            'TYPO3\\CMS\\Core\\ExpressionLanguage\\FunctionsProvider\\Typo3ConditionFunctionsProvider' => true,
            'TYPO3\\CMS\\Core\\ExpressionLanguage\\RequestWrapper' => true,
            'TYPO3\\CMS\\Core\\ExpressionLanguage\\Resolver' => true,
            'TYPO3\\CMS\\Core\\ExpressionLanguage\\SiteConditionProvider' => true,
            'TYPO3\\CMS\\Core\\ExpressionLanguage\\TypoScriptConditionProvider' => true,
            'TYPO3\\CMS\\Core\\FormProtection\\BackendFormProtection' => true,
            'TYPO3\\CMS\\Core\\FormProtection\\DisabledFormProtection' => true,
            'TYPO3\\CMS\\Core\\FormProtection\\Exception' => true,
            'TYPO3\\CMS\\Core\\FormProtection\\FrontendFormProtection' => true,
            'TYPO3\\CMS\\Core\\FormProtection\\InstallToolFormProtection' => true,
            'TYPO3\\CMS\\Core\\Hooks\\BackendUserGroupIntegrityCheck' => true,
            'TYPO3\\CMS\\Core\\Hooks\\BackendUserPasswordCheck' => true,
            'TYPO3\\CMS\\Core\\Hooks\\CreateSiteConfiguration' => true,
            'TYPO3\\CMS\\Core\\Hooks\\DestroySessionHook' => true,
            'TYPO3\\CMS\\Core\\Hooks\\PagesTsConfigGuard' => true,
            'TYPO3\\CMS\\Core\\Hooks\\TcaDisplayConditions' => true,
            'TYPO3\\CMS\\Core\\Hooks\\TcaItemsProcessorFunctions' => true,
            'TYPO3\\CMS\\Core\\Html\\DefaultSanitizerBuilder' => true,
            'TYPO3\\CMS\\Core\\Html\\Event\\BrokenLinkAnalysisEvent' => true,
            'TYPO3\\CMS\\Core\\Html\\HtmlParser' => true,
            'TYPO3\\CMS\\Core\\Html\\I18nSanitizerBuilder' => true,
            'TYPO3\\CMS\\Core\\Html\\SanitizerBuilderFactory' => true,
            'TYPO3\\CMS\\Core\\Html\\SanitizerInitiator' => true,
            'TYPO3\\CMS\\Core\\Html\\SimpleNode' => true,
            'TYPO3\\CMS\\Core\\Html\\SimpleParser' => true,
            'TYPO3\\CMS\\Core\\Http\\Client\\GuzzleClientFactory' => true,
            'TYPO3\\CMS\\Core\\Http\\Dispatcher' => true,
            'TYPO3\\CMS\\Core\\Http\\DispatcherInterface' => true,
            'TYPO3\\CMS\\Core\\Http\\FalDumpFileContentsDecoratorStream' => true,
            'TYPO3\\CMS\\Core\\Http\\HtmlResponse' => true,
            'TYPO3\\CMS\\Core\\Http\\ImmediateResponseException' => true,
            'TYPO3\\CMS\\Core\\Http\\JsonResponse' => true,
            'TYPO3\\CMS\\Core\\Http\\Message' => true,
            'TYPO3\\CMS\\Core\\Http\\MiddlewareDispatcher' => true,
            'TYPO3\\CMS\\Core\\Http\\NormalizedParams' => true,
            'TYPO3\\CMS\\Core\\Http\\NullResponse' => true,
            'TYPO3\\CMS\\Core\\Http\\PropagateResponseException' => true,
            'TYPO3\\CMS\\Core\\Http\\RedirectResponse' => true,
            'TYPO3\\CMS\\Core\\Http\\Request' => true,
            'TYPO3\\CMS\\Core\\Http\\Response' => true,
            'TYPO3\\CMS\\Core\\Http\\ResponseFactory' => true,
            'TYPO3\\CMS\\Core\\Http\\Security\\InvalidReferrerException' => true,
            'TYPO3\\CMS\\Core\\Http\\Security\\MissingReferrerException' => true,
            'TYPO3\\CMS\\Core\\Http\\Security\\ReferrerEnforcer' => true,
            'TYPO3\\CMS\\Core\\Http\\SelfEmittableLazyOpenStream' => true,
            'TYPO3\\CMS\\Core\\Http\\ServerRequest' => true,
            'TYPO3\\CMS\\Core\\Http\\ServerRequestFactory' => true,
            'TYPO3\\CMS\\Core\\Http\\Stream' => true,
            'TYPO3\\CMS\\Core\\Http\\StreamFactory' => true,
            'TYPO3\\CMS\\Core\\Http\\UploadedFile' => true,
            'TYPO3\\CMS\\Core\\Http\\UploadedFileFactory' => true,
            'TYPO3\\CMS\\Core\\Http\\Uri' => true,
            'TYPO3\\CMS\\Core\\Http\\UriFactory' => true,
            'TYPO3\\CMS\\Core\\IO\\CsvStreamFilter' => true,
            'TYPO3\\CMS\\Core\\IO\\PharStreamWrapperInterceptor' => true,
            'TYPO3\\CMS\\Core\\Imaging\\Dimension' => true,
            'TYPO3\\CMS\\Core\\Imaging\\Event\\ModifyIconForResourcePropertiesEvent' => true,
            'TYPO3\\CMS\\Core\\Imaging\\Exception\\UnsupportedFileException' => true,
            'TYPO3\\CMS\\Core\\Imaging\\GraphicalFunctions' => true,
            'TYPO3\\CMS\\Core\\Imaging\\Icon' => true,
            'TYPO3\\CMS\\Core\\Imaging\\IconProvider\\BitmapIconProvider' => true,
            'TYPO3\\CMS\\Core\\Imaging\\IconProvider\\SvgIconProvider' => true,
            'TYPO3\\CMS\\Core\\Imaging\\IconProvider\\SvgSpriteIconProvider' => true,
            'TYPO3\\CMS\\Core\\Imaging\\IconRegistry_decorated_1.inner' => true,
            'TYPO3\\CMS\\Core\\Imaging\\ImageDimension' => true,
            'TYPO3\\CMS\\Core\\Imaging\\ImageMagickFile' => true,
            'TYPO3\\CMS\\Core\\Imaging\\ImageManipulation\\Area' => true,
            'TYPO3\\CMS\\Core\\Imaging\\ImageManipulation\\CropVariant' => true,
            'TYPO3\\CMS\\Core\\Imaging\\ImageManipulation\\CropVariantCollection' => true,
            'TYPO3\\CMS\\Core\\Imaging\\ImageManipulation\\InvalidConfigurationException' => true,
            'TYPO3\\CMS\\Core\\Imaging\\ImageManipulation\\Ratio' => true,
            'TYPO3\\CMS\\Core\\Information\\Typo3Information' => true,
            'TYPO3\\CMS\\Core\\Information\\Typo3Version' => true,
            'TYPO3\\CMS\\Core\\LinkHandling\\EmailLinkHandler' => true,
            'TYPO3\\CMS\\Core\\LinkHandling\\Exception\\UnknownLinkHandlerException' => true,
            'TYPO3\\CMS\\Core\\LinkHandling\\Exception\\UnknownUrnException' => true,
            'TYPO3\\CMS\\Core\\LinkHandling\\FileLinkHandler' => true,
            'TYPO3\\CMS\\Core\\LinkHandling\\FolderLinkHandler' => true,
            'TYPO3\\CMS\\Core\\LinkHandling\\LegacyLinkNotationConverter' => true,
            'TYPO3\\CMS\\Core\\LinkHandling\\PageLinkHandler' => true,
            'TYPO3\\CMS\\Core\\LinkHandling\\RecordLinkHandler' => true,
            'TYPO3\\CMS\\Core\\LinkHandling\\TelephoneLinkHandler' => true,
            'TYPO3\\CMS\\Core\\LinkHandling\\UrlLinkHandler' => true,
            'TYPO3\\CMS\\Core\\Localization\\Exception\\FileNotFoundException' => true,
            'TYPO3\\CMS\\Core\\Localization\\Exception\\InvalidParserException' => true,
            'TYPO3\\CMS\\Core\\Localization\\Exception\\InvalidXmlFileException' => true,
            'TYPO3\\CMS\\Core\\Localization\\Parser\\LocalizationParserInterface' => true,
            'TYPO3\\CMS\\Core\\Localization\\Parser\\XliffParser' => true,
            'TYPO3\\CMS\\Core\\Locking\\Exception' => true,
            'TYPO3\\CMS\\Core\\Locking\\Exception\\LockAcquireException' => true,
            'TYPO3\\CMS\\Core\\Locking\\Exception\\LockAcquireWouldBlockException' => true,
            'TYPO3\\CMS\\Core\\Locking\\Exception\\LockCreateException' => true,
            'TYPO3\\CMS\\Core\\Locking\\FileLockStrategy' => true,
            'TYPO3\\CMS\\Core\\Locking\\ResourceMutex' => true,
            'TYPO3\\CMS\\Core\\Locking\\SemaphoreLockStrategy' => true,
            'TYPO3\\CMS\\Core\\Locking\\SimpleLockStrategy' => true,
            'TYPO3\\CMS\\Core\\Log\\Channel' => true,
            'TYPO3\\CMS\\Core\\Log\\Exception' => true,
            'TYPO3\\CMS\\Core\\Log\\Exception\\InvalidLogProcessorConfigurationException' => true,
            'TYPO3\\CMS\\Core\\Log\\Exception\\InvalidLogWriterConfigurationException' => true,
            'TYPO3\\CMS\\Core\\Log\\LogLevel' => true,
            'TYPO3\\CMS\\Core\\Log\\LogManagerInterface' => true,
            'TYPO3\\CMS\\Core\\Log\\LogRecord' => true,
            'TYPO3\\CMS\\Core\\Log\\Logger' => true,
            'TYPO3\\CMS\\Core\\Log\\Processor\\IntrospectionProcessor' => true,
            'TYPO3\\CMS\\Core\\Log\\Processor\\MemoryPeakUsageProcessor' => true,
            'TYPO3\\CMS\\Core\\Log\\Processor\\MemoryUsageProcessor' => true,
            'TYPO3\\CMS\\Core\\Log\\Processor\\NullProcessor' => true,
            'TYPO3\\CMS\\Core\\Log\\Processor\\WebProcessor' => true,
            'TYPO3\\CMS\\Core\\Log\\Writer\\DatabaseWriter' => true,
            'TYPO3\\CMS\\Core\\Log\\Writer\\FileWriter' => true,
            'TYPO3\\CMS\\Core\\Log\\Writer\\NullWriter' => true,
            'TYPO3\\CMS\\Core\\Log\\Writer\\PhpErrorLogWriter' => true,
            'TYPO3\\CMS\\Core\\Log\\Writer\\SyslogWriter' => true,
            'TYPO3\\CMS\\Core\\Mail\\Event\\AfterMailerInitializationEvent' => true,
            'TYPO3\\CMS\\Core\\Mail\\FileSpool' => true,
            'TYPO3\\CMS\\Core\\Mail\\FluidEmail' => true,
            'TYPO3\\CMS\\Core\\Mail\\MailMessage' => true,
            'TYPO3\\CMS\\Core\\Mail\\MboxTransport' => true,
            'TYPO3\\CMS\\Core\\Mail\\Rfc822AddressesParser' => true,
            'TYPO3\\CMS\\Core\\Messaging\\FlashMessage' => true,
            'TYPO3\\CMS\\Core\\Messaging\\FlashMessageQueue' => true,
            'TYPO3\\CMS\\Core\\Messaging\\FlashMessageRendererResolver' => true,
            'TYPO3\\CMS\\Core\\Messaging\\Renderer\\BootstrapRenderer' => true,
            'TYPO3\\CMS\\Core\\Messaging\\Renderer\\ListRenderer' => true,
            'TYPO3\\CMS\\Core\\Messaging\\Renderer\\PlaintextRenderer' => true,
            'TYPO3\\CMS\\Core\\MetaTag\\EdgeMetaTagManager' => true,
            'TYPO3\\CMS\\Core\\MetaTag\\GenericMetaTagManager' => true,
            'TYPO3\\CMS\\Core\\MetaTag\\Html5MetaTagManager' => true,
            'TYPO3\\CMS\\Core\\Migrations\\TcaMigration' => true,
            'TYPO3\\CMS\\Core\\Package\\Cache\\ComposerPackageArtifact' => true,
            'TYPO3\\CMS\\Core\\Package\\Cache\\PackageStatesPackageCache' => true,
            'TYPO3\\CMS\\Core\\Package\\Event\\AfterPackageActivationEvent' => true,
            'TYPO3\\CMS\\Core\\Package\\Event\\AfterPackageDeactivationEvent' => true,
            'TYPO3\\CMS\\Core\\Package\\Event\\BeforePackageActivationEvent' => true,
            'TYPO3\\CMS\\Core\\Package\\Event\\PackagesMayHaveChangedEvent' => true,
            'TYPO3\\CMS\\Core\\Package\\Exception' => true,
            'TYPO3\\CMS\\Core\\Package\\Exception\\InvalidPackageKeyException' => true,
            'TYPO3\\CMS\\Core\\Package\\Exception\\InvalidPackageManifestException' => true,
            'TYPO3\\CMS\\Core\\Package\\Exception\\InvalidPackagePathException' => true,
            'TYPO3\\CMS\\Core\\Package\\Exception\\InvalidPackageStateException' => true,
            'TYPO3\\CMS\\Core\\Package\\Exception\\MissingPackageManifestException' => true,
            'TYPO3\\CMS\\Core\\Package\\Exception\\PackageManagerCacheUnavailableException' => true,
            'TYPO3\\CMS\\Core\\Package\\Exception\\PackageStatesFileNotWritableException' => true,
            'TYPO3\\CMS\\Core\\Package\\Exception\\PackageStatesUnavailableException' => true,
            'TYPO3\\CMS\\Core\\Package\\Exception\\ProtectedPackageKeyException' => true,
            'TYPO3\\CMS\\Core\\Package\\Exception\\UnknownPackageException' => true,
            'TYPO3\\CMS\\Core\\Package\\Exception\\UnknownPackagePathException' => true,
            'TYPO3\\CMS\\Core\\Package\\MetaData' => true,
            'TYPO3\\CMS\\Core\\Package\\MetaData\\PackageConstraint' => true,
            'TYPO3\\CMS\\Core\\Package\\Package' => true,
            'TYPO3\\CMS\\Core\\Package\\PackageInterface' => true,
            'TYPO3\\CMS\\Core\\Package\\PseudoServiceProvider' => true,
            'TYPO3\\CMS\\Core\\Package\\UnitTestPackageManager' => true,
            'TYPO3\\CMS\\Core\\PageTitle\\PageTitleProviderInterface' => true,
            'TYPO3\\CMS\\Core\\Page\\Event\\BeforeJavaScriptsRenderingEvent' => true,
            'TYPO3\\CMS\\Core\\Page\\Event\\BeforeStylesheetsRenderingEvent' => true,
            'TYPO3\\CMS\\Core\\Page\\JavaScriptItems' => true,
            'TYPO3\\CMS\\Core\\Page\\JavaScriptModuleInstruction' => true,
            'TYPO3\\CMS\\Core\\Page\\JavaScriptRenderer' => true,
            'TYPO3\\CMS\\Core\\Page\\RequireJS' => true,
            'TYPO3\\CMS\\Core\\Pagination\\ArrayPaginator' => true,
            'TYPO3\\CMS\\Core\\Pagination\\PaginationInterface' => true,
            'TYPO3\\CMS\\Core\\Pagination\\PaginatorInterface' => true,
            'TYPO3\\CMS\\Core\\Pagination\\SimplePagination' => true,
            'TYPO3\\CMS\\Core\\Preparations\\TcaPreparation' => true,
            'TYPO3\\CMS\\Core\\RateLimiter\\RequestRateLimitedException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Collection\\CategoryBasedFileCollection' => true,
            'TYPO3\\CMS\\Core\\Resource\\Collection\\FolderBasedFileCollection' => true,
            'TYPO3\\CMS\\Core\\Resource\\Collection\\StaticFileCollection' => true,
            'TYPO3\\CMS\\Core\\Resource\\Driver\\DriverInterface' => true,
            'TYPO3\\CMS\\Core\\Resource\\Driver\\LocalDriver' => true,
            'TYPO3\\CMS\\Core\\Resource\\Driver\\StreamableDriverInterface' => true,
            'TYPO3\\CMS\\Core\\Resource\\DuplicationBehavior' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileAddedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileAddedToIndexEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileCommandProcessedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileContentsSetEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileCopiedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileCreatedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileDeletedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileMarkedAsMissingEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileMetaDataCreatedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileMetaDataDeletedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileMetaDataUpdatedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileMovedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileProcessingEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileRemovedFromIndexEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileRenamedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileReplacedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileUpdatedInIndexEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFolderAddedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFolderCopiedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFolderDeletedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFolderMovedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterFolderRenamedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\AfterResourceStorageInitializationEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFileAddedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFileContentsSetEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFileCopiedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFileCreatedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFileDeletedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFileMovedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFileProcessingEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFileRenamedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFileReplacedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFolderAddedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFolderCopiedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFolderDeletedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFolderMovedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFolderRenamedEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\BeforeResourceStorageInitializationEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\EnrichFileMetaDataEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\GeneratePublicUrlForResourceEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\ModifyFileDumpEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Event\\SanitizeFileNameEvent' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\ExistingTargetFileNameException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\ExistingTargetFolderException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\FileAlreadyProcessedException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\FileDoesNotExistException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\FileOperationErrorException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\FolderDoesNotExistException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\IllegalFileExtensionException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\InsufficientFileAccessPermissionsException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\InsufficientFileReadPermissionsException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\InsufficientFileWritePermissionsException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\InsufficientFolderAccessPermissionsException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\InsufficientFolderReadPermissionsException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\InsufficientFolderWritePermissionsException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\InsufficientUserPermissionsException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\InvalidConfigurationException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\InvalidFileException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\InvalidFileNameException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\InvalidFolderException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\InvalidHashException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\InvalidPathException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\InvalidTargetFolderException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\InvalidUidException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\NotInMountPointException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\ResourceDoesNotExistException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\ResourcePermissionsUnavailableException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\UploadException' => true,
            'TYPO3\\CMS\\Core\\Resource\\Exception\\UploadSizeException' => true,
            'TYPO3\\CMS\\Core\\Resource\\File' => true,
            'TYPO3\\CMS\\Core\\Resource\\FileCollectionRepository' => true,
            'TYPO3\\CMS\\Core\\Resource\\FileReference' => true,
            'TYPO3\\CMS\\Core\\Resource\\Filter\\FileExtensionFilter' => true,
            'TYPO3\\CMS\\Core\\Resource\\Filter\\FileNameFilter' => true,
            'TYPO3\\CMS\\Core\\Resource\\Folder' => true,
            'TYPO3\\CMS\\Core\\Resource\\InaccessibleFolder' => true,
            'TYPO3\\CMS\\Core\\Resource\\Index\\ExtractorInterface' => true,
            'TYPO3\\CMS\\Core\\Resource\\Index\\Indexer' => true,
            'TYPO3\\CMS\\Core\\Resource\\LocalPath' => true,
            'TYPO3\\CMS\\Core\\Resource\\MetaDataAspect' => true,
            'TYPO3\\CMS\\Core\\Resource\\MimeTypeCollection' => true,
            'TYPO3\\CMS\\Core\\Resource\\MimeTypeDetector' => true,
            'TYPO3\\CMS\\Core\\Resource\\OnlineMedia\\Helpers\\VimeoHelper' => true,
            'TYPO3\\CMS\\Core\\Resource\\OnlineMedia\\Helpers\\YouTubeHelper' => true,
            'TYPO3\\CMS\\Core\\Resource\\OnlineMedia\\Metadata\\Extractor' => true,
            'TYPO3\\CMS\\Core\\Resource\\OnlineMedia\\Processing\\PreviewProcessing' => true,
            'TYPO3\\CMS\\Core\\Resource\\ProcessedFile' => true,
            'TYPO3\\CMS\\Core\\Resource\\Processing\\ImageCropScaleMaskTask' => true,
            'TYPO3\\CMS\\Core\\Resource\\Processing\\ImagePreviewTask' => true,
            'TYPO3\\CMS\\Core\\Resource\\Processing\\LocalCropScaleMaskHelper' => true,
            'TYPO3\\CMS\\Core\\Resource\\Processing\\LocalImageProcessor' => true,
            'TYPO3\\CMS\\Core\\Resource\\Processing\\LocalPreviewHelper' => true,
            'TYPO3\\CMS\\Core\\Resource\\Processing\\SvgImageProcessor' => true,
            'TYPO3\\CMS\\Core\\Resource\\RelativeCssPathFixer' => true,
            'TYPO3\\CMS\\Core\\Resource\\ResourceCompressor' => true,
            'TYPO3\\CMS\\Core\\Resource\\ResourceStorage' => true,
            'TYPO3\\CMS\\Core\\Resource\\ResourceStorageInterface' => true,
            'TYPO3\\CMS\\Core\\Resource\\Search\\FileSearchQuery' => true,
            'TYPO3\\CMS\\Core\\Resource\\Search\\QueryRestrictions\\ConsistencyRestriction' => true,
            'TYPO3\\CMS\\Core\\Resource\\Search\\QueryRestrictions\\FolderHashesRestriction' => true,
            'TYPO3\\CMS\\Core\\Resource\\Search\\QueryRestrictions\\FolderIdentifierRestriction' => true,
            'TYPO3\\CMS\\Core\\Resource\\Search\\QueryRestrictions\\FolderMountsRestriction' => true,
            'TYPO3\\CMS\\Core\\Resource\\Search\\QueryRestrictions\\FolderRestriction' => true,
            'TYPO3\\CMS\\Core\\Resource\\Search\\QueryRestrictions\\SearchTermRestriction' => true,
            'TYPO3\\CMS\\Core\\Resource\\Search\\QueryRestrictions\\StorageRestriction' => true,
            'TYPO3\\CMS\\Core\\Resource\\Search\\Result\\DriverFilteredSearchResult' => true,
            'TYPO3\\CMS\\Core\\Resource\\Search\\Result\\EmptyFileSearchResult' => true,
            'TYPO3\\CMS\\Core\\Resource\\Search\\Result\\FileSearchResult' => true,
            'TYPO3\\CMS\\Core\\Resource\\Security\\FileNameValidator' => true,
            'TYPO3\\CMS\\Core\\Resource\\Security\\SvgSanitizer' => true,
            'TYPO3\\CMS\\Core\\Resource\\Service\\ExtractorService' => true,
            'TYPO3\\CMS\\Core\\Resource\\Service\\FileProcessingService' => true,
            'TYPO3\\CMS\\Core\\Resource\\Service\\ImageProcessingService' => true,
            'TYPO3\\CMS\\Core\\Resource\\Service\\MagicImageService' => true,
            'TYPO3\\CMS\\Core\\Resource\\Service\\UserFileInlineLabelService' => true,
            'TYPO3\\CMS\\Core\\Resource\\Service\\UserFileMountService' => true,
            'TYPO3\\CMS\\Core\\Resource\\TextExtraction\\PlainTextExtractor' => true,
            'TYPO3\\CMS\\Core\\Resource\\TextExtraction\\TextExtractorInterface' => true,
            'TYPO3\\CMS\\Core\\Resource\\Utility\\ListUtility' => true,
            'TYPO3\\CMS\\Core\\Routing\\Aspect\\AspectFactory' => true,
            'TYPO3\\CMS\\Core\\Routing\\Aspect\\LocaleModifier' => true,
            'TYPO3\\CMS\\Core\\Routing\\Aspect\\MappableProcessor' => true,
            'TYPO3\\CMS\\Core\\Routing\\Aspect\\ModifiableAspectInterface' => true,
            'TYPO3\\CMS\\Core\\Routing\\Aspect\\PersistedAliasMapper' => true,
            'TYPO3\\CMS\\Core\\Routing\\Aspect\\PersistedPatternMapper' => true,
            'TYPO3\\CMS\\Core\\Routing\\Aspect\\StaticRangeMapper' => true,
            'TYPO3\\CMS\\Core\\Routing\\Aspect\\StaticValueMapper' => true,
            'TYPO3\\CMS\\Core\\Routing\\Enhancer\\DecoratingEnhancerInterface' => true,
            'TYPO3\\CMS\\Core\\Routing\\Enhancer\\EnhancerFactory' => true,
            'TYPO3\\CMS\\Core\\Routing\\Enhancer\\PageTypeDecorator' => true,
            'TYPO3\\CMS\\Core\\Routing\\Enhancer\\PluginEnhancer' => true,
            'TYPO3\\CMS\\Core\\Routing\\Enhancer\\SimpleEnhancer' => true,
            'TYPO3\\CMS\\Core\\Routing\\Enhancer\\VariableProcessor' => true,
            'TYPO3\\CMS\\Core\\Routing\\InvalidRouteArgumentsException' => true,
            'TYPO3\\CMS\\Core\\Routing\\PageArguments' => true,
            'TYPO3\\CMS\\Core\\Routing\\PageRouter' => true,
            'TYPO3\\CMS\\Core\\Routing\\PageSlugCandidateProvider' => true,
            'TYPO3\\CMS\\Core\\Routing\\PageUriMatcher' => true,
            'TYPO3\\CMS\\Core\\Routing\\Route' => true,
            'TYPO3\\CMS\\Core\\Routing\\RouteCollection' => true,
            'TYPO3\\CMS\\Core\\Routing\\RouteNotFoundException' => true,
            'TYPO3\\CMS\\Core\\Routing\\RouteSorter' => true,
            'TYPO3\\CMS\\Core\\Routing\\RouterInterface' => true,
            'TYPO3\\CMS\\Core\\Routing\\SiteRouteResult' => true,
            'TYPO3\\CMS\\Core\\Routing\\UnableToLinkToPageException' => true,
            'TYPO3\\CMS\\Core\\Routing\\UrlGenerator' => true,
            'TYPO3\\CMS\\Core\\ServiceProvider' => true,
            'TYPO3\\CMS\\Core\\Service\\Archive\\ZipService' => true,
            'TYPO3\\CMS\\Core\\Service\\IsoCodeService' => true,
            'TYPO3\\CMS\\Core\\Service\\MarkerBasedTemplateService' => true,
            'TYPO3\\CMS\\Core\\Session\\Backend\\DatabaseSessionBackend' => true,
            'TYPO3\\CMS\\Core\\Session\\Backend\\Exception\\SessionNotCreatedException' => true,
            'TYPO3\\CMS\\Core\\Session\\Backend\\Exception\\SessionNotFoundException' => true,
            'TYPO3\\CMS\\Core\\Session\\Backend\\Exception\\SessionNotUpdatedException' => true,
            'TYPO3\\CMS\\Core\\Session\\Backend\\RedisSessionBackend' => true,
            'TYPO3\\CMS\\Core\\Session\\UserSessionManager' => true,
            'TYPO3\\CMS\\Core\\Site\\Entity\\NullSite' => true,
            'TYPO3\\CMS\\Core\\Site\\Entity\\Site' => true,
            'TYPO3\\CMS\\Core\\Site\\Entity\\SiteLanguage' => true,
            'TYPO3\\CMS\\Core\\Site\\SiteFinder' => true,
            'TYPO3\\CMS\\Core\\SysLog\\Action' => true,
            'TYPO3\\CMS\\Core\\SysLog\\Action\\Cache' => true,
            'TYPO3\\CMS\\Core\\SysLog\\Action\\Database' => true,
            'TYPO3\\CMS\\Core\\SysLog\\Action\\File' => true,
            'TYPO3\\CMS\\Core\\SysLog\\Action\\Login' => true,
            'TYPO3\\CMS\\Core\\SysLog\\Action\\Setting' => true,
            'TYPO3\\CMS\\Core\\SysLog\\Action\\Site' => true,
            'TYPO3\\CMS\\Core\\SysLog\\Error' => true,
            'TYPO3\\CMS\\Core\\SysLog\\Type' => true,
            'TYPO3\\CMS\\Core\\Tree\\Event\\ModifyTreeDataEvent' => true,
            'TYPO3\\CMS\\Core\\Tree\\TableConfiguration\\ArrayTreeRenderer' => true,
            'TYPO3\\CMS\\Core\\Tree\\TableConfiguration\\DatabaseTreeNode' => true,
            'TYPO3\\CMS\\Core\\Tree\\TableConfiguration\\TableConfigurationTree' => true,
            'TYPO3\\CMS\\Core\\Tree\\TableConfiguration\\TreeDataProviderFactory' => true,
            'TYPO3\\CMS\\Core\\Type\\BitSet' => true,
            'TYPO3\\CMS\\Core\\Type\\Bitmask\\BackendGroupMountOption' => true,
            'TYPO3\\CMS\\Core\\Type\\Bitmask\\JsConfirmation' => true,
            'TYPO3\\CMS\\Core\\Type\\Bitmask\\PageTranslationVisibility' => true,
            'TYPO3\\CMS\\Core\\Type\\Bitmask\\Permission' => true,
            'TYPO3\\CMS\\Core\\Type\\Exception' => true,
            'TYPO3\\CMS\\Core\\Type\\Exception\\InvalidEnumerationDefinitionException' => true,
            'TYPO3\\CMS\\Core\\Type\\Exception\\InvalidEnumerationValueException' => true,
            'TYPO3\\CMS\\Core\\Type\\Exception\\InvalidValueExceptionInterface' => true,
            'TYPO3\\CMS\\Core\\Type\\File\\FileInfo' => true,
            'TYPO3\\CMS\\Core\\Type\\File\\ImageInfo' => true,
            'TYPO3\\CMS\\Core\\Type\\Icon\\IconState' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\ExtendedTemplateService' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\Parser\\TypoScriptParser' => true,
            'TYPO3\\CMS\\Core\\TypoScript\\TemplateService' => true,
            'TYPO3\\CMS\\Core\\Utility\\ArrayUtility' => true,
            'TYPO3\\CMS\\Core\\Utility\\ClassNamingUtility' => true,
            'TYPO3\\CMS\\Core\\Utility\\CommandUtility' => true,
            'TYPO3\\CMS\\Core\\Utility\\CsvUtility' => true,
            'TYPO3\\CMS\\Core\\Utility\\DebugUtility' => true,
            'TYPO3\\CMS\\Core\\Utility\\DiffUtility' => true,
            'TYPO3\\CMS\\Core\\Utility\\Exception\\MissingArrayPathException' => true,
            'TYPO3\\CMS\\Core\\Utility\\Exception\\NotImplementedMethodException' => true,
            'TYPO3\\CMS\\Core\\Utility\\ExtensionManagementUtility' => true,
            'TYPO3\\CMS\\Core\\Utility\\File\\BasicFileUtility' => true,
            'TYPO3\\CMS\\Core\\Utility\\File\\ExtendedFileUtility' => true,
            'TYPO3\\CMS\\Core\\Utility\\HttpUtility' => true,
            'TYPO3\\CMS\\Core\\Utility\\IpAnonymizationUtility' => true,
            'TYPO3\\CMS\\Core\\Utility\\MailUtility' => true,
            'TYPO3\\CMS\\Core\\Utility\\MathUtility' => true,
            'TYPO3\\CMS\\Core\\Utility\\PathUtility' => true,
            'TYPO3\\CMS\\Core\\Utility\\PermutationUtility' => true,
            'TYPO3\\CMS\\Core\\Utility\\ResourceUtility' => true,
            'TYPO3\\CMS\\Core\\Utility\\RootlineUtility' => true,
            'TYPO3\\CMS\\Core\\Utility\\StringUtility' => true,
            'TYPO3\\CMS\\Core\\Utility\\VersionNumberUtility' => true,
            'TYPO3\\CMS\\Core\\Versioning\\VersionState' => true,
            'TYPO3\\CMS\\Dashboard\\Controller\\AbstractController' => true,
            'TYPO3\\CMS\\Dashboard\\Dashboard' => true,
            'TYPO3\\CMS\\Dashboard\\DashboardInitializationService' => true,
            'TYPO3\\CMS\\Dashboard\\DashboardPreset' => true,
            'TYPO3\\CMS\\Dashboard\\DashboardPresetRegistry_decorated_1.inner' => true,
            'TYPO3\\CMS\\Dashboard\\DashboardRepository' => true,
            'TYPO3\\CMS\\Dashboard\\DependencyInjection\\DashboardWidgetPass' => true,
            'TYPO3\\CMS\\Dashboard\\ServiceProvider' => true,
            'TYPO3\\CMS\\Dashboard\\Views\\Factory' => true,
            'TYPO3\\CMS\\Dashboard\\WidgetApi' => true,
            'TYPO3\\CMS\\Dashboard\\WidgetGroup' => true,
            'TYPO3\\CMS\\Dashboard\\WidgetGroupInitializationService' => true,
            'TYPO3\\CMS\\Dashboard\\WidgetGroupRegistry_decorated_1.inner' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\BarChartWidget' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\CtaWidget' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\DoughnutChartWidget' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\ElementAttributesInterface' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\ListWidget' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\NumberWithIconDataProviderInterface' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\NumberWithIconWidget' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\Provider\\ButtonProvider' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\Provider\\NumberOfFailedLoginsDataProvider' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\Provider\\SysLogButtonProvider' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\Provider\\SysLogErrorsDataProvider' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\Provider\\TypeOfUsersChartDataProvider' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\RssWidget' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\T3GeneralInformationWidget' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\WidgetConfiguration' => true,
            'TYPO3\\CMS\\Dashboard\\Widgets\\WidgetConfigurationInterface' => true,
            'TYPO3\\CMS\\Extbase\\Annotation\\IgnoreValidation' => true,
            'TYPO3\\CMS\\Extbase\\Annotation\\Inject' => true,
            'TYPO3\\CMS\\Extbase\\Annotation\\ORM\\Cascade' => true,
            'TYPO3\\CMS\\Extbase\\Annotation\\ORM\\Lazy' => true,
            'TYPO3\\CMS\\Extbase\\Annotation\\ORM\\Transient' => true,
            'TYPO3\\CMS\\Extbase\\Annotation\\Validate' => true,
            'TYPO3\\CMS\\Extbase\\Configuration\\Exception' => true,
            'TYPO3\\CMS\\Extbase\\Configuration\\Exception\\InvalidConfigurationTypeException' => true,
            'TYPO3\\CMS\\Extbase\\Configuration\\Exception\\ParseErrorException' => true,
            'TYPO3\\CMS\\Extbase\\Configuration\\RequestHandlersConfiguration' => true,
            'TYPO3\\CMS\\Extbase\\Configuration\\RequestHandlersConfigurationFactory' => true,
            'TYPO3\\CMS\\Extbase\\Domain\\Model\\BackendUser' => true,
            'TYPO3\\CMS\\Extbase\\Domain\\Model\\BackendUserGroup' => true,
            'TYPO3\\CMS\\Extbase\\Domain\\Model\\Category' => true,
            'TYPO3\\CMS\\Extbase\\Domain\\Model\\File' => true,
            'TYPO3\\CMS\\Extbase\\Domain\\Model\\FileReference' => true,
            'TYPO3\\CMS\\Extbase\\Domain\\Model\\Folder' => true,
            'TYPO3\\CMS\\Extbase\\Domain\\Model\\FrontendUser' => true,
            'TYPO3\\CMS\\Extbase\\Domain\\Model\\FrontendUserGroup' => true,
            'TYPO3\\CMS\\Extbase\\Error\\Error' => true,
            'TYPO3\\CMS\\Extbase\\Error\\Message' => true,
            'TYPO3\\CMS\\Extbase\\Error\\Notice' => true,
            'TYPO3\\CMS\\Extbase\\Error\\Result' => true,
            'TYPO3\\CMS\\Extbase\\Error\\Warning' => true,
            'TYPO3\\CMS\\Extbase\\Event\\Mvc\\AfterRequestDispatchedEvent' => true,
            'TYPO3\\CMS\\Extbase\\Event\\Mvc\\BeforeActionCallEvent' => true,
            'TYPO3\\CMS\\Extbase\\Event\\Persistence\\AfterObjectThawedEvent' => true,
            'TYPO3\\CMS\\Extbase\\Event\\Persistence\\EntityAddedToPersistenceEvent' => true,
            'TYPO3\\CMS\\Extbase\\Event\\Persistence\\EntityFinalizedAfterPersistenceEvent' => true,
            'TYPO3\\CMS\\Extbase\\Event\\Persistence\\EntityPersistedEvent' => true,
            'TYPO3\\CMS\\Extbase\\Event\\Persistence\\EntityRemovedFromPersistenceEvent' => true,
            'TYPO3\\CMS\\Extbase\\Event\\Persistence\\EntityUpdatedInPersistenceEvent' => true,
            'TYPO3\\CMS\\Extbase\\Event\\Persistence\\ModifyQueryBeforeFetchingObjectDataEvent' => true,
            'TYPO3\\CMS\\Extbase\\Event\\Persistence\\ModifyResultAfterFetchingObjectDataEvent' => true,
            'TYPO3\\CMS\\Extbase\\Exception' => true,
            'TYPO3\\CMS\\Extbase\\Hook\\DataHandler\\CheckFlexFormValue' => true,
            'TYPO3\\CMS\\Extbase\\Http\\ForwardResponse' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\Controller\\Argument' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\Controller\\Arguments' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\Controller\\Exception\\RequiredArgumentMissingException' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfiguration' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\Exception' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\Exception\\InfiniteLoopException' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\Exception\\InvalidActionNameException' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\Exception\\InvalidArgumentMixingException' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\Exception\\InvalidArgumentNameException' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\Exception\\InvalidArgumentTypeException' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\Exception\\InvalidArgumentValueException' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\Exception\\InvalidControllerException' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\Exception\\InvalidControllerNameException' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\Exception\\InvalidExtensionNameException' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\Exception\\InvalidRequestMethodException' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\Exception\\NoSuchActionException' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\Exception\\NoSuchArgumentException' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\Exception\\NoSuchControllerException' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\Exception\\StopActionException' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\ExtbaseRequestParameters' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\Request' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\RequestHandlerInterface' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\RequestHandlerResolver' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\View\\ViewResolverInterface' => true,
            'TYPO3\\CMS\\Extbase\\Mvc\\Web\\ReferringRequest' => true,
            'TYPO3\\CMS\\Extbase\\Object\\Container\\Exception\\UnknownObjectException' => true,
            'TYPO3\\CMS\\Extbase\\Object\\Exception' => true,
            'TYPO3\\CMS\\Extbase\\Object\\Exception\\CannotBuildObjectException' => true,
            'TYPO3\\CMS\\Extbase\\Object\\Exception\\CannotReconstituteObjectException' => true,
            'TYPO3\\CMS\\Extbase\\Object\\ObjectManagerInterface' => true,
            'TYPO3\\CMS\\Extbase\\Pagination\\QueryResultPaginator' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\ClassesConfiguration' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\ClassesConfigurationFactory' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Exception' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Exception\\IllegalObjectTypeException' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Exception\\IllegalRelationTypeException' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Exception\\InvalidQueryException' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Exception\\UnknownObjectException' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\ForwardCompatibleQueryInterface' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\ForwardCompatibleQueryResultInterface' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\BackendInterface' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Exception' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Exception\\InconsistentQuerySettingsException' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Exception\\InvalidClassException' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Exception\\InvalidNumberOfConstraintsException' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Exception\\InvalidRelationConfigurationException' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Exception\\MissingColumnMapException' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Exception\\NotImplementedException' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Exception\\RepositoryException' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Exception\\TooDirtyException' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Exception\\UnexpectedTypeException' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Exception\\UnsupportedMethodException' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Exception\\UnsupportedOrderException' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Exception\\UnsupportedRelationException' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\LazyLoadingProxy' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\LazyObjectStorage' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Mapper\\ColumnMap' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Mapper\\DataMap' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Mapper\\Exception' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Mapper\\Exception\\NonExistentPropertyException' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Mapper\\Exception\\UnknownPropertyTypeException' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\AndInterface' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\BindVariableValue' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\BindVariableValueInterface' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\Comparison' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\ComparisonInterface' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\EquiJoinCondition' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\EquiJoinConditionInterface' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\Join' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\JoinConditionInterface' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\JoinInterface' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\LogicalAnd' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\LogicalNot' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\LogicalOr' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\LowerCase' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\LowerCaseInterface' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\NotInterface' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\OrInterface' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\Ordering' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\OrderingInterface' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\PropertyValue' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\Selector' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\SelectorInterface' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\Statement' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\StaticOperandInterface' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\UpperCase' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\UpperCaseInterface' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\QueryFactoryInterface' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Storage\\BackendInterface' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Storage\\Exception\\BadConstraintException' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Storage\\Exception\\SqlErrorException' => true,
            'TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage' => true,
            'TYPO3\\CMS\\Extbase\\Property\\Exception' => true,
            'TYPO3\\CMS\\Extbase\\Property\\Exception\\DuplicateObjectException' => true,
            'TYPO3\\CMS\\Extbase\\Property\\Exception\\DuplicateTypeConverterException' => true,
            'TYPO3\\CMS\\Extbase\\Property\\Exception\\InvalidDataTypeException' => true,
            'TYPO3\\CMS\\Extbase\\Property\\Exception\\InvalidPropertyMappingConfigurationException' => true,
            'TYPO3\\CMS\\Extbase\\Property\\Exception\\InvalidSourceException' => true,
            'TYPO3\\CMS\\Extbase\\Property\\Exception\\InvalidTargetException' => true,
            'TYPO3\\CMS\\Extbase\\Property\\Exception\\TargetNotFoundException' => true,
            'TYPO3\\CMS\\Extbase\\Property\\Exception\\TypeConverterException' => true,
            'TYPO3\\CMS\\Extbase\\Property\\PropertyMappingConfiguration' => true,
            'TYPO3\\CMS\\Extbase\\Reflection\\ClassSchema' => true,
            'TYPO3\\CMS\\Extbase\\Reflection\\ClassSchema\\Exception\\NoSuchMethodException' => true,
            'TYPO3\\CMS\\Extbase\\Reflection\\ClassSchema\\Exception\\NoSuchMethodParameterException' => true,
            'TYPO3\\CMS\\Extbase\\Reflection\\ClassSchema\\Exception\\NoSuchPropertyException' => true,
            'TYPO3\\CMS\\Extbase\\Reflection\\ClassSchema\\Method' => true,
            'TYPO3\\CMS\\Extbase\\Reflection\\ClassSchema\\MethodParameter' => true,
            'TYPO3\\CMS\\Extbase\\Reflection\\ClassSchema\\Property' => true,
            'TYPO3\\CMS\\Extbase\\Reflection\\ClassSchema\\PropertyCharacteristics' => true,
            'TYPO3\\CMS\\Extbase\\Reflection\\DocBlock\\Tags\\Null_' => true,
            'TYPO3\\CMS\\Extbase\\Reflection\\Exception' => true,
            'TYPO3\\CMS\\Extbase\\Reflection\\Exception\\PropertyNotAccessibleException' => true,
            'TYPO3\\CMS\\Extbase\\Reflection\\Exception\\UnknownClassException' => true,
            'TYPO3\\CMS\\Extbase\\Reflection\\ObjectAccess' => true,
            'TYPO3\\CMS\\Extbase\\Routing\\ExtbasePluginEnhancer' => true,
            'TYPO3\\CMS\\Extbase\\Security\\Exception' => true,
            'TYPO3\\CMS\\Extbase\\Security\\Exception\\InvalidArgumentForHashGenerationException' => true,
            'TYPO3\\CMS\\Extbase\\Security\\Exception\\InvalidHashException' => true,
            'TYPO3\\CMS\\Extbase\\ServiceProvider' => true,
            'TYPO3\\CMS\\Extbase\\SignalSlot\\Exception\\InvalidSlotException' => true,
            'TYPO3\\CMS\\Extbase\\SignalSlot\\Exception\\InvalidSlotReturnException' => true,
            'TYPO3\\CMS\\Extbase\\Utility\\DebuggerUtility' => true,
            'TYPO3\\CMS\\Extbase\\Utility\\Exception\\InvalidTypeException' => true,
            'TYPO3\\CMS\\Extbase\\Utility\\ExtensionUtility' => true,
            'TYPO3\\CMS\\Extbase\\Utility\\FrontendSimulatorUtility' => true,
            'TYPO3\\CMS\\Extbase\\Utility\\LocalizationUtility' => true,
            'TYPO3\\CMS\\Extbase\\Utility\\TypeHandlingUtility' => true,
            'TYPO3\\CMS\\Extbase\\Validation\\Error' => true,
            'TYPO3\\CMS\\Extbase\\Validation\\Exception' => true,
            'TYPO3\\CMS\\Extbase\\Validation\\Exception\\InvalidTypeHintException' => true,
            'TYPO3\\CMS\\Extbase\\Validation\\Exception\\InvalidValidationConfigurationException' => true,
            'TYPO3\\CMS\\Extbase\\Validation\\Exception\\InvalidValidationOptionsException' => true,
            'TYPO3\\CMS\\Extbase\\Validation\\Exception\\NoSuchValidatorException' => true,
            'TYPO3\\CMS\\Extbase\\Validation\\ValidatorClassNameResolver' => true,
            'TYPO3\\CMS\\Extbase\\Validation\\Validator\\AlphanumericValidator' => true,
            'TYPO3\\CMS\\Extbase\\Validation\\Validator\\BooleanValidator' => true,
            'TYPO3\\CMS\\Extbase\\Validation\\Validator\\CollectionValidator' => true,
            'TYPO3\\CMS\\Extbase\\Validation\\Validator\\ConjunctionValidator' => true,
            'TYPO3\\CMS\\Extbase\\Validation\\Validator\\DateTimeValidator' => true,
            'TYPO3\\CMS\\Extbase\\Validation\\Validator\\DisjunctionValidator' => true,
            'TYPO3\\CMS\\Extbase\\Validation\\Validator\\EmailAddressValidator' => true,
            'TYPO3\\CMS\\Extbase\\Validation\\Validator\\FloatValidator' => true,
            'TYPO3\\CMS\\Extbase\\Validation\\Validator\\GenericObjectValidator' => true,
            'TYPO3\\CMS\\Extbase\\Validation\\Validator\\IntegerValidator' => true,
            'TYPO3\\CMS\\Extbase\\Validation\\Validator\\NotEmptyValidator' => true,
            'TYPO3\\CMS\\Extbase\\Validation\\Validator\\NumberRangeValidator' => true,
            'TYPO3\\CMS\\Extbase\\Validation\\Validator\\NumberValidator' => true,
            'TYPO3\\CMS\\Extbase\\Validation\\Validator\\RegularExpressionValidator' => true,
            'TYPO3\\CMS\\Extbase\\Validation\\Validator\\StringLengthValidator' => true,
            'TYPO3\\CMS\\Extbase\\Validation\\Validator\\StringValidator' => true,
            'TYPO3\\CMS\\Extbase\\Validation\\Validator\\TextValidator' => true,
            'TYPO3\\CMS\\Extbase\\Validation\\Validator\\UrlValidator' => true,
            'TYPO3\\CMS\\Extensionmanager\\DependencyInjection\\ExtensionRemotePass' => true,
            'TYPO3\\CMS\\Extensionmanager\\Domain\\Model\\Extension' => true,
            'TYPO3\\CMS\\Extensionmanager\\Event\\AfterExtensionDatabaseContentHasBeenImportedEvent' => true,
            'TYPO3\\CMS\\Extensionmanager\\Event\\AfterExtensionFilesHaveBeenImportedEvent' => true,
            'TYPO3\\CMS\\Extensionmanager\\Event\\AfterExtensionSiteFilesHaveBeenImportedEvent' => true,
            'TYPO3\\CMS\\Extensionmanager\\Event\\AfterExtensionStaticDatabaseContentHasBeenImportedEvent' => true,
            'TYPO3\\CMS\\Extensionmanager\\Event\\AvailableActionsForExtensionEvent' => true,
            'TYPO3\\CMS\\Extensionmanager\\Exception' => true,
            'TYPO3\\CMS\\Extensionmanager\\Exception\\ExtensionManagerException' => true,
            'TYPO3\\CMS\\Extensionmanager\\Exception\\InvalidFileException' => true,
            'TYPO3\\CMS\\Extensionmanager\\Exception\\MissingExtensionDependencyException' => true,
            'TYPO3\\CMS\\Extensionmanager\\Exception\\MissingVersionDependencyException' => true,
            'TYPO3\\CMS\\Extensionmanager\\Exception\\UnresolvedDependencyException' => true,
            'TYPO3\\CMS\\Extensionmanager\\Exception\\UnresolvedPhpDependencyException' => true,
            'TYPO3\\CMS\\Extensionmanager\\Exception\\UnresolvedTypo3DependencyException' => true,
            'TYPO3\\CMS\\Extensionmanager\\Package\\ComposerDeficitDetector' => true,
            'TYPO3\\CMS\\Extensionmanager\\Parser\\ExtensionXmlParser' => true,
            'TYPO3\\CMS\\Extensionmanager\\Remote\\DownloadFailedException' => true,
            'TYPO3\\CMS\\Extensionmanager\\Remote\\ExtensionDownloaderRemoteInterface' => true,
            'TYPO3\\CMS\\Extensionmanager\\Remote\\ListableRemoteInterface' => true,
            'TYPO3\\CMS\\Extensionmanager\\Remote\\RemoteNotRegisteredException' => true,
            'TYPO3\\CMS\\Extensionmanager\\Remote\\TerExtensionRemote' => true,
            'TYPO3\\CMS\\Extensionmanager\\Remote\\VerificationFailedException' => true,
            'TYPO3\\CMS\\Extensionmanager\\Service\\ComposerManifestProposalGenerator' => true,
            'TYPO3\\CMS\\Filelist\\ContextMenu\\ItemProviders\\FileProvider' => true,
            'TYPO3\\CMS\\Filelist\\Event\\ProcessFileListActionsEvent' => true,
            'TYPO3\\CMS\\Filelist\\FileList' => true,
            'TYPO3\\CMS\\Fluid\\Core\\Cache\\FluidTemplateCache' => true,
            'TYPO3\\CMS\\Fluid\\Core\\ViewHelper\\ViewHelperResolver' => true,
            'TYPO3\\CMS\\Fluid\\ServiceProvider' => true,
            'TYPO3\\CMS\\Fluid\\View\\TemplatePaths' => true,
            'TYPO3\\CMS\\Form\\ConfigurationModuleProvider\\FormYamlProvider' => true,
            'TYPO3\\CMS\\Form\\Domain\\Condition\\ConditionProvider' => true,
            'TYPO3\\CMS\\Form\\Domain\\Condition\\Functions\\FormConditionFunctionsProvider' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\ArrayProcessing\\ArrayProcessing' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\ArrayProcessing\\ArrayProcessor' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\Exception\\ArrayProcessorException' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\Exception\\PropertyException' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\Exception\\PrototypeNotFoundException' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FlexformConfiguration\\Processors\\FinisherOptionGenerator' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FlexformConfiguration\\Processors\\ProcessorDto' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FlexformConfiguration\\Processors\\ProcessorInterface' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinition\\Converters\\AddHmacDataConverter' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinition\\Converters\\AddHmacDataToFormElementPropertyConverter' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinition\\Converters\\AddHmacDataToPropertyCollectionElementConverter' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinition\\Converters\\ConverterDto' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinition\\Converters\\FinisherOptionsFlexFormOverridesConverter' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinition\\Converters\\FinisherTranslationLanguageConverter' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinition\\Converters\\FlexFormFinisherOverridesConverterDto' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinition\\Converters\\RemoveHmacDataConverter' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinition\\Validators\\CreatableFormElementPropertiesValidator' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinition\\Validators\\CreatablePropertyCollectionElementPropertiesValidator' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinition\\Validators\\FormElementHmacDataValidator' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinition\\Validators\\PropertyCollectionElementHmacDataValidator' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinition\\Validators\\ValidationDto' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FrameworkConfiguration\\Extractors\\AdditionalElementPropertyPathsExtractor' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FrameworkConfiguration\\Extractors\\ExtractorDto' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FrameworkConfiguration\\Extractors\\FormElement\\IsCreatableFormElementExtractor' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FrameworkConfiguration\\Extractors\\FormElement\\MultiValuePropertiesExtractor' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FrameworkConfiguration\\Extractors\\FormElement\\PredefinedDefaultsExtractor' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FrameworkConfiguration\\Extractors\\FormElement\\PropertyPathsExtractor' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FrameworkConfiguration\\Extractors\\FormElement\\SelectOptionsExtractor' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FrameworkConfiguration\\Extractors\\PropertyCollectionElement\\IsCreatablePropertyCollectionElementExtractor' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FrameworkConfiguration\\Extractors\\PropertyCollectionElement\\MultiValuePropertiesExtractor' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FrameworkConfiguration\\Extractors\\PropertyCollectionElement\\PredefinedDefaultsExtractor' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FrameworkConfiguration\\Extractors\\PropertyCollectionElement\\PropertyPathsExtractor' => true,
            'TYPO3\\CMS\\Form\\Domain\\Configuration\\FrameworkConfiguration\\Extractors\\PropertyCollectionElement\\SelectOptionsExtractor' => true,
            'TYPO3\\CMS\\Form\\Domain\\Exception' => true,
            'TYPO3\\CMS\\Form\\Domain\\Exception\\IdentifierNotValidException' => true,
            'TYPO3\\CMS\\Form\\Domain\\Exception\\RenderingException' => true,
            'TYPO3\\CMS\\Form\\Domain\\Exception\\TypeDefinitionNotFoundException' => true,
            'TYPO3\\CMS\\Form\\Domain\\Exception\\TypeDefinitionNotValidException' => true,
            'TYPO3\\CMS\\Form\\Domain\\Exception\\UnknownCompositRenderableException' => true,
            'TYPO3\\CMS\\Form\\Domain\\Factory\\FormFactoryInterface' => true,
            'TYPO3\\CMS\\Form\\Domain\\Finishers\\Exception\\FinisherException' => true,
            'TYPO3\\CMS\\Form\\Domain\\Finishers\\FinisherContext' => true,
            'TYPO3\\CMS\\Form\\Domain\\Finishers\\FinisherVariableProvider' => true,
            'TYPO3\\CMS\\Form\\Domain\\Renderer\\RendererInterface' => true,
            'TYPO3\\CMS\\Form\\Domain\\Runtime\\Exception\\PropertyMappingException' => true,
            'TYPO3\\CMS\\Form\\Domain\\Runtime\\FormRuntime\\FormSession' => true,
            'TYPO3\\CMS\\Form\\Domain\\Runtime\\FormRuntime\\Lifecycle\\AfterFormStateInitializedInterface' => true,
            'TYPO3\\CMS\\Form\\Domain\\Runtime\\FormState' => true,
            'TYPO3\\CMS\\Form\\Exception' => true,
            'TYPO3\\CMS\\Form\\Hooks\\DataStructureIdentifierHook' => true,
            'TYPO3\\CMS\\Form\\Hooks\\FormElementHooks' => true,
            'TYPO3\\CMS\\Form\\Hooks\\FormFileProvider' => true,
            'TYPO3\\CMS\\Form\\Hooks\\FormPagePreviewRenderer' => true,
            'TYPO3\\CMS\\Form\\Hooks\\ImportExportHook' => true,
            'TYPO3\\CMS\\Form\\Mvc\\Configuration\\Exception' => true,
            'TYPO3\\CMS\\Form\\Mvc\\Configuration\\Exception\\CycleInheritancesException' => true,
            'TYPO3\\CMS\\Form\\Mvc\\Configuration\\Exception\\ExtensionNameRequiredException' => true,
            'TYPO3\\CMS\\Form\\Mvc\\Configuration\\Exception\\FileWriteException' => true,
            'TYPO3\\CMS\\Form\\Mvc\\Configuration\\Exception\\NoSuchFileException' => true,
            'TYPO3\\CMS\\Form\\Mvc\\Configuration\\Exception\\ParseErrorException' => true,
            'TYPO3\\CMS\\Form\\Mvc\\Configuration\\InheritancesResolverService' => true,
            'TYPO3\\CMS\\Form\\Mvc\\Configuration\\YamlSource' => true,
            'TYPO3\\CMS\\Form\\Mvc\\Persistence\\Exception' => true,
            'TYPO3\\CMS\\Form\\Mvc\\Persistence\\Exception\\NoUniqueIdentifierException' => true,
            'TYPO3\\CMS\\Form\\Mvc\\Persistence\\Exception\\NoUniquePersistenceIdentifierException' => true,
            'TYPO3\\CMS\\Form\\Mvc\\Persistence\\Exception\\PersistenceManagerException' => true,
            'TYPO3\\CMS\\Form\\Mvc\\Persistence\\FormPersistenceManager' => true,
            'TYPO3\\CMS\\Form\\Mvc\\Property\\Exception\\TypeConverterException' => true,
            'TYPO3\\CMS\\Form\\Mvc\\Property\\PropertyMappingConfiguration' => true,
            'TYPO3\\CMS\\Form\\Mvc\\Property\\TypeConverter\\PseudoFile' => true,
            'TYPO3\\CMS\\Form\\Mvc\\Property\\TypeConverter\\PseudoFileReference' => true,
            'TYPO3\\CMS\\Form\\Mvc\\Validation\\CountValidator' => true,
            'TYPO3\\CMS\\Form\\Mvc\\Validation\\DateRangeValidator' => true,
            'TYPO3\\CMS\\Form\\Mvc\\Validation\\EmptyValidator' => true,
            'TYPO3\\CMS\\Form\\Mvc\\Validation\\Exception\\InvalidValidationOptionsException' => true,
            'TYPO3\\CMS\\Form\\Mvc\\Validation\\FileSizeValidator' => true,
            'TYPO3\\CMS\\Form\\Mvc\\Validation\\MimeTypeValidator' => true,
            'TYPO3\\CMS\\Form\\Service\\DatabaseService' => true,
            'TYPO3\\CMS\\Form\\Slot\\FormDefinitionPersistenceException' => true,
            'TYPO3\\CMS\\Form\\Type\\FormDefinitionArray' => true,
            'TYPO3\\CMS\\FrontendLogin\\Configuration\\IncompleteConfigurationException' => true,
            'TYPO3\\CMS\\FrontendLogin\\Configuration\\RecoveryConfiguration' => true,
            'TYPO3\\CMS\\FrontendLogin\\Configuration\\RedirectConfiguration' => true,
            'TYPO3\\CMS\\FrontendLogin\\Domain\\Repository\\FrontendUserGroupRepository' => true,
            'TYPO3\\CMS\\FrontendLogin\\Domain\\Repository\\FrontendUserRepository' => true,
            'TYPO3\\CMS\\FrontendLogin\\Event\\BeforeRedirectEvent' => true,
            'TYPO3\\CMS\\FrontendLogin\\Event\\LoginConfirmedEvent' => true,
            'TYPO3\\CMS\\FrontendLogin\\Event\\LoginErrorOccurredEvent' => true,
            'TYPO3\\CMS\\FrontendLogin\\Event\\LogoutConfirmedEvent' => true,
            'TYPO3\\CMS\\FrontendLogin\\Event\\ModifyLoginFormViewEvent' => true,
            'TYPO3\\CMS\\FrontendLogin\\Event\\PasswordChangeEvent' => true,
            'TYPO3\\CMS\\FrontendLogin\\Event\\SendRecoveryEmailEvent' => true,
            'TYPO3\\CMS\\FrontendLogin\\Redirect\\RedirectHandler' => true,
            'TYPO3\\CMS\\FrontendLogin\\Redirect\\RedirectMode' => true,
            'TYPO3\\CMS\\FrontendLogin\\Redirect\\RedirectModeHandler' => true,
            'TYPO3\\CMS\\FrontendLogin\\Redirect\\ServerRequestHandler' => true,
            'TYPO3\\CMS\\FrontendLogin\\Service\\RecoveryService' => true,
            'TYPO3\\CMS\\FrontendLogin\\Service\\RecoveryServiceInterface' => true,
            'TYPO3\\CMS\\FrontendLogin\\Service\\UserService' => true,
            'TYPO3\\CMS\\FrontendLogin\\Updates\\MigrateFeloginPlugins' => true,
            'TYPO3\\CMS\\FrontendLogin\\Updates\\MigrateFeloginPluginsCtype' => true,
            'TYPO3\\CMS\\FrontendLogin\\Validation\\RedirectUrlValidator' => true,
            'TYPO3\\CMS\\Frontend\\Aspect\\PreviewAspect' => true,
            'TYPO3\\CMS\\Frontend\\Authentication\\FrontendUserAuthentication' => true,
            'TYPO3\\CMS\\Frontend\\Authentication\\ModifyResolvedFrontendGroupsEvent' => true,
            'TYPO3\\CMS\\Frontend\\Category\\Collection\\CategoryCollection' => true,
            'TYPO3\\CMS\\Frontend\\Composer\\InstallerScripts' => true,
            'TYPO3\\CMS\\Frontend\\Configuration\\TypoScript\\ConditionMatching\\ConditionMatcher' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\CaseContentObject' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\ContentContentObject' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectArrayContentObject' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectArrayInternalContentObject' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\EditPanelContentObject' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\Exception\\ContentRenderingException' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\Exception\\ExceptionHandlerInterface' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\FilesContentObject' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\FluidTemplateContentObject' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\HierarchicalMenuContentObject' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\ImageContentObject' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\ImageResourceContentObject' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\LoadRegisterContentObject' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\Menu\\CategoryMenuUtility' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\Menu\\Exception\\NoSuchMenuTypeException' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\Menu\\TextMenuContentObject' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\RecordsContentObject' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\RestoreRegisterContentObject' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\ScalableVectorGraphicsContentObject' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\TextContentObject' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\UserContentObject' => true,
            'TYPO3\\CMS\\Frontend\\ContentObject\\UserInternalContentObject' => true,
            'TYPO3\\CMS\\Frontend\\Controller\\ErrorController' => true,
            'TYPO3\\CMS\\Frontend\\Controller\\ShowImageController' => true,
            'TYPO3\\CMS\\Frontend\\Controller\\TypoScriptFrontendController' => true,
            'TYPO3\\CMS\\Frontend\\DataProcessing\\CommaSeparatedValueProcessor' => true,
            'TYPO3\\CMS\\Frontend\\DataProcessing\\DatabaseQueryProcessor' => true,
            'TYPO3\\CMS\\Frontend\\DataProcessing\\FilesProcessor' => true,
            'TYPO3\\CMS\\Frontend\\DataProcessing\\FlexFormProcessor' => true,
            'TYPO3\\CMS\\Frontend\\DataProcessing\\GalleryProcessor' => true,
            'TYPO3\\CMS\\Frontend\\DataProcessing\\LanguageMenuProcessor' => true,
            'TYPO3\\CMS\\Frontend\\DataProcessing\\MenuProcessor' => true,
            'TYPO3\\CMS\\Frontend\\DataProcessing\\SiteProcessor' => true,
            'TYPO3\\CMS\\Frontend\\DataProcessing\\SplitProcessor' => true,
            'TYPO3\\CMS\\Frontend\\Event\\ModifyHrefLangTagsEvent' => true,
            'TYPO3\\CMS\\Frontend\\Exception' => true,
            'TYPO3\\CMS\\Frontend\\Hooks\\TreelistCacheUpdateHooks' => true,
            'TYPO3\\CMS\\Frontend\\Imaging\\GifBuilder' => true,
            'TYPO3\\CMS\\Frontend\\Page\\CacheHashConfiguration' => true,
            'TYPO3\\CMS\\Frontend\\Page\\PageAccessFailureReasons' => true,
            'TYPO3\\CMS\\Frontend\\Page\\PageLayoutResolver' => true,
            'TYPO3\\CMS\\Frontend\\Plugin\\AbstractPlugin' => true,
            'TYPO3\\CMS\\Frontend\\Preview\\ImagePreviewRenderer' => true,
            'TYPO3\\CMS\\Frontend\\Preview\\TextPreviewRenderer' => true,
            'TYPO3\\CMS\\Frontend\\Preview\\TextmediaPreviewRenderer' => true,
            'TYPO3\\CMS\\Frontend\\Preview\\TextpicPreviewRenderer' => true,
            'TYPO3\\CMS\\Frontend\\Resource\\FileCollector' => true,
            'TYPO3\\CMS\\Frontend\\Resource\\FilePathSanitizer' => true,
            'TYPO3\\CMS\\Frontend\\ServiceProvider' => true,
            'TYPO3\\CMS\\Frontend\\Service\\TypoLinkCodecService' => true,
            'TYPO3\\CMS\\Frontend\\Typolink\\DatabaseRecordLinkBuilder' => true,
            'TYPO3\\CMS\\Frontend\\Typolink\\EmailLinkBuilder' => true,
            'TYPO3\\CMS\\Frontend\\Typolink\\ExternalUrlLinkBuilder' => true,
            'TYPO3\\CMS\\Frontend\\Typolink\\FileOrFolderLinkBuilder' => true,
            'TYPO3\\CMS\\Frontend\\Typolink\\LegacyLinkBuilder' => true,
            'TYPO3\\CMS\\Frontend\\Typolink\\LinkResult' => true,
            'TYPO3\\CMS\\Frontend\\Typolink\\LinkResultInterface' => true,
            'TYPO3\\CMS\\Frontend\\Typolink\\PageLinkBuilder' => true,
            'TYPO3\\CMS\\Frontend\\Typolink\\TelephoneLinkBuilder' => true,
            'TYPO3\\CMS\\Frontend\\Typolink\\UnableToLinkException' => true,
            'TYPO3\\CMS\\Frontend\\Utility\\CanonicalizationUtility' => true,
            'TYPO3\\CMS\\Impexp\\ContextMenu\\ItemProvider' => true,
            'TYPO3\\CMS\\Impexp\\Domain\\Repository\\PresetRepository' => true,
            'TYPO3\\CMS\\Impexp\\Event\\BeforeImportEvent' => true,
            'TYPO3\\CMS\\Impexp\\Exception' => true,
            'TYPO3\\CMS\\Impexp\\Exception\\ImportFailedException' => true,
            'TYPO3\\CMS\\Impexp\\Exception\\InsufficientUserPermissionsException' => true,
            'TYPO3\\CMS\\Impexp\\Exception\\LoadingFileFailedException' => true,
            'TYPO3\\CMS\\Impexp\\Exception\\MalformedPresetException' => true,
            'TYPO3\\CMS\\Impexp\\Exception\\PrerequisitesNotMetException' => true,
            'TYPO3\\CMS\\Impexp\\Exception\\PresetNotFoundException' => true,
            'TYPO3\\CMS\\Impexp\\Export' => true,
            'TYPO3\\CMS\\Impexp\\Import' => true,
            'TYPO3\\CMS\\Impexp\\View\\ExportPageTreeView' => true,
            'TYPO3\\CMS\\IndexedSearch\\Domain\\Repository\\AdministrationRepository' => true,
            'TYPO3\\CMS\\IndexedSearch\\Domain\\Repository\\IndexSearchRepository' => true,
            'TYPO3\\CMS\\IndexedSearch\\FileContentParser' => true,
            'TYPO3\\CMS\\IndexedSearch\\Hook\\AvailableTcaTables' => true,
            'TYPO3\\CMS\\IndexedSearch\\Hook\\DeleteIndexedData' => true,
            'TYPO3\\CMS\\IndexedSearch\\Hook\\TypoScriptFrontendHook' => true,
            'TYPO3\\CMS\\IndexedSearch\\Indexer' => true,
            'TYPO3\\CMS\\IndexedSearch\\Lexer' => true,
            'TYPO3\\CMS\\IndexedSearch\\Utility\\DoubleMetaPhoneUtility' => true,
            'TYPO3\\CMS\\IndexedSearch\\Utility\\IndexedSearchUtility' => true,
            'TYPO3\\CMS\\IndexedSearch\\Utility\\LikeWildcard' => true,
            'TYPO3\\CMS\\Linkvalidator\\Event\\BeforeRecordIsAnalyzedEvent' => true,
            'TYPO3\\CMS\\Linkvalidator\\Event\\ModifyValidatorTaskEmailEvent' => true,
            'TYPO3\\CMS\\Linkvalidator\\Linktype\\ExternalLinktype' => true,
            'TYPO3\\CMS\\Linkvalidator\\Linktype\\FileLinktype' => true,
            'TYPO3\\CMS\\Linkvalidator\\Linktype\\InternalLinktype' => true,
            'TYPO3\\CMS\\Linkvalidator\\QueryRestrictions\\EditableRestriction' => true,
            'TYPO3\\CMS\\Linkvalidator\\Report\\LinkValidatorReport' => true,
            'TYPO3\\CMS\\Linkvalidator\\Repository\\PagesRepository' => true,
            'TYPO3\\CMS\\Lowlevel\\ConfigurationModuleProvider\\BackendRoutesProvider' => true,
            'TYPO3\\CMS\\Lowlevel\\ConfigurationModuleProvider\\BackendUserSettingsProvider' => true,
            'TYPO3\\CMS\\Lowlevel\\ConfigurationModuleProvider\\BackendUserTsConfigProvider' => true,
            'TYPO3\\CMS\\Lowlevel\\ConfigurationModuleProvider\\EventListenersProvider' => true,
            'TYPO3\\CMS\\Lowlevel\\ConfigurationModuleProvider\\GlobalVariableProvider' => true,
            'TYPO3\\CMS\\Lowlevel\\ConfigurationModuleProvider\\HttpMiddlewareStackProvider' => true,
            'TYPO3\\CMS\\Lowlevel\\ConfigurationModuleProvider\\MfaProvidersProvider' => true,
            'TYPO3\\CMS\\Lowlevel\\ConfigurationModuleProvider\\SiteConfigurationProvider' => true,
            'TYPO3\\CMS\\Lowlevel\\ConfigurationModuleProvider\\SoftReferenceParsersProvider' => true,
            'TYPO3\\CMS\\Lowlevel\\Database\\QueryGenerator' => true,
            'TYPO3\\CMS\\Lowlevel\\DependencyInjection\\ConfigurationModuleProviderPass' => true,
            'TYPO3\\CMS\\Lowlevel\\Integrity\\DatabaseIntegrityCheck' => true,
            'TYPO3\\CMS\\Lowlevel\\ServiceProvider' => true,
            'TYPO3\\CMS\\Opendocs\\Backend\\ToolbarItems\\OpendocsToolbarItem' => true,
            'TYPO3\\CMS\\Opendocs\\Controller\\OpenDocumentController' => true,
            'TYPO3\\CMS\\Opendocs\\Service\\OpenDocumentService' => true,
            'TYPO3\\CMS\\Recordlist\\Controller\\AccessDeniedException' => true,
            'TYPO3\\CMS\\Recordlist\\Controller\\ClearPageCacheController' => true,
            'TYPO3\\CMS\\Recordlist\\Event\\ModifyRecordListHeaderColumnsEvent' => true,
            'TYPO3\\CMS\\Recordlist\\Event\\ModifyRecordListRecordActionsEvent' => true,
            'TYPO3\\CMS\\Recordlist\\Event\\ModifyRecordListTableActionsEvent' => true,
            'TYPO3\\CMS\\Recordlist\\Event\\RenderAdditionalContentToRecordListEvent' => true,
            'TYPO3\\CMS\\Recordlist\\LinkHandler\\FileLinkHandler' => true,
            'TYPO3\\CMS\\Recordlist\\LinkHandler\\FolderLinkHandler' => true,
            'TYPO3\\CMS\\Recordlist\\LinkHandler\\MailLinkHandler' => true,
            'TYPO3\\CMS\\Recordlist\\LinkHandler\\PageLinkHandler' => true,
            'TYPO3\\CMS\\Recordlist\\LinkHandler\\RecordLinkHandler' => true,
            'TYPO3\\CMS\\Recordlist\\LinkHandler\\TelephoneLinkHandler' => true,
            'TYPO3\\CMS\\Recordlist\\LinkHandler\\UrlLinkHandler' => true,
            'TYPO3\\CMS\\Recordlist\\RecordList\\DownloadRecordList' => true,
            'TYPO3\\CMS\\Recordlist\\View\\FolderUtilityRenderer' => true,
            'TYPO3\\CMS\\Recordlist\\View\\RecordSearchBoxComponent' => true,
            'TYPO3\\CMS\\Recycler\\Controller\\RecyclerAjaxController' => true,
            'TYPO3\\CMS\\Recycler\\Domain\\Model\\DeletedRecords' => true,
            'TYPO3\\CMS\\Recycler\\Domain\\Model\\Tables' => true,
            'TYPO3\\CMS\\Recycler\\Utility\\RecyclerUtility' => true,
            'TYPO3\\CMS\\Redirects\\Evaluation\\SourceHost' => true,
            'TYPO3\\CMS\\Redirects\\FormDataProvider\\ValuePickerItemDataProvider' => true,
            'TYPO3\\CMS\\Redirects\\Hooks\\BackendControllerHook' => true,
            'TYPO3\\CMS\\Redirects\\Hooks\\DataHandlerCacheFlushingHook' => true,
            'TYPO3\\CMS\\Redirects\\Hooks\\DispatchNotificationHook' => true,
            'TYPO3\\CMS\\Redirects\\Report\\Status\\RedirectStatus' => true,
            'TYPO3\\CMS\\Redirects\\Repository\\Demand' => true,
            'TYPO3\\CMS\\Redirects\\Repository\\RedirectRepository' => true,
            'TYPO3\\CMS\\Redirects\\Service\\IntegrityService' => true,
            'TYPO3\\CMS\\Redirects\\Service\\RedirectCacheService' => true,
            'TYPO3\\CMS\\Redirects\\Service\\RedirectService' => true,
            'TYPO3\\CMS\\Redirects\\Service\\SlugService' => true,
            'TYPO3\\CMS\\Redirects\\UserFunctions\\HitCountDisplayCondition' => true,
            'TYPO3\\CMS\\Reports\\Report\\ServicesListReport' => true,
            'TYPO3\\CMS\\Reports\\Report\\Status\\ConfigurationStatus' => true,
            'TYPO3\\CMS\\Reports\\Report\\Status\\FalStatus' => true,
            'TYPO3\\CMS\\Reports\\Report\\Status\\SecurityStatus' => true,
            'TYPO3\\CMS\\Reports\\Report\\Status\\Status' => true,
            'TYPO3\\CMS\\Reports\\Report\\Status\\SystemStatus' => true,
            'TYPO3\\CMS\\Reports\\Report\\Status\\Typo3Status' => true,
            'TYPO3\\CMS\\Reports\\Report\\Status\\WarningMessagePostProcessor' => true,
            'TYPO3\\CMS\\Reports\\RequestAwareReportInterface' => true,
            'TYPO3\\CMS\\Reports\\RequestAwareStatusProviderInterface' => true,
            'TYPO3\\CMS\\Reports\\Status' => true,
            'TYPO3\\CMS\\RteCKEditor\\Form\\Element\\Event\\AfterGetExternalPluginsEvent' => true,
            'TYPO3\\CMS\\RteCKEditor\\Form\\Element\\Event\\AfterPrepareConfigurationForEditorEvent' => true,
            'TYPO3\\CMS\\RteCKEditor\\Form\\Element\\Event\\BeforeGetExternalPluginsEvent' => true,
            'TYPO3\\CMS\\RteCKEditor\\Form\\Element\\Event\\BeforePrepareConfigurationForEditorEvent' => true,
            'TYPO3\\CMS\\RteCKEditor\\Form\\Element\\RichTextElement' => true,
            'TYPO3\\CMS\\RteCKEditor\\Form\\Resolver\\RichTextNodeResolver' => true,
            'TYPO3\\CMS\\RteCKEditor\\Hook\\PageRendererRenderPreProcess' => true,
            'TYPO3\\CMS\\Scheduler\\CronCommand\\CronCommand' => true,
            'TYPO3\\CMS\\Scheduler\\CronCommand\\NormalizeCommand' => true,
            'TYPO3\\CMS\\Scheduler\\Example\\SleepTask' => true,
            'TYPO3\\CMS\\Scheduler\\Example\\SleepTaskAdditionalFieldProvider' => true,
            'TYPO3\\CMS\\Scheduler\\Example\\TestTask' => true,
            'TYPO3\\CMS\\Scheduler\\Example\\TestTaskAdditionalFieldProvider' => true,
            'TYPO3\\CMS\\Scheduler\\Execution' => true,
            'TYPO3\\CMS\\Scheduler\\FailedExecutionException' => true,
            'TYPO3\\CMS\\Scheduler\\Task\\CachingFrameworkGarbageCollectionAdditionalFieldProvider' => true,
            'TYPO3\\CMS\\Scheduler\\Task\\CachingFrameworkGarbageCollectionTask' => true,
            'TYPO3\\CMS\\Scheduler\\Task\\Enumeration\\Action' => true,
            'TYPO3\\CMS\\Scheduler\\Task\\ExecuteSchedulableCommandAdditionalFieldProvider' => true,
            'TYPO3\\CMS\\Scheduler\\Task\\ExecuteSchedulableCommandTask' => true,
            'TYPO3\\CMS\\Scheduler\\Task\\FileStorageExtractionAdditionalFieldProvider' => true,
            'TYPO3\\CMS\\Scheduler\\Task\\FileStorageExtractionTask' => true,
            'TYPO3\\CMS\\Scheduler\\Task\\FileStorageIndexingAdditionalFieldProvider' => true,
            'TYPO3\\CMS\\Scheduler\\Task\\FileStorageIndexingTask' => true,
            'TYPO3\\CMS\\Scheduler\\Task\\IpAnonymizationAdditionalFieldProvider' => true,
            'TYPO3\\CMS\\Scheduler\\Task\\IpAnonymizationTask' => true,
            'TYPO3\\CMS\\Scheduler\\Task\\OptimizeDatabaseTableAdditionalFieldProvider' => true,
            'TYPO3\\CMS\\Scheduler\\Task\\OptimizeDatabaseTableTask' => true,
            'TYPO3\\CMS\\Scheduler\\Task\\RecyclerGarbageCollectionAdditionalFieldProvider' => true,
            'TYPO3\\CMS\\Scheduler\\Task\\RecyclerGarbageCollectionTask' => true,
            'TYPO3\\CMS\\Scheduler\\Task\\TableGarbageCollectionAdditionalFieldProvider' => true,
            'TYPO3\\CMS\\Scheduler\\Task\\TableGarbageCollectionTask' => true,
            'TYPO3\\CMS\\Seo\\Canonical\\CanonicalGenerator' => true,
            'TYPO3\\CMS\\Seo\\Event\\ModifyUrlForCanonicalTagEvent' => true,
            'TYPO3\\CMS\\Seo\\MetaTag\\MetaTagGenerator' => true,
            'TYPO3\\CMS\\Seo\\MetaTag\\OpenGraphMetaTagManager' => true,
            'TYPO3\\CMS\\Seo\\MetaTag\\TwitterCardMetaTagManager' => true,
            'TYPO3\\CMS\\Seo\\XmlSitemap\\Exception\\InvalidConfigurationException' => true,
            'TYPO3\\CMS\\Seo\\XmlSitemap\\Exception\\MissingConfigurationException' => true,
            'TYPO3\\CMS\\Seo\\XmlSitemap\\PagesXmlSitemapDataProvider' => true,
            'TYPO3\\CMS\\Seo\\XmlSitemap\\RecordsXmlSitemapDataProvider' => true,
            'TYPO3\\CMS\\Setup\\Event\\AddJavaScriptModulesEvent' => true,
            'TYPO3\\CMS\\SysNote\\Controller\\NoteController' => true,
            'TYPO3\\CMS\\SysNote\\Domain\\Repository\\SysNoteRepository' => true,
            'TYPO3\\CMS\\SysNote\\Hook\\ButtonBarHook' => true,
            'TYPO3\\CMS\\SysNote\\Hook\\InfoModuleHook' => true,
            'TYPO3\\CMS\\SysNote\\Hook\\PageHook' => true,
            'TYPO3\\CMS\\T3editor\\Addon' => true,
            'TYPO3\\CMS\\T3editor\\Controller\\CodeCompletionController' => true,
            'TYPO3\\CMS\\T3editor\\Controller\\TypoScriptReferenceController' => true,
            'TYPO3\\CMS\\T3editor\\Exception\\InvalidModeException' => true,
            'TYPO3\\CMS\\T3editor\\Form\\Element\\T3editorElement' => true,
            'TYPO3\\CMS\\T3editor\\Hook\\FileEditHook' => true,
            'TYPO3\\CMS\\T3editor\\Hook\\PageRendererRenderPreProcess' => true,
            'TYPO3\\CMS\\T3editor\\Mode' => true,
            'TYPO3\\CMS\\Tstemplate\\Controller\\TemplateAnalyzerModuleFunctionController' => true,
            'TYPO3\\CMS\\Tstemplate\\Controller\\TypoScriptTemplateConstantEditorModuleFunctionController' => true,
            'TYPO3\\CMS\\Tstemplate\\Controller\\TypoScriptTemplateObjectBrowserModuleFunctionController' => true,
            'TYPO3\\CMS\\Workspaces\\Authentication\\PreviewUserAuthentication' => true,
            'TYPO3\\CMS\\Workspaces\\Backend\\ToolbarItems\\WorkspaceSelectorToolbarItem' => true,
            'TYPO3\\CMS\\Workspaces\\Controller\\AjaxController' => true,
            'TYPO3\\CMS\\Workspaces\\Controller\\AjaxDispatcher' => true,
            'TYPO3\\CMS\\Workspaces\\Controller\\Remote\\ActionHandler' => true,
            'TYPO3\\CMS\\Workspaces\\Controller\\Remote\\MassActionHandler' => true,
            'TYPO3\\CMS\\Workspaces\\Controller\\Remote\\RemoteServer' => true,
            'TYPO3\\CMS\\Workspaces\\DataHandler\\CommandMap' => true,
            'TYPO3\\CMS\\Workspaces\\Dependency\\DependencyEntityFactory' => true,
            'TYPO3\\CMS\\Workspaces\\Dependency\\DependencyResolver' => true,
            'TYPO3\\CMS\\Workspaces\\Dependency\\ElementEntity' => true,
            'TYPO3\\CMS\\Workspaces\\Dependency\\ElementEntityProcessor' => true,
            'TYPO3\\CMS\\Workspaces\\Dependency\\EventCallback' => true,
            'TYPO3\\CMS\\Workspaces\\Dependency\\ReferenceEntity' => true,
            'TYPO3\\CMS\\Workspaces\\Domain\\Model\\CombinedRecord' => true,
            'TYPO3\\CMS\\Workspaces\\Domain\\Model\\DatabaseRecord' => true,
            'TYPO3\\CMS\\Workspaces\\Domain\\Record\\StageRecord' => true,
            'TYPO3\\CMS\\Workspaces\\Domain\\Record\\WorkspaceRecord' => true,
            'TYPO3\\CMS\\Workspaces\\Event\\AfterCompiledCacheableDataForWorkspaceEvent' => true,
            'TYPO3\\CMS\\Workspaces\\Event\\AfterDataGeneratedForWorkspaceEvent' => true,
            'TYPO3\\CMS\\Workspaces\\Event\\GetVersionedDataEvent' => true,
            'TYPO3\\CMS\\Workspaces\\Event\\RetrievedPreviewUrlEvent' => true,
            'TYPO3\\CMS\\Workspaces\\Event\\SortVersionedDataEvent' => true,
            'TYPO3\\CMS\\Workspaces\\Hook\\BackendUtilityHook' => true,
            'TYPO3\\CMS\\Workspaces\\Hook\\DataHandlerHook' => true,
            'TYPO3\\CMS\\Workspaces\\Notification\\StageChangeNotification' => true,
            'TYPO3\\CMS\\Workspaces\\Service\\IntegrityService' => true,
            'backend.routes_decorated_1.inner' => true,
            'backend.routes_decorated_10.inner' => true,
            'backend.routes_decorated_11.inner' => true,
            'backend.routes_decorated_12.inner' => true,
            'backend.routes_decorated_13.inner' => true,
            'backend.routes_decorated_14.inner' => true,
            'backend.routes_decorated_15.inner' => true,
            'backend.routes_decorated_16.inner' => true,
            'backend.routes_decorated_17.inner' => true,
            'backend.routes_decorated_18.inner' => true,
            'backend.routes_decorated_19.inner' => true,
            'backend.routes_decorated_2.inner' => true,
            'backend.routes_decorated_20.inner' => true,
            'backend.routes_decorated_21.inner' => true,
            'backend.routes_decorated_22.inner' => true,
            'backend.routes_decorated_23.inner' => true,
            'backend.routes_decorated_24.inner' => true,
            'backend.routes_decorated_25.inner' => true,
            'backend.routes_decorated_26.inner' => true,
            'backend.routes_decorated_27.inner' => true,
            'backend.routes_decorated_28.inner' => true,
            'backend.routes_decorated_29.inner' => true,
            'backend.routes_decorated_3.inner' => true,
            'backend.routes_decorated_30.inner' => true,
            'backend.routes_decorated_31.inner' => true,
            'backend.routes_decorated_32.inner' => true,
            'backend.routes_decorated_33.inner' => true,
            'backend.routes_decorated_34.inner' => true,
            'backend.routes_decorated_35.inner' => true,
            'backend.routes_decorated_36.inner' => true,
            'backend.routes_decorated_4.inner' => true,
            'backend.routes_decorated_5.inner' => true,
            'backend.routes_decorated_6.inner' => true,
            'backend.routes_decorated_7.inner' => true,
            'backend.routes_decorated_8.inner' => true,
            'backend.routes_decorated_9.inner' => true,
            'cache.adminpanel_requestcache' => true,
            'cache.dashboard.rss' => true,
            'cache.extbase' => true,
            'cache.fluid_template' => true,
            'cache.hash' => true,
            'cache.imagesizes' => true,
            'cache.l10n' => true,
            'cache.pages' => true,
            'cache.pagesection' => true,
            'cache.rootline' => true,
            'cache.runtime' => true,
            'cache.workspaces' => true,
            'dashboard.buttons.docGettingStarted' => true,
            'dashboard.buttons.docTSconfig' => true,
            'dashboard.buttons.docTypoScriptReference' => true,
            'dashboard.buttons.t3news' => true,
            'dashboard.buttons.t3securityAdvisories' => true,
            'dashboard.presets_decorated_1.inner' => true,
            'dashboard.widgetGroups_decorated_1.inner' => true,
            'dashboard.widgets_decorated_1.inner' => true,
            'extension.remote.ter' => true,
            'icons_decorated_1.inner' => true,
            'icons_decorated_10.inner' => true,
            'icons_decorated_11.inner' => true,
            'icons_decorated_12.inner' => true,
            'icons_decorated_13.inner' => true,
            'icons_decorated_14.inner' => true,
            'icons_decorated_15.inner' => true,
            'icons_decorated_16.inner' => true,
            'icons_decorated_17.inner' => true,
            'icons_decorated_18.inner' => true,
            'icons_decorated_19.inner' => true,
            'icons_decorated_2.inner' => true,
            'icons_decorated_20.inner' => true,
            'icons_decorated_21.inner' => true,
            'icons_decorated_22.inner' => true,
            'icons_decorated_23.inner' => true,
            'icons_decorated_24.inner' => true,
            'icons_decorated_25.inner' => true,
            'icons_decorated_26.inner' => true,
            'icons_decorated_27.inner' => true,
            'icons_decorated_28.inner' => true,
            'icons_decorated_29.inner' => true,
            'icons_decorated_3.inner' => true,
            'icons_decorated_30.inner' => true,
            'icons_decorated_31.inner' => true,
            'icons_decorated_32.inner' => true,
            'icons_decorated_33.inner' => true,
            'icons_decorated_34.inner' => true,
            'icons_decorated_35.inner' => true,
            'icons_decorated_36.inner' => true,
            'icons_decorated_4.inner' => true,
            'icons_decorated_5.inner' => true,
            'icons_decorated_6.inner' => true,
            'icons_decorated_7.inner' => true,
            'icons_decorated_8.inner' => true,
            'icons_decorated_9.inner' => true,
            'lowlevel.configuration.module.provider.backendroutes' => true,
            'lowlevel.configuration.module.provider.beusertsconfig' => true,
            'lowlevel.configuration.module.provider.beuseruc' => true,
            'lowlevel.configuration.module.provider.confvars' => true,
            'lowlevel.configuration.module.provider.eventlisteners' => true,
            'lowlevel.configuration.module.provider.formyamlconfiguration' => true,
            'lowlevel.configuration.module.provider.httpmiddlewarestacks' => true,
            'lowlevel.configuration.module.provider.mfaproviders' => true,
            'lowlevel.configuration.module.provider.pagestypes' => true,
            'lowlevel.configuration.module.provider.services' => true,
            'lowlevel.configuration.module.provider.siteconfiguration' => true,
            'lowlevel.configuration.module.provider.softreferenceparsers' => true,
            'lowlevel.configuration.module.provider.tbemodules' => true,
            'lowlevel.configuration.module.provider.tbemodulesext' => true,
            'lowlevel.configuration.module.provider.tbestyles' => true,
            'lowlevel.configuration.module.provider.tca' => true,
            'lowlevel.configuration.module.provider.tcadescr' => true,
            'lowlevel.configuration.module.provider.usersettings' => true,
            'middlewares_decorated_1.inner' => true,
            'middlewares_decorated_10.inner' => true,
            'middlewares_decorated_11.inner' => true,
            'middlewares_decorated_12.inner' => true,
            'middlewares_decorated_13.inner' => true,
            'middlewares_decorated_14.inner' => true,
            'middlewares_decorated_15.inner' => true,
            'middlewares_decorated_16.inner' => true,
            'middlewares_decorated_17.inner' => true,
            'middlewares_decorated_18.inner' => true,
            'middlewares_decorated_19.inner' => true,
            'middlewares_decorated_2.inner' => true,
            'middlewares_decorated_20.inner' => true,
            'middlewares_decorated_21.inner' => true,
            'middlewares_decorated_22.inner' => true,
            'middlewares_decorated_23.inner' => true,
            'middlewares_decorated_24.inner' => true,
            'middlewares_decorated_25.inner' => true,
            'middlewares_decorated_26.inner' => true,
            'middlewares_decorated_27.inner' => true,
            'middlewares_decorated_28.inner' => true,
            'middlewares_decorated_29.inner' => true,
            'middlewares_decorated_3.inner' => true,
            'middlewares_decorated_30.inner' => true,
            'middlewares_decorated_31.inner' => true,
            'middlewares_decorated_32.inner' => true,
            'middlewares_decorated_33.inner' => true,
            'middlewares_decorated_34.inner' => true,
            'middlewares_decorated_35.inner' => true,
            'middlewares_decorated_4.inner' => true,
            'middlewares_decorated_5.inner' => true,
            'middlewares_decorated_6.inner' => true,
            'middlewares_decorated_7.inner' => true,
            'middlewares_decorated_8.inner' => true,
            'middlewares_decorated_9.inner' => true,
        ];
    }

    /**
     * Gets the public 'Masterminds\HTML5' shared autowired service.
     *
     * @return \Masterminds\HTML5
     */
    protected function getHTML5Service()
    {
        return $this->services['Masterminds\\HTML5'] = \TYPO3\CMS\Core\DependencyInjection\CommonFactory::createHtml5Parser();
    }

    /**
     * Gets the public 'Psr\EventDispatcher\EventDispatcherInterface_decorated_1' shared service.
     *
     * @return \Psr\EventDispatcher\EventDispatcherInterface
     */
    protected function getEventDispatcherInterfaceDecorated1Service()
    {
        return $this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] = \TYPO3\CMS\Core\ServiceProvider::provideFallbackEventDispatcher($this, ($this->services['TYPO3\\CMS\\Adminpanel\\Service\\EventDispatcher'] ?? $this->getEventDispatcherService()));
    }

    /**
     * Gets the public 'Psr\Http\Client\ClientInterface' shared autowired service.
     *
     * @return \GuzzleHttp\Client
     */
    protected function getClientInterfaceService()
    {
        return $this->services['Psr\\Http\\Client\\ClientInterface'] = \TYPO3\CMS\Core\Http\Client\GuzzleClientFactory::getClient();
    }

    /**
     * Gets the public 'Psr\Http\Message\ResponseFactoryInterface' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Http\ResponseFactory
     */
    protected function getResponseFactoryInterfaceService()
    {
        return $this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class);
    }

    /**
     * Gets the public 'Psr\Http\Message\ServerRequestFactoryInterface' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Http\ServerRequestFactory
     */
    protected function getServerRequestFactoryInterfaceService()
    {
        return $this->services['Psr\\Http\\Message\\ServerRequestFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ServerRequestFactory::class);
    }

    /**
     * Gets the public 'Psr\Http\Message\StreamFactoryInterface' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Http\StreamFactory
     */
    protected function getStreamFactoryInterfaceService()
    {
        return $this->services['Psr\\Http\\Message\\StreamFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class);
    }

    /**
     * Gets the public 'Psr\Http\Message\UploadedFileFactoryInterface' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Http\UploadedFileFactory
     */
    protected function getUploadedFileFactoryInterfaceService()
    {
        return $this->services['Psr\\Http\\Message\\UploadedFileFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\UploadedFileFactory::class);
    }

    /**
     * Gets the public 'Psr\Http\Message\UriFactoryInterface' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Http\UriFactory
     */
    protected function getUriFactoryInterfaceService()
    {
        return $this->services['Psr\\Http\\Message\\UriFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\UriFactory::class);
    }

    /**
     * Gets the public 'Symfony\Component\Console\Command\HelpCommand' shared service.
     *
     * @return \Symfony\Component\Console\Command\HelpCommand
     */
    protected function getHelpCommandService()
    {
        return $this->services['Symfony\\Component\\Console\\Command\\HelpCommand'] = \TYPO3\CMS\Core\ServiceProvider::getHelpCommand($this);
    }

    /**
     * Gets the public 'TYPO3Fluid\Fluid\Core\Parser\TemplateProcessor\EscapingModifierTemplateProcessor' autowired service.
     *
     * @return \TYPO3Fluid\Fluid\Core\Parser\TemplateProcessor\EscapingModifierTemplateProcessor
     */
    protected function getEscapingModifierTemplateProcessorService()
    {
        $this->factories['TYPO3Fluid\\Fluid\\Core\\Parser\\TemplateProcessor\\EscapingModifierTemplateProcessor'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3Fluid\Fluid\Core\Parser\TemplateProcessor\EscapingModifierTemplateProcessor::class);
        };

        return $this->factories['TYPO3Fluid\\Fluid\\Core\\Parser\\TemplateProcessor\\EscapingModifierTemplateProcessor']();
    }

    /**
     * Gets the public 'TYPO3Fluid\Fluid\Core\Parser\TemplateProcessor\NamespaceDetectionTemplateProcessor' autowired service.
     *
     * @return \TYPO3Fluid\Fluid\Core\Parser\TemplateProcessor\NamespaceDetectionTemplateProcessor
     */
    protected function getNamespaceDetectionTemplateProcessorService()
    {
        $this->factories['TYPO3Fluid\\Fluid\\Core\\Parser\\TemplateProcessor\\NamespaceDetectionTemplateProcessor'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3Fluid\Fluid\Core\Parser\TemplateProcessor\NamespaceDetectionTemplateProcessor::class);
        };

        return $this->factories['TYPO3Fluid\\Fluid\\Core\\Parser\\TemplateProcessor\\NamespaceDetectionTemplateProcessor']();
    }

    /**
     * Gets the public 'TYPO3Fluid\Fluid\Core\Parser\TemplateProcessor\PassthroughSourceModifierTemplateProcessor' autowired service.
     *
     * @return \TYPO3Fluid\Fluid\Core\Parser\TemplateProcessor\PassthroughSourceModifierTemplateProcessor
     */
    protected function getPassthroughSourceModifierTemplateProcessorService()
    {
        $this->factories['TYPO3Fluid\\Fluid\\Core\\Parser\\TemplateProcessor\\PassthroughSourceModifierTemplateProcessor'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3Fluid\Fluid\Core\Parser\TemplateProcessor\PassthroughSourceModifierTemplateProcessor::class);
        };

        return $this->factories['TYPO3Fluid\\Fluid\\Core\\Parser\\TemplateProcessor\\PassthroughSourceModifierTemplateProcessor']();
    }

    /**
     * Gets the public 'TYPO3Fluid\Fluid\ViewHelpers\AliasViewHelper' service.
     *
     * @return \TYPO3Fluid\Fluid\ViewHelpers\AliasViewHelper
     */
    protected function getAliasViewHelperService()
    {
        $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\AliasViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3Fluid\Fluid\ViewHelpers\AliasViewHelper::class);
        };

        return $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\AliasViewHelper']();
    }

    /**
     * Gets the public 'TYPO3Fluid\Fluid\ViewHelpers\Cache\DisableViewHelper' service.
     *
     * @return \TYPO3Fluid\Fluid\ViewHelpers\Cache\DisableViewHelper
     */
    protected function getDisableViewHelperService()
    {
        $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\Cache\\DisableViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3Fluid\Fluid\ViewHelpers\Cache\DisableViewHelper::class);
        };

        return $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\Cache\\DisableViewHelper']();
    }

    /**
     * Gets the public 'TYPO3Fluid\Fluid\ViewHelpers\Cache\StaticViewHelper' service.
     *
     * @return \TYPO3Fluid\Fluid\ViewHelpers\Cache\StaticViewHelper
     */
    protected function getStaticViewHelperService()
    {
        $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\Cache\\StaticViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3Fluid\Fluid\ViewHelpers\Cache\StaticViewHelper::class);
        };

        return $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\Cache\\StaticViewHelper']();
    }

    /**
     * Gets the public 'TYPO3Fluid\Fluid\ViewHelpers\Cache\WarmupViewHelper' service.
     *
     * @return \TYPO3Fluid\Fluid\ViewHelpers\Cache\WarmupViewHelper
     */
    protected function getWarmupViewHelperService()
    {
        $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\Cache\\WarmupViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3Fluid\Fluid\ViewHelpers\Cache\WarmupViewHelper::class);
        };

        return $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\Cache\\WarmupViewHelper']();
    }

    /**
     * Gets the public 'TYPO3Fluid\Fluid\ViewHelpers\CaseViewHelper' service.
     *
     * @return \TYPO3Fluid\Fluid\ViewHelpers\CaseViewHelper
     */
    protected function getCaseViewHelperService()
    {
        $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\CaseViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3Fluid\Fluid\ViewHelpers\CaseViewHelper::class);
        };

        return $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\CaseViewHelper']();
    }

    /**
     * Gets the public 'TYPO3Fluid\Fluid\ViewHelpers\CommentViewHelper' service.
     *
     * @return \TYPO3Fluid\Fluid\ViewHelpers\CommentViewHelper
     */
    protected function getCommentViewHelperService()
    {
        $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\CommentViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3Fluid\Fluid\ViewHelpers\CommentViewHelper::class);
        };

        return $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\CommentViewHelper']();
    }

    /**
     * Gets the public 'TYPO3Fluid\Fluid\ViewHelpers\CountViewHelper' service.
     *
     * @return \TYPO3Fluid\Fluid\ViewHelpers\CountViewHelper
     */
    protected function getCountViewHelperService()
    {
        $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\CountViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3Fluid\Fluid\ViewHelpers\CountViewHelper::class);
        };

        return $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\CountViewHelper']();
    }

    /**
     * Gets the public 'TYPO3Fluid\Fluid\ViewHelpers\CycleViewHelper' service.
     *
     * @return \TYPO3Fluid\Fluid\ViewHelpers\CycleViewHelper
     */
    protected function getCycleViewHelperService()
    {
        $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\CycleViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3Fluid\Fluid\ViewHelpers\CycleViewHelper::class);
        };

        return $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\CycleViewHelper']();
    }

    /**
     * Gets the public 'TYPO3Fluid\Fluid\ViewHelpers\DebugViewHelper' service.
     *
     * @return \TYPO3Fluid\Fluid\ViewHelpers\DebugViewHelper
     */
    protected function getDebugViewHelperService()
    {
        $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\DebugViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3Fluid\Fluid\ViewHelpers\DebugViewHelper::class);
        };

        return $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\DebugViewHelper']();
    }

    /**
     * Gets the public 'TYPO3Fluid\Fluid\ViewHelpers\DefaultCaseViewHelper' service.
     *
     * @return \TYPO3Fluid\Fluid\ViewHelpers\DefaultCaseViewHelper
     */
    protected function getDefaultCaseViewHelperService()
    {
        $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\DefaultCaseViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3Fluid\Fluid\ViewHelpers\DefaultCaseViewHelper::class);
        };

        return $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\DefaultCaseViewHelper']();
    }

    /**
     * Gets the public 'TYPO3Fluid\Fluid\ViewHelpers\ElseViewHelper' service.
     *
     * @return \TYPO3Fluid\Fluid\ViewHelpers\ElseViewHelper
     */
    protected function getElseViewHelperService()
    {
        $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\ElseViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3Fluid\Fluid\ViewHelpers\ElseViewHelper::class);
        };

        return $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\ElseViewHelper']();
    }

    /**
     * Gets the public 'TYPO3Fluid\Fluid\ViewHelpers\ForViewHelper' service.
     *
     * @return \TYPO3Fluid\Fluid\ViewHelpers\ForViewHelper
     */
    protected function getForViewHelperService()
    {
        $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\ForViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3Fluid\Fluid\ViewHelpers\ForViewHelper::class);
        };

        return $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\ForViewHelper']();
    }

    /**
     * Gets the public 'TYPO3Fluid\Fluid\ViewHelpers\Format\CdataViewHelper' service.
     *
     * @return \TYPO3Fluid\Fluid\ViewHelpers\Format\CdataViewHelper
     */
    protected function getCdataViewHelperService()
    {
        $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\Format\\CdataViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3Fluid\Fluid\ViewHelpers\Format\CdataViewHelper::class);
        };

        return $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\Format\\CdataViewHelper']();
    }

    /**
     * Gets the public 'TYPO3Fluid\Fluid\ViewHelpers\Format\HtmlspecialcharsViewHelper' service.
     *
     * @return \TYPO3Fluid\Fluid\ViewHelpers\Format\HtmlspecialcharsViewHelper
     */
    protected function getHtmlspecialcharsViewHelperService()
    {
        $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\Format\\HtmlspecialcharsViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3Fluid\Fluid\ViewHelpers\Format\HtmlspecialcharsViewHelper::class);
        };

        return $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\Format\\HtmlspecialcharsViewHelper']();
    }

    /**
     * Gets the public 'TYPO3Fluid\Fluid\ViewHelpers\Format\PrintfViewHelper' service.
     *
     * @return \TYPO3Fluid\Fluid\ViewHelpers\Format\PrintfViewHelper
     */
    protected function getPrintfViewHelperService()
    {
        $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\Format\\PrintfViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3Fluid\Fluid\ViewHelpers\Format\PrintfViewHelper::class);
        };

        return $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\Format\\PrintfViewHelper']();
    }

    /**
     * Gets the public 'TYPO3Fluid\Fluid\ViewHelpers\Format\RawViewHelper' service.
     *
     * @return \TYPO3Fluid\Fluid\ViewHelpers\Format\RawViewHelper
     */
    protected function getRawViewHelperService()
    {
        $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\Format\\RawViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3Fluid\Fluid\ViewHelpers\Format\RawViewHelper::class);
        };

        return $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\Format\\RawViewHelper']();
    }

    /**
     * Gets the public 'TYPO3Fluid\Fluid\ViewHelpers\GroupedForViewHelper' service.
     *
     * @return \TYPO3Fluid\Fluid\ViewHelpers\GroupedForViewHelper
     */
    protected function getGroupedForViewHelperService()
    {
        $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\GroupedForViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3Fluid\Fluid\ViewHelpers\GroupedForViewHelper::class);
        };

        return $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\GroupedForViewHelper']();
    }

    /**
     * Gets the public 'TYPO3Fluid\Fluid\ViewHelpers\IfViewHelper' service.
     *
     * @return \TYPO3Fluid\Fluid\ViewHelpers\IfViewHelper
     */
    protected function getIfViewHelperService()
    {
        $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\IfViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3Fluid\Fluid\ViewHelpers\IfViewHelper::class);
        };

        return $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\IfViewHelper']();
    }

    /**
     * Gets the public 'TYPO3Fluid\Fluid\ViewHelpers\InlineViewHelper' service.
     *
     * @return \TYPO3Fluid\Fluid\ViewHelpers\InlineViewHelper
     */
    protected function getInlineViewHelperService()
    {
        $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\InlineViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3Fluid\Fluid\ViewHelpers\InlineViewHelper::class);
        };

        return $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\InlineViewHelper']();
    }

    /**
     * Gets the public 'TYPO3Fluid\Fluid\ViewHelpers\LayoutViewHelper' service.
     *
     * @return \TYPO3Fluid\Fluid\ViewHelpers\LayoutViewHelper
     */
    protected function getLayoutViewHelperService()
    {
        $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\LayoutViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3Fluid\Fluid\ViewHelpers\LayoutViewHelper::class);
        };

        return $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\LayoutViewHelper']();
    }

    /**
     * Gets the public 'TYPO3Fluid\Fluid\ViewHelpers\OrViewHelper' service.
     *
     * @return \TYPO3Fluid\Fluid\ViewHelpers\OrViewHelper
     */
    protected function getOrViewHelperService()
    {
        $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\OrViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3Fluid\Fluid\ViewHelpers\OrViewHelper::class);
        };

        return $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\OrViewHelper']();
    }

    /**
     * Gets the public 'TYPO3Fluid\Fluid\ViewHelpers\RenderViewHelper' service.
     *
     * @return \TYPO3Fluid\Fluid\ViewHelpers\RenderViewHelper
     */
    protected function getRenderViewHelperService()
    {
        $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\RenderViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3Fluid\Fluid\ViewHelpers\RenderViewHelper::class);
        };

        return $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\RenderViewHelper']();
    }

    /**
     * Gets the public 'TYPO3Fluid\Fluid\ViewHelpers\SectionViewHelper' service.
     *
     * @return \TYPO3Fluid\Fluid\ViewHelpers\SectionViewHelper
     */
    protected function getSectionViewHelperService()
    {
        $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\SectionViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3Fluid\Fluid\ViewHelpers\SectionViewHelper::class);
        };

        return $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\SectionViewHelper']();
    }

    /**
     * Gets the public 'TYPO3Fluid\Fluid\ViewHelpers\SpacelessViewHelper' service.
     *
     * @return \TYPO3Fluid\Fluid\ViewHelpers\SpacelessViewHelper
     */
    protected function getSpacelessViewHelperService()
    {
        $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\SpacelessViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3Fluid\Fluid\ViewHelpers\SpacelessViewHelper::class);
        };

        return $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\SpacelessViewHelper']();
    }

    /**
     * Gets the public 'TYPO3Fluid\Fluid\ViewHelpers\SwitchViewHelper' service.
     *
     * @return \TYPO3Fluid\Fluid\ViewHelpers\SwitchViewHelper
     */
    protected function getSwitchViewHelperService()
    {
        $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\SwitchViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3Fluid\Fluid\ViewHelpers\SwitchViewHelper::class);
        };

        return $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\SwitchViewHelper']();
    }

    /**
     * Gets the public 'TYPO3Fluid\Fluid\ViewHelpers\ThenViewHelper' service.
     *
     * @return \TYPO3Fluid\Fluid\ViewHelpers\ThenViewHelper
     */
    protected function getThenViewHelperService()
    {
        $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\ThenViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3Fluid\Fluid\ViewHelpers\ThenViewHelper::class);
        };

        return $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\ThenViewHelper']();
    }

    /**
     * Gets the public 'TYPO3Fluid\Fluid\ViewHelpers\VariableViewHelper' service.
     *
     * @return \TYPO3Fluid\Fluid\ViewHelpers\VariableViewHelper
     */
    protected function getVariableViewHelperService()
    {
        $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\VariableViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3Fluid\Fluid\ViewHelpers\VariableViewHelper::class);
        };

        return $this->factories['TYPO3Fluid\\Fluid\\ViewHelpers\\VariableViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Adminpanel\Controller\MainController' shared autowired service.
     *
     * @return \TYPO3\CMS\Adminpanel\Controller\MainController
     */
    protected function getMainControllerService()
    {
        return $this->services['TYPO3\\CMS\\Adminpanel\\Controller\\MainController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Adminpanel\Controller\MainController::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Adminpanel\Service\ModuleLoader::class), ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), ($this->services['TYPO3\\CMS\\Adminpanel\\Service\\ConfigurationService'] ?? ($this->services['TYPO3\\CMS\\Adminpanel\\Service\\ConfigurationService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Adminpanel\Service\ConfigurationService::class))));
    }

    /**
     * Gets the public 'TYPO3\CMS\Adminpanel\Middleware\AdminPanelDataPersister' shared autowired service.
     *
     * @return \TYPO3\CMS\Adminpanel\Middleware\AdminPanelDataPersister
     */
    protected function getAdminPanelDataPersisterService()
    {
        return $this->services['TYPO3\\CMS\\Adminpanel\\Middleware\\AdminPanelDataPersister'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Adminpanel\Middleware\AdminPanelDataPersister::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Adminpanel\Middleware\AdminPanelInitiator' shared autowired service.
     *
     * @return \TYPO3\CMS\Adminpanel\Middleware\AdminPanelInitiator
     */
    protected function getAdminPanelInitiatorService()
    {
        return $this->services['TYPO3\\CMS\\Adminpanel\\Middleware\\AdminPanelInitiator'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Adminpanel\Middleware\AdminPanelInitiator::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Adminpanel\Middleware\AdminPanelRenderer' shared autowired service.
     *
     * @return \TYPO3\CMS\Adminpanel\Middleware\AdminPanelRenderer
     */
    protected function getAdminPanelRendererService()
    {
        return $this->services['TYPO3\\CMS\\Adminpanel\\Middleware\\AdminPanelRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Adminpanel\Middleware\AdminPanelRenderer::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Adminpanel\Middleware\SqlLogging' shared autowired service.
     *
     * @return \TYPO3\CMS\Adminpanel\Middleware\SqlLogging
     */
    protected function getSqlLoggingService()
    {
        return $this->services['TYPO3\\CMS\\Adminpanel\\Middleware\\SqlLogging'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Adminpanel\Middleware\SqlLogging::class, ($this->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? $this->getConnectionPoolService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Adminpanel\Service\ConfigurationService' shared autowired service.
     *
     * @return \TYPO3\CMS\Adminpanel\Service\ConfigurationService
     */
    protected function getConfigurationServiceService()
    {
        return $this->services['TYPO3\\CMS\\Adminpanel\\Service\\ConfigurationService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Adminpanel\Service\ConfigurationService::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Adminpanel\Service\EventDispatcher' shared autowired service.
     *
     * @return \TYPO3\CMS\Adminpanel\Service\EventDispatcher
     */
    protected function getEventDispatcherService()
    {
        return $this->services['TYPO3\\CMS\\Adminpanel\\Service\\EventDispatcher'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Adminpanel\Service\EventDispatcher::class, ($this->services['TYPO3\\CMS\\Core\\EventDispatcher\\ListenerProvider_decorated_3'] ?? $this->getListenerProviderDecorated3Service()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Adminpanel\ViewHelpers\IsArrayViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Adminpanel\ViewHelpers\IsArrayViewHelper
     */
    protected function getIsArrayViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Adminpanel\\ViewHelpers\\IsArrayViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Adminpanel\ViewHelpers\IsArrayViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Adminpanel\\ViewHelpers\\IsArrayViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Adminpanel\ViewHelpers\SubModuleRenderViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Adminpanel\ViewHelpers\SubModuleRenderViewHelper
     */
    protected function getSubModuleRenderViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Adminpanel\\ViewHelpers\\SubModuleRenderViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Adminpanel\ViewHelpers\SubModuleRenderViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Adminpanel\\ViewHelpers\\SubModuleRenderViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Backend\Shortcut\ShortcutRepository' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Backend\Shortcut\ShortcutRepository
     */
    protected function getShortcutRepositoryService()
    {
        return $this->services['TYPO3\\CMS\\Backend\\Backend\\Shortcut\\ShortcutRepository'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Backend\Shortcut\ShortcutRepository::class, ($this->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? $this->getConnectionPoolService()), ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService()), ($this->privates['TYPO3\\CMS\\Backend\\Module\\ModuleLoader'] ?? ($this->privates['TYPO3\\CMS\\Backend\\Module\\ModuleLoader'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Module\ModuleLoader::class))));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Backend\ToolbarItems\ClearCacheToolbarItem' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Backend\ToolbarItems\ClearCacheToolbarItem
     */
    protected function getClearCacheToolbarItemService()
    {
        return $this->services['TYPO3\\CMS\\Backend\\Backend\\ToolbarItems\\ClearCacheToolbarItem'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Backend\ToolbarItems\ClearCacheToolbarItem::class, ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class))), ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), ($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Clipboard\Clipboard' autowired service.
     *
     * @return \TYPO3\CMS\Backend\Clipboard\Clipboard
     */
    protected function getClipboardService()
    {
        $this->factories['TYPO3\\CMS\\Backend\\Clipboard\\Clipboard'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Clipboard\Clipboard::class, ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService()), ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), ($this->services['TYPO3\\CMS\\Core\\Resource\\ResourceFactory'] ?? $this->getResourceFactoryService()));
        };

        return $this->factories['TYPO3\\CMS\\Backend\\Clipboard\\Clipboard']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Command\LockBackendCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Command\LockBackendCommand
     */
    protected function getLockBackendCommandService()
    {
        $this->services['TYPO3\\CMS\\Backend\\Command\\LockBackendCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Command\LockBackendCommand::class);

        $instance->setName('backend:lock');
        $instance->setDescription('Lock the TYPO3 Backend');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Command\ReferenceIndexUpdateCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Command\ReferenceIndexUpdateCommand
     */
    protected function getReferenceIndexUpdateCommandService()
    {
        $this->services['TYPO3\\CMS\\Backend\\Command\\ReferenceIndexUpdateCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Command\ReferenceIndexUpdateCommand::class);

        $instance->setName('referenceindex:update');
        $instance->setDescription('Update the reference index of TYPO3');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Command\ResetPasswordCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Command\ResetPasswordCommand
     */
    protected function getResetPasswordCommandService()
    {
        $this->services['TYPO3\\CMS\\Backend\\Command\\ResetPasswordCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Command\ResetPasswordCommand::class, ($this->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? $this->getContextService()), ($this->privates['TYPO3\\CMS\\Backend\\Authentication\\PasswordReset'] ?? $this->getPasswordResetService()));

        $instance->setName('backend:resetpassword');
        $instance->setDescription('Trigger a password reset for a backend user');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Command\UnlockBackendCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Command\UnlockBackendCommand
     */
    protected function getUnlockBackendCommandService()
    {
        $this->services['TYPO3\\CMS\\Backend\\Command\\UnlockBackendCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Command\UnlockBackendCommand::class);

        $instance->setName('backend:unlock');
        $instance->setDescription('Unlock the TYPO3 Backend');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\AboutController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\AboutController
     */
    protected function getAboutControllerService()
    {
        return $this->services['TYPO3\\CMS\\Backend\\Controller\\AboutController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\AboutController::class, ($this->privates['TYPO3\\CMS\\Core\\Information\\Typo3Version'] ?? ($this->privates['TYPO3\\CMS\\Core\\Information\\Typo3Version'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Information\Typo3Version::class))), ($this->privates['TYPO3\\CMS\\Core\\Information\\Typo3Information'] ?? ($this->privates['TYPO3\\CMS\\Core\\Information\\Typo3Information'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Information\Typo3Information::class))), ($this->privates['TYPO3\\CMS\\Backend\\Module\\ModuleLoader'] ?? ($this->privates['TYPO3\\CMS\\Backend\\Module\\ModuleLoader'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Module\ModuleLoader::class))), ($this->services['_early.TYPO3\\CMS\\Core\\Package\\PackageManager'] ?? $this->get('_early.TYPO3\\CMS\\Core\\Package\\PackageManager', 1)), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class))), ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService()), ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\BackendController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\BackendController
     */
    protected function getBackendControllerService()
    {
        $a = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());
        $b = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));

        return $this->services['TYPO3\\CMS\\Backend\\Controller\\BackendController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\BackendController::class, ($this->privates['TYPO3\\CMS\\Core\\Information\\Typo3Version'] ?? ($this->privates['TYPO3\\CMS\\Core\\Information\\Typo3Version'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Information\Typo3Version::class))), $a, ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), $b, ($this->privates['TYPO3\\CMS\\Backend\\Module\\ModuleLoader'] ?? ($this->privates['TYPO3\\CMS\\Backend\\Module\\ModuleLoader'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Module\ModuleLoader::class))), ($this->services['TYPO3\\CMS\\Backend\\Domain\\Repository\\Module\\BackendModuleRepository'] ?? ($this->services['TYPO3\\CMS\\Backend\\Domain\\Repository\\Module\\BackendModuleRepository'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Domain\Repository\Module\BackendModuleRepository::class))), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $b, $a, ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\ClipboardController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\ClipboardController
     */
    protected function getClipboardControllerService()
    {
        return $this->services['TYPO3\\CMS\\Backend\\Controller\\ClipboardController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\ClipboardController::class, ($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class))), ($this->services['Psr\\Http\\Message\\StreamFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\StreamFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class))));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\ColumnSelectorController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\ColumnSelectorController
     */
    protected function getColumnSelectorControllerService()
    {
        return $this->services['TYPO3\\CMS\\Backend\\Controller\\ColumnSelectorController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\ColumnSelectorController::class, ($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class))));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\ContentElement\ElementHistoryController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\ContentElement\ElementHistoryController
     */
    protected function getElementHistoryControllerService()
    {
        $a = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());

        return $this->services['TYPO3\\CMS\\Backend\\Controller\\ContentElement\\ElementHistoryController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\ContentElement\ElementHistoryController::class, $a, ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class))), $a, ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\ContentElement\ElementInformationController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\ContentElement\ElementInformationController
     */
    protected function getElementInformationControllerService()
    {
        $a = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());

        return $this->services['TYPO3\\CMS\\Backend\\Controller\\ContentElement\\ElementInformationController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\ContentElement\ElementInformationController::class, $a, ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class))), $a, ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\ContentElement\MoveElementController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\ContentElement\MoveElementController
     */
    protected function getMoveElementControllerService()
    {
        $a = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());
        $b = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));

        return $this->services['TYPO3\\CMS\\Backend\\Controller\\ContentElement\\MoveElementController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\ContentElement\MoveElementController::class, $a, $b, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $b, $a, ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\ContentElement\NewContentElementController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\ContentElement\NewContentElementController
     */
    protected function getNewContentElementControllerService()
    {
        $a = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());
        $b = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));

        return $this->services['TYPO3\\CMS\\Backend\\Controller\\ContentElement\\NewContentElementController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\ContentElement\NewContentElementController::class, $a, $b, ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $b, $a, ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\DummyController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\DummyController
     */
    protected function getDummyControllerService()
    {
        return $this->services['TYPO3\\CMS\\Backend\\Controller\\DummyController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\DummyController::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class))), ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService()), ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\EditDocumentController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\EditDocumentController
     */
    protected function getEditDocumentControllerService()
    {
        $a = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());
        $b = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));

        return $this->services['TYPO3\\CMS\\Backend\\Controller\\EditDocumentController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\EditDocumentController::class, ($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()), $a, $b, ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $b, $a, ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\File\FileController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\File\FileController
     */
    protected function getFileControllerService()
    {
        return $this->services['TYPO3\\CMS\\Backend\\Controller\\File\\FileController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\File\FileController::class, ($this->services['TYPO3\\CMS\\Core\\Resource\\ResourceFactory'] ?? $this->getResourceFactoryService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Utility\File\ExtendedFileUtility::class), ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService()), ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\File\ImageProcessController' autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\File\ImageProcessController
     */
    protected function getImageProcessControllerService()
    {
        $this->factories['TYPO3\\CMS\\Backend\\Controller\\File\\ImageProcessController'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\File\ImageProcessController::class, ($this->privates['TYPO3\\CMS\\Core\\Resource\\Service\\ImageProcessingService'] ?? $this->getImageProcessingServiceService()));

            $instance->setLogger(($this->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $this->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Backend\\Controller\\File\\ImageProcessController'));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Backend\\Controller\\File\\ImageProcessController']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\HelpController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\HelpController
     */
    protected function getHelpControllerService()
    {
        $a = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());

        return $this->services['TYPO3\\CMS\\Backend\\Controller\\HelpController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\HelpController::class, ($this->privates['TYPO3\\CMS\\Core\\Information\\Typo3Information'] ?? ($this->privates['TYPO3\\CMS\\Core\\Information\\Typo3Information'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Information\Typo3Information::class))), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Domain\Repository\TableManualRepository::class), $a, ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class))), $a, ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\LinkBrowserController' autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\LinkBrowserController
     */
    protected function getLinkBrowserControllerService()
    {
        $this->factories['TYPO3\\CMS\\Backend\\Controller\\LinkBrowserController'] = function () {
            $a = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));

            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\LinkBrowserController::class, ($this->services['TYPO3\\CMS\\Core\\Service\\DependencyOrderingService'] ?? $this->getDependencyOrderingServiceService()), $a, ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), ($this->services['TYPO3\\CMS\\Core\\LinkHandling\\LinkService'] ?? ($this->services['TYPO3\\CMS\\Core\\LinkHandling\\LinkService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\LinkHandling\LinkService::class))), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $a, ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService()), ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())));
        };

        return $this->factories['TYPO3\\CMS\\Backend\\Controller\\LinkBrowserController']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\LoginController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\LoginController
     */
    protected function getLoginControllerService()
    {
        $a = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));

        return $this->services['TYPO3\\CMS\\Backend\\Controller\\LoginController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\LoginController::class, ($this->privates['TYPO3\\CMS\\Core\\Information\\Typo3Information'] ?? ($this->privates['TYPO3\\CMS\\Core\\Information\\Typo3Information'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Information\Typo3Information::class))), ($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()), $a, ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), ($this->privates['TYPO3\\CMS\\Core\\Configuration\\Features'] ?? ($this->privates['TYPO3\\CMS\\Core\\Configuration\\Features'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\Features::class))), ($this->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? $this->getContextService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $a, ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService()), ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\LoginProvider\LoginProviderResolver::class));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\MfaAjaxController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\MfaAjaxController
     */
    protected function getMfaAjaxControllerService()
    {
        return $this->services['TYPO3\\CMS\\Backend\\Controller\\MfaAjaxController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\MfaAjaxController::class, ($this->services['TYPO3\\CMS\\Core\\Authentication\\Mfa\\MfaProviderRegistry'] ?? $this->getMfaProviderRegistryService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\MfaConfigurationController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\MfaConfigurationController
     */
    protected function getMfaConfigurationControllerService()
    {
        $a = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());

        return $this->services['TYPO3\\CMS\\Backend\\Controller\\MfaConfigurationController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\MfaConfigurationController::class, $a, ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), ($this->services['TYPO3\\CMS\\Core\\Authentication\\Mfa\\MfaProviderRegistry'] ?? $this->getMfaProviderRegistryService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class))), $a, ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\MfaController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\MfaController
     */
    protected function getMfaControllerService()
    {
        $a = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));

        $this->services['TYPO3\\CMS\\Backend\\Controller\\MfaController'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\MfaController::class, ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), ($this->services['TYPO3\\CMS\\Core\\Authentication\\Mfa\\MfaProviderRegistry'] ?? $this->getMfaProviderRegistryService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $a, ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService()), ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())), ($this->services['TYPO3\\CMS\\Backend\\View\\AuthenticationStyleInformation'] ?? $this->getAuthenticationStyleInformationService()), $a);

        $instance->setLogger(($this->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $this->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Backend\\Controller\\MfaController'));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\MfaSetupController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\MfaSetupController
     */
    protected function getMfaSetupControllerService()
    {
        $a = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));

        return $this->services['TYPO3\\CMS\\Backend\\Controller\\MfaSetupController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\MfaSetupController::class, ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), ($this->services['TYPO3\\CMS\\Core\\Authentication\\Mfa\\MfaProviderRegistry'] ?? $this->getMfaProviderRegistryService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $a, ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService()), ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())), ($this->services['TYPO3\\CMS\\Backend\\View\\AuthenticationStyleInformation'] ?? $this->getAuthenticationStyleInformationService()), $a, ($this->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $this->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Backend\\Controller\\MfaSetupController'));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\NewRecordController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\NewRecordController
     */
    protected function getNewRecordControllerService()
    {
        $a = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());
        $b = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));

        return $this->services['TYPO3\\CMS\\Backend\\Controller\\NewRecordController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\NewRecordController::class, $a, $b, ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $b, $a, ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\PageLayoutController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\PageLayoutController
     */
    protected function getPageLayoutControllerService()
    {
        $a = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());
        $b = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));

        return $this->services['TYPO3\\CMS\\Backend\\Controller\\PageLayoutController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\PageLayoutController::class, $a, $b, ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), ($this->privates['TYPO3\\CMS\\Core\\Domain\\Repository\\PageRepository'] ?? $this->getPageRepositoryService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $b, $a, ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\Page\NewMultiplePagesController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\Page\NewMultiplePagesController
     */
    protected function getNewMultiplePagesControllerService()
    {
        $a = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());

        return $this->services['TYPO3\\CMS\\Backend\\Controller\\Page\\NewMultiplePagesController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\Page\NewMultiplePagesController::class, $a, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class))), $a, ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\Page\SortSubPagesController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\Page\SortSubPagesController
     */
    protected function getSortSubPagesControllerService()
    {
        $a = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());

        return $this->services['TYPO3\\CMS\\Backend\\Controller\\Page\\SortSubPagesController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\Page\SortSubPagesController::class, $a, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class))), $a, ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\ResetPasswordController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\ResetPasswordController
     */
    protected function getResetPasswordControllerService()
    {
        $a = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));

        return $this->services['TYPO3\\CMS\\Backend\\Controller\\ResetPasswordController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\ResetPasswordController::class, ($this->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? $this->getContextService()), ($this->services['TYPO3\\CMS\\Core\\Localization\\Locales'] ?? $this->getLocalesService()), ($this->privates['TYPO3\\CMS\\Core\\Configuration\\Features'] ?? ($this->privates['TYPO3\\CMS\\Core\\Configuration\\Features'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\Features::class))), ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), $a, ($this->privates['TYPO3\\CMS\\Backend\\Authentication\\PasswordReset'] ?? $this->getPasswordResetService()), ($this->privates['TYPO3\\CMS\\Core\\Information\\Typo3Information'] ?? ($this->privates['TYPO3\\CMS\\Core\\Information\\Typo3Information'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Information\Typo3Information::class))), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $a, ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService()), ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())), ($this->services['TYPO3\\CMS\\Backend\\View\\AuthenticationStyleInformation'] ?? $this->getAuthenticationStyleInformationService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\SiteConfigurationController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\SiteConfigurationController
     */
    protected function getSiteConfigurationControllerService()
    {
        $a = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());
        $b = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));

        return $this->services['TYPO3\\CMS\\Backend\\Controller\\SiteConfigurationController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\SiteConfigurationController::class, ($this->privates['TYPO3\\CMS\\Core\\Site\\SiteFinder'] ?? $this->getSiteFinderService()), $a, $b, ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $b, $a, ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Controller\SwitchUserController' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Controller\SwitchUserController
     */
    protected function getSwitchUserControllerService()
    {
        return $this->services['TYPO3\\CMS\\Backend\\Controller\\SwitchUserController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Controller\SwitchUserController::class, ($this->services['TYPO3\\CMS\\Core\\EventDispatcher\\EventDispatcher'] ?? $this->getEventDispatcher2Service()), ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), ($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class))));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Domain\Repository\Module\BackendModuleRepository' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Domain\Repository\Module\BackendModuleRepository
     */
    protected function getBackendModuleRepositoryService()
    {
        return $this->services['TYPO3\\CMS\\Backend\\Domain\\Repository\\Module\\BackendModuleRepository'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Domain\Repository\Module\BackendModuleRepository::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Form\FormDataProvider\SiteDatabaseEditRow' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Form\FormDataProvider\SiteDatabaseEditRow
     */
    protected function getSiteDatabaseEditRowService()
    {
        return $this->services['TYPO3\\CMS\\Backend\\Form\\FormDataProvider\\SiteDatabaseEditRow'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Form\FormDataProvider\SiteDatabaseEditRow::class, ($this->services['TYPO3\\CMS\\Core\\Configuration\\SiteConfiguration'] ?? $this->getSiteConfigurationService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\History\RecordHistoryRollback' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\History\RecordHistoryRollback
     */
    protected function getRecordHistoryRollbackService()
    {
        return $this->services['TYPO3\\CMS\\Backend\\History\\RecordHistoryRollback'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\History\RecordHistoryRollback::class, ($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Http\Application' shared service.
     *
     * @return \TYPO3\CMS\Backend\Http\Application
     */
    protected function getApplicationService()
    {
        return $this->services['TYPO3\\CMS\\Backend\\Http\\Application'] = \TYPO3\CMS\Backend\ServiceProvider::getApplication($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Http\RequestHandler' shared service.
     *
     * @return \TYPO3\CMS\Backend\Http\RequestHandler
     */
    protected function getRequestHandlerService()
    {
        return $this->services['TYPO3\\CMS\\Backend\\Http\\RequestHandler'] = \TYPO3\CMS\Backend\ServiceProvider::getRequestHandler($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Http\RouteDispatcher' shared service.
     *
     * @return \TYPO3\CMS\Backend\Http\RouteDispatcher
     */
    protected function getRouteDispatcherService()
    {
        return $this->services['TYPO3\\CMS\\Backend\\Http\\RouteDispatcher'] = \TYPO3\CMS\Backend\ServiceProvider::getRouteDispatcher($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Middleware\AdditionalResponseHeaders' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Middleware\AdditionalResponseHeaders
     */
    protected function getAdditionalResponseHeadersService()
    {
        return $this->services['TYPO3\\CMS\\Backend\\Middleware\\AdditionalResponseHeaders'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Middleware\AdditionalResponseHeaders::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Middleware\BackendRouteInitialization' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Middleware\BackendRouteInitialization
     */
    protected function getBackendRouteInitializationService()
    {
        return $this->services['TYPO3\\CMS\\Backend\\Middleware\\BackendRouteInitialization'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Middleware\BackendRouteInitialization::class, ($this->services['TYPO3\\CMS\\Backend\\Routing\\Router_decorated_1'] ?? $this->getRouterDecorated1Service()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Middleware\BackendUserAuthenticator' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Middleware\BackendUserAuthenticator
     */
    protected function getBackendUserAuthenticatorService()
    {
        $this->services['TYPO3\\CMS\\Backend\\Middleware\\BackendUserAuthenticator'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Middleware\BackendUserAuthenticator::class, ($this->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? $this->getContextService()), ($this->services['TYPO3\\CMS\\Core\\Localization\\LanguageServiceFactory'] ?? $this->getLanguageServiceFactoryService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\RateLimiter\RateLimiterFactory::class));

        $instance->setLogger(($this->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $this->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Backend\\Middleware\\BackendUserAuthenticator'));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Middleware\ForcedHttpsBackendRedirector' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Middleware\ForcedHttpsBackendRedirector
     */
    protected function getForcedHttpsBackendRedirectorService()
    {
        return $this->services['TYPO3\\CMS\\Backend\\Middleware\\ForcedHttpsBackendRedirector'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Middleware\ForcedHttpsBackendRedirector::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Middleware\LockedBackendGuard' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Middleware\LockedBackendGuard
     */
    protected function getLockedBackendGuardService()
    {
        return $this->services['TYPO3\\CMS\\Backend\\Middleware\\LockedBackendGuard'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Middleware\LockedBackendGuard::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Middleware\OutputCompression' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Middleware\OutputCompression
     */
    protected function getOutputCompressionService()
    {
        return $this->services['TYPO3\\CMS\\Backend\\Middleware\\OutputCompression'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Middleware\OutputCompression::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Middleware\SiteResolver' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Middleware\SiteResolver
     */
    protected function getSiteResolverService()
    {
        return $this->services['TYPO3\\CMS\\Backend\\Middleware\\SiteResolver'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Middleware\SiteResolver::class, ($this->services['TYPO3\\CMS\\Core\\Routing\\SiteMatcher'] ?? $this->getSiteMatcherService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Module\ModuleStorage' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Module\ModuleStorage
     */
    protected function getModuleStorageService()
    {
        return $this->services['TYPO3\\CMS\\Backend\\Module\\ModuleStorage'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Module\ModuleStorage::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\RecordList\ElementBrowserRecordList' autowired service.
     *
     * @return \TYPO3\CMS\Backend\RecordList\ElementBrowserRecordList
     */
    protected function getElementBrowserRecordListService()
    {
        $this->factories['TYPO3\\CMS\\Backend\\RecordList\\ElementBrowserRecordList'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\RecordList\ElementBrowserRecordList::class, ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService()), ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), ($this->privates['TYPO3\\CMS\\Backend\\Configuration\\TranslationConfigurationProvider'] ?? ($this->privates['TYPO3\\CMS\\Backend\\Configuration\\TranslationConfigurationProvider'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Configuration\TranslationConfigurationProvider::class))), ($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()));
        };

        return $this->factories['TYPO3\\CMS\\Backend\\RecordList\\ElementBrowserRecordList']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Resource\PublicUrlPrefixer' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Resource\PublicUrlPrefixer
     */
    protected function getPublicUrlPrefixerService()
    {
        return $this->services['TYPO3\\CMS\\Backend\\Resource\\PublicUrlPrefixer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Resource\PublicUrlPrefixer::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Routing\Router_decorated_1' shared service.
     *
     * @return \TYPO3\CMS\Backend\Routing\Router
     */
    protected function getRouterDecorated1Service()
    {
        return $this->services['TYPO3\\CMS\\Backend\\Routing\\Router_decorated_1'] = \TYPO3\CMS\Backend\ServiceProvider::configureBackendRouter($this, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Routing\Router::class));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Routing\UriBuilder' shared service.
     *
     * @return \TYPO3\CMS\Backend\Routing\UriBuilder
     */
    protected function getUriBuilderService()
    {
        return $this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] = \TYPO3\CMS\Backend\ServiceProvider::getUriBuilder($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Security\CategoryPermissionsAspect' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Security\CategoryPermissionsAspect
     */
    protected function getCategoryPermissionsAspectService()
    {
        return $this->services['TYPO3\\CMS\\Backend\\Security\\CategoryPermissionsAspect'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Security\CategoryPermissionsAspect::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Template\ModuleTemplate' autowired service.
     *
     * @return \TYPO3\CMS\Backend\Template\ModuleTemplate
     */
    protected function getModuleTemplateService()
    {
        $this->factories['TYPO3\\CMS\\Backend\\Template\\ModuleTemplate'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplate::class, ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class))), ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService()), ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService()));
        };

        return $this->factories['TYPO3\\CMS\\Backend\\Template\\ModuleTemplate']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Template\ModuleTemplateFactory' autowired service.
     *
     * @return \TYPO3\CMS\Backend\Template\ModuleTemplateFactory
     */
    protected function getModuleTemplateFactoryService()
    {
        $this->factories['TYPO3\\CMS\\Backend\\Template\\ModuleTemplateFactory'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class))), ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService()), ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService()));
        };

        return $this->factories['TYPO3\\CMS\\Backend\\Template\\ModuleTemplateFactory']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Tree\View\ContentCreationPagePositionMap' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Tree\View\ContentCreationPagePositionMap
     */
    protected function getContentCreationPagePositionMapService()
    {
        return $this->services['TYPO3\\CMS\\Backend\\Tree\\View\\ContentCreationPagePositionMap'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Tree\View\ContentCreationPagePositionMap::class, ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService()), ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), ($this->services['TYPO3\\CMS\\Backend\\View\\BackendLayoutView'] ?? ($this->services['TYPO3\\CMS\\Backend\\View\\BackendLayoutView'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\View\BackendLayoutView::class))));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\Tree\View\ContentMovingPagePositionMap' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Tree\View\ContentMovingPagePositionMap
     */
    protected function getContentMovingPagePositionMapService()
    {
        return $this->services['TYPO3\\CMS\\Backend\\Tree\\View\\ContentMovingPagePositionMap'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Tree\View\ContentMovingPagePositionMap::class, ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService()), ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), ($this->services['TYPO3\\CMS\\Backend\\View\\BackendLayoutView'] ?? ($this->services['TYPO3\\CMS\\Backend\\View\\BackendLayoutView'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\View\BackendLayoutView::class))));
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\ViewHelpers\ArrayBrowserViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Backend\ViewHelpers\ArrayBrowserViewHelper
     */
    protected function getArrayBrowserViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\ArrayBrowserViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\ViewHelpers\ArrayBrowserViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\ArrayBrowserViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\ViewHelpers\AvatarViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Backend\ViewHelpers\AvatarViewHelper
     */
    protected function getAvatarViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\AvatarViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\ViewHelpers\AvatarViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\AvatarViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\ViewHelpers\LanguageColumnViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Backend\ViewHelpers\LanguageColumnViewHelper
     */
    protected function getLanguageColumnViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\LanguageColumnViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\ViewHelpers\LanguageColumnViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\LanguageColumnViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\ViewHelpers\Link\EditRecordViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Backend\ViewHelpers\Link\EditRecordViewHelper
     */
    protected function getEditRecordViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\Link\\EditRecordViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\ViewHelpers\Link\EditRecordViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\Link\\EditRecordViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\ViewHelpers\Link\NewRecordViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Backend\ViewHelpers\Link\NewRecordViewHelper
     */
    protected function getNewRecordViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\Link\\NewRecordViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\ViewHelpers\Link\NewRecordViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\Link\\NewRecordViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\ViewHelpers\Mfa\IfHasStateViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Backend\ViewHelpers\Mfa\IfHasStateViewHelper
     */
    protected function getIfHasStateViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\Mfa\\IfHasStateViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\ViewHelpers\Mfa\IfHasStateViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\Mfa\\IfHasStateViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\ViewHelpers\ModuleLayoutViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Backend\ViewHelpers\ModuleLayoutViewHelper
     */
    protected function getModuleLayoutViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\ModuleLayoutViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\ViewHelpers\ModuleLayoutViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\ModuleLayoutViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\ViewHelpers\ModuleLayout\Button\LinkButtonViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Backend\ViewHelpers\ModuleLayout\Button\LinkButtonViewHelper
     */
    protected function getLinkButtonViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\ModuleLayout\\Button\\LinkButtonViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\ViewHelpers\ModuleLayout\Button\LinkButtonViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\ModuleLayout\\Button\\LinkButtonViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\ViewHelpers\ModuleLayout\Button\ShortcutButtonViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Backend\ViewHelpers\ModuleLayout\Button\ShortcutButtonViewHelper
     */
    protected function getShortcutButtonViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\ModuleLayout\\Button\\ShortcutButtonViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\ViewHelpers\ModuleLayout\Button\ShortcutButtonViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\ModuleLayout\\Button\\ShortcutButtonViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\ViewHelpers\ModuleLayout\MenuItemViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Backend\ViewHelpers\ModuleLayout\MenuItemViewHelper
     */
    protected function getMenuItemViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\ModuleLayout\\MenuItemViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\ViewHelpers\ModuleLayout\MenuItemViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\ModuleLayout\\MenuItemViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\ViewHelpers\ModuleLayout\MenuViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Backend\ViewHelpers\ModuleLayout\MenuViewHelper
     */
    protected function getMenuViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\ModuleLayout\\MenuViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\ViewHelpers\ModuleLayout\MenuViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\ModuleLayout\\MenuViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\ViewHelpers\ModuleLinkViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Backend\ViewHelpers\ModuleLinkViewHelper
     */
    protected function getModuleLinkViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\ModuleLinkViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\ViewHelpers\ModuleLinkViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\ModuleLinkViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\ViewHelpers\ThumbnailViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Backend\ViewHelpers\ThumbnailViewHelper
     */
    protected function getThumbnailViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\ThumbnailViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\ViewHelpers\ThumbnailViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\ThumbnailViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\ViewHelpers\Uri\EditRecordViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Backend\ViewHelpers\Uri\EditRecordViewHelper
     */
    protected function getEditRecordViewHelper2Service()
    {
        $this->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\Uri\\EditRecordViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\ViewHelpers\Uri\EditRecordViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\Uri\\EditRecordViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\ViewHelpers\Uri\NewRecordViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Backend\ViewHelpers\Uri\NewRecordViewHelper
     */
    protected function getNewRecordViewHelper2Service()
    {
        $this->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\Uri\\NewRecordViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\ViewHelpers\Uri\NewRecordViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Backend\\ViewHelpers\\Uri\\NewRecordViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\View\AuthenticationStyleInformation' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\View\AuthenticationStyleInformation
     */
    protected function getAuthenticationStyleInformationService()
    {
        $this->services['TYPO3\\CMS\\Backend\\View\\AuthenticationStyleInformation'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\View\AuthenticationStyleInformation::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\ExtensionConfiguration::class));

        $instance->setLogger(($this->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $this->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Backend\\View\\AuthenticationStyleInformation'));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\View\BackendLayoutView' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\View\BackendLayoutView
     */
    protected function getBackendLayoutViewService()
    {
        return $this->services['TYPO3\\CMS\\Backend\\View\\BackendLayoutView'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\View\BackendLayoutView::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\View\BackendLayout\DataProviderCollection' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\View\BackendLayout\DataProviderCollection
     */
    protected function getDataProviderCollectionService()
    {
        return $this->services['TYPO3\\CMS\\Backend\\View\\BackendLayout\\DataProviderCollection'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\View\BackendLayout\DataProviderCollection::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\View\BackendLayout\DataProviderContext' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\View\BackendLayout\DataProviderContext
     */
    protected function getDataProviderContextService()
    {
        return $this->services['TYPO3\\CMS\\Backend\\View\\BackendLayout\\DataProviderContext'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\View\BackendLayout\DataProviderContext::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\View\BackendLayout\RecordRememberer' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\View\BackendLayout\RecordRememberer
     */
    protected function getRecordRemembererService()
    {
        return $this->services['TYPO3\\CMS\\Backend\\View\\BackendLayout\\RecordRememberer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\View\BackendLayout\RecordRememberer::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\View\BackendTemplateView' autowired service.
     *
     * @return \TYPO3\CMS\Backend\View\BackendTemplateView
     */
    protected function getBackendTemplateViewService()
    {
        $this->factories['TYPO3\\CMS\\Backend\\View\\BackendTemplateView'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\View\BackendTemplateView::class);

            $instance->injectModuleTemplate(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplate::class, ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class))), ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService()), ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())));
            $instance->injectTemplateView(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\View\TemplateView::class, NULL));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Backend\\View\\BackendTemplateView']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\View\PageLayoutView' autowired service.
     *
     * @return \TYPO3\CMS\Backend\View\PageLayoutView
     */
    protected function getPageLayoutViewService()
    {
        $this->factories['TYPO3\\CMS\\Backend\\View\\PageLayoutView'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\View\PageLayoutView::class);

            $instance->setLogger(($this->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $this->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Backend\\View\\PageLayoutView'));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Backend\\View\\PageLayoutView']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Backend\View\PageLayoutViewDrawEmptyColposContent' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\View\PageLayoutViewDrawEmptyColposContent
     */
    protected function getPageLayoutViewDrawEmptyColposContentService()
    {
        return $this->services['TYPO3\\CMS\\Backend\\View\\PageLayoutViewDrawEmptyColposContent'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\View\PageLayoutViewDrawEmptyColposContent::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Belog\Controller\BackendLogController' autowired service.
     *
     * @return \TYPO3\CMS\Belog\Controller\BackendLogController
     */
    protected function getBackendLogControllerService()
    {
        $this->factories['TYPO3\\CMS\\Belog\\Controller\\BackendLogController'] = function () {
            $a = ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService());

            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Belog\Controller\BackendLogController::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class))), ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService()), $a), ($this->services['TYPO3\\CMS\\Belog\\Domain\\Repository\\LogEntryRepository'] ?? $this->getLogEntryRepositoryService()), ($this->services['TYPO3\\CMS\\Belog\\Domain\\Repository\\WorkspaceRepository'] ?? $this->getWorkspaceRepositoryService()));

            $instance->injectResponseFactory(($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class))));
            $instance->injectStreamFactory(($this->services['Psr\\Http\\Message\\StreamFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\StreamFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class))));
            $instance->injectConfigurationManager(($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));
            $instance->injectObjectManager(($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));
            $instance->injectSignalSlotDispatcher(($this->services['TYPO3\\CMS\\Extbase\\SignalSlot\\Dispatcher'] ?? $this->getDispatcher2Service()));
            $instance->injectValidatorResolver(($this->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? $this->getValidatorResolverService()));
            $instance->injectViewResolver(($this->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ?? ($this->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $this))));
            $instance->injectReflectionService(($this->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? $this->getReflectionServiceService()));
            $instance->injectHashService(($this->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? $this->getHashServiceService()));
            $instance->injectMvcPropertyMappingConfigurationService(($this->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? $this->getMvcPropertyMappingConfigurationServiceService()));
            $instance->injectEventDispatcher(($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()));
            $instance->injectPropertyMapper(($this->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? $this->getPropertyMapperService()));
            $instance->injectInternalFlashMessageService($a);
            $instance->injectInternalExtensionService(($this->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? $this->getExtensionServiceService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Belog\\Controller\\BackendLogController']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Belog\Controller\SystemInformationController' shared autowired service.
     *
     * @return \TYPO3\CMS\Belog\Controller\SystemInformationController
     */
    protected function getSystemInformationControllerService()
    {
        return $this->services['TYPO3\\CMS\\Belog\\Controller\\SystemInformationController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Belog\Controller\SystemInformationController::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Belog\Domain\Repository\LogEntryRepository' shared autowired service.
     *
     * @return \TYPO3\CMS\Belog\Domain\Repository\LogEntryRepository
     */
    protected function getLogEntryRepositoryService()
    {
        $this->services['TYPO3\\CMS\\Belog\\Domain\\Repository\\LogEntryRepository'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Belog\Domain\Repository\LogEntryRepository::class, ($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));

        $instance->injectQuerySettings(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Typo3QuerySettings::class, ($this->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? $this->getContextService()), ($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService())));
        $instance->injectPersistenceManager(($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? $this->getPersistenceManagerService()));
        $instance->initializeObject();

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Belog\Domain\Repository\WorkspaceRepository' shared autowired service.
     *
     * @return \TYPO3\CMS\Belog\Domain\Repository\WorkspaceRepository
     */
    protected function getWorkspaceRepositoryService()
    {
        $this->services['TYPO3\\CMS\\Belog\\Domain\\Repository\\WorkspaceRepository'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Belog\Domain\Repository\WorkspaceRepository::class, ($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));

        $instance->injectQuerySettings(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Typo3QuerySettings::class, ($this->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? $this->getContextService()), ($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService())));
        $instance->injectPersistenceManager(($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? $this->getPersistenceManagerService()));
        $instance->initializeObject();

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Belog\ViewHelpers\Be\PagePathViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Belog\ViewHelpers\Be\PagePathViewHelper
     */
    protected function getPagePathViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Belog\\ViewHelpers\\Be\\PagePathViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Belog\ViewHelpers\Be\PagePathViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Belog\\ViewHelpers\\Be\\PagePathViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Belog\ViewHelpers\Form\TranslateLabelSelectViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Belog\ViewHelpers\Form\TranslateLabelSelectViewHelper
     */
    protected function getTranslateLabelSelectViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Belog\\ViewHelpers\\Form\\TranslateLabelSelectViewHelper'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Belog\ViewHelpers\Form\TranslateLabelSelectViewHelper::class);

            $instance->injectConfigurationManager(($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));
            $instance->injectPersistenceManager(($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? $this->getPersistenceManagerService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Belog\\ViewHelpers\\Form\\TranslateLabelSelectViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Belog\ViewHelpers\FormatDetailsViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Belog\ViewHelpers\FormatDetailsViewHelper
     */
    protected function getFormatDetailsViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Belog\\ViewHelpers\\FormatDetailsViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Belog\ViewHelpers\FormatDetailsViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Belog\\ViewHelpers\\FormatDetailsViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Belog\ViewHelpers\UsernameViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Belog\ViewHelpers\UsernameViewHelper
     */
    protected function getUsernameViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Belog\\ViewHelpers\\UsernameViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Belog\ViewHelpers\UsernameViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Belog\\ViewHelpers\\UsernameViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Belog\ViewHelpers\WorkspaceTitleViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Belog\ViewHelpers\WorkspaceTitleViewHelper
     */
    protected function getWorkspaceTitleViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Belog\\ViewHelpers\\WorkspaceTitleViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Belog\ViewHelpers\WorkspaceTitleViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Belog\\ViewHelpers\\WorkspaceTitleViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Beuser\Controller\BackendUserController' autowired service.
     *
     * @return \TYPO3\CMS\Beuser\Controller\BackendUserController
     */
    protected function getBackendUserControllerService()
    {
        $this->factories['TYPO3\\CMS\\Beuser\\Controller\\BackendUserController'] = function () {
            $a = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));
            $b = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());
            $c = ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService());

            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Beuser\Controller\BackendUserController::class, ($this->services['TYPO3\\CMS\\Beuser\\Domain\\Repository\\BackendUserRepository'] ?? $this->getBackendUserRepositoryService()), ($this->services['TYPO3\\CMS\\Beuser\\Domain\\Repository\\BackendUserGroupRepository'] ?? $this->getBackendUserGroupRepositoryService()), ($this->privates['TYPO3\\CMS\\Beuser\\Domain\\Repository\\BackendUserSessionRepository'] ?? ($this->privates['TYPO3\\CMS\\Beuser\\Domain\\Repository\\BackendUserSessionRepository'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Beuser\Domain\Repository\BackendUserSessionRepository::class))), ($this->privates['TYPO3\\CMS\\Beuser\\Service\\UserInformationService'] ?? $this->getUserInformationServiceService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $a, $b, $c), ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), $b, $a);

            $instance->injectResponseFactory(($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class))));
            $instance->injectStreamFactory(($this->services['Psr\\Http\\Message\\StreamFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\StreamFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class))));
            $instance->injectConfigurationManager(($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));
            $instance->injectObjectManager(($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));
            $instance->injectSignalSlotDispatcher(($this->services['TYPO3\\CMS\\Extbase\\SignalSlot\\Dispatcher'] ?? $this->getDispatcher2Service()));
            $instance->injectValidatorResolver(($this->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? $this->getValidatorResolverService()));
            $instance->injectViewResolver(($this->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ?? ($this->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $this))));
            $instance->injectReflectionService(($this->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? $this->getReflectionServiceService()));
            $instance->injectHashService(($this->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? $this->getHashServiceService()));
            $instance->injectMvcPropertyMappingConfigurationService(($this->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? $this->getMvcPropertyMappingConfigurationServiceService()));
            $instance->injectEventDispatcher(($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()));
            $instance->injectPropertyMapper(($this->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? $this->getPropertyMapperService()));
            $instance->injectInternalFlashMessageService($c);
            $instance->injectInternalExtensionService(($this->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? $this->getExtensionServiceService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Beuser\\Controller\\BackendUserController']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Beuser\Controller\PermissionController' shared autowired service.
     *
     * @return \TYPO3\CMS\Beuser\Controller\PermissionController
     */
    protected function getPermissionControllerService()
    {
        $a = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));
        $b = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());

        return $this->services['TYPO3\\CMS\\Beuser\\Controller\\PermissionController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Beuser\Controller\PermissionController::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $a, $b, ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())), $a, $b, ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), ($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class))));
    }

    /**
     * Gets the public 'TYPO3\CMS\Beuser\Domain\Repository\BackendUserGroupRepository' shared autowired service.
     *
     * @return \TYPO3\CMS\Beuser\Domain\Repository\BackendUserGroupRepository
     */
    protected function getBackendUserGroupRepositoryService()
    {
        $this->services['TYPO3\\CMS\\Beuser\\Domain\\Repository\\BackendUserGroupRepository'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Beuser\Domain\Repository\BackendUserGroupRepository::class, ($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));

        $instance->injectPersistenceManager(($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? $this->getPersistenceManagerService()));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Beuser\Domain\Repository\BackendUserRepository' shared autowired service.
     *
     * @return \TYPO3\CMS\Beuser\Domain\Repository\BackendUserRepository
     */
    protected function getBackendUserRepositoryService()
    {
        $this->services['TYPO3\\CMS\\Beuser\\Domain\\Repository\\BackendUserRepository'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Beuser\Domain\Repository\BackendUserRepository::class, ($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));

        $instance->injectPersistenceManager(($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? $this->getPersistenceManagerService()));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Beuser\ViewHelpers\ArrayElementViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Beuser\ViewHelpers\ArrayElementViewHelper
     */
    protected function getArrayElementViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Beuser\\ViewHelpers\\ArrayElementViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Beuser\ViewHelpers\ArrayElementViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Beuser\\ViewHelpers\\ArrayElementViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Beuser\ViewHelpers\Display\TableAccessViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Beuser\ViewHelpers\Display\TableAccessViewHelper
     */
    protected function getTableAccessViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Beuser\\ViewHelpers\\Display\\TableAccessViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Beuser\ViewHelpers\Display\TableAccessViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Beuser\\ViewHelpers\\Display\\TableAccessViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Beuser\ViewHelpers\MfaStatusViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Beuser\ViewHelpers\MfaStatusViewHelper
     */
    protected function getMfaStatusViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Beuser\\ViewHelpers\\MfaStatusViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Beuser\ViewHelpers\MfaStatusViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Beuser\\ViewHelpers\\MfaStatusViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Beuser\ViewHelpers\PermissionsViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Beuser\ViewHelpers\PermissionsViewHelper
     */
    protected function getPermissionsViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Beuser\\ViewHelpers\\PermissionsViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Beuser\ViewHelpers\PermissionsViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Beuser\\ViewHelpers\\PermissionsViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Beuser\ViewHelpers\SpriteIconForRecordViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Beuser\ViewHelpers\SpriteIconForRecordViewHelper
     */
    protected function getSpriteIconForRecordViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Beuser\\ViewHelpers\\SpriteIconForRecordViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Beuser\ViewHelpers\SpriteIconForRecordViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Beuser\\ViewHelpers\\SpriteIconForRecordViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Beuser\ViewHelpers\SwitchUserViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Beuser\ViewHelpers\SwitchUserViewHelper
     */
    protected function getSwitchUserViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Beuser\\ViewHelpers\\SwitchUserViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Beuser\ViewHelpers\SwitchUserViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Beuser\\ViewHelpers\\SwitchUserViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Authentication\GroupResolver' autowired service.
     *
     * @return \TYPO3\CMS\Core\Authentication\GroupResolver
     */
    protected function getGroupResolverService()
    {
        $this->factories['TYPO3\\CMS\\Core\\Authentication\\GroupResolver'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Authentication\GroupResolver::class, ($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()));
        };

        return $this->factories['TYPO3\\CMS\\Core\\Authentication\\GroupResolver']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Authentication\Mfa\MfaProviderRegistry' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Authentication\Mfa\MfaProviderRegistry
     */
    protected function getMfaProviderRegistryService()
    {
        $this->services['TYPO3\\CMS\\Core\\Authentication\\Mfa\\MfaProviderRegistry'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Authentication\Mfa\MfaProviderRegistry::class);

        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Authentication\Mfa\MfaProviderManifest::class, 'totp', 'LLL:EXT:core/Resources/Private/Language/locallang_mfa_provider.xlf:totp.title', 'LLL:EXT:core/Resources/Private/Language/locallang_mfa_provider.xlf:totp.description', 'LLL:EXT:core/Resources/Private/Language/locallang_mfa_provider.xlf:totp.setupInstructions', 'actions-qrcode', true, 'TYPO3\\CMS\\Core\\Authentication\\Mfa\\Provider\\TotpProvider', $this));
        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Authentication\Mfa\MfaProviderManifest::class, 'recovery-codes', 'LLL:EXT:core/Resources/Private/Language/locallang_mfa_provider.xlf:recoveryCodes.title', 'LLL:EXT:core/Resources/Private/Language/locallang_mfa_provider.xlf:recoveryCodes.description', 'LLL:EXT:core/Resources/Private/Language/locallang_mfa_provider.xlf:recoveryCodes.setupInstructions', 'content-text-columns', false, 'TYPO3\\CMS\\Core\\Authentication\\Mfa\\Provider\\RecoveryCodesProvider', $this));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Authentication\Mfa\Provider\RecoveryCodesProvider' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Authentication\Mfa\Provider\RecoveryCodesProvider
     */
    protected function getRecoveryCodesProviderService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Authentication\\Mfa\\Provider\\RecoveryCodesProvider'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Authentication\Mfa\Provider\RecoveryCodesProvider::class, ($this->services['TYPO3\\CMS\\Core\\Authentication\\Mfa\\MfaProviderRegistry'] ?? $this->getMfaProviderRegistryService()), ($this->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? $this->getContextService()), ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Authentication\Mfa\Provider\TotpProvider' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Authentication\Mfa\Provider\TotpProvider
     */
    protected function getTotpProviderService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Authentication\\Mfa\\Provider\\TotpProvider'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Authentication\Mfa\Provider\TotpProvider::class, ($this->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? $this->getContextService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Cache\CacheManager' shared service.
     *
     * @return \TYPO3\CMS\Core\Cache\CacheManager
     */
    protected function getCacheManagerService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Cache\\CacheManager'] = \TYPO3\CMS\Core\ServiceProvider::getCacheManager($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Cache\DatabaseSchemaService' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Cache\DatabaseSchemaService
     */
    protected function getDatabaseSchemaServiceService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Cache\\DatabaseSchemaService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Cache\DatabaseSchemaService::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Category\CategoryRegistry' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Category\CategoryRegistry
     */
    protected function getCategoryRegistryService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Category\\CategoryRegistry'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Category\CategoryRegistry::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Charset\CharsetConverter' shared service.
     *
     * @return \TYPO3\CMS\Core\Charset\CharsetConverter
     */
    protected function getCharsetConverterService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Charset\\CharsetConverter'] = \TYPO3\CMS\Core\ServiceProvider::getCharsetConverter($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Command\CacheFlushCommand' shared service.
     *
     * @return \TYPO3\CMS\Core\Command\CacheFlushCommand
     */
    protected function getCacheFlushCommandService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Command\\CacheFlushCommand'] = \TYPO3\CMS\Core\ServiceProvider::getCacheFlushCommand($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Command\CacheWarmupCommand' shared service.
     *
     * @return \TYPO3\CMS\Core\Command\CacheWarmupCommand
     */
    protected function getCacheWarmupCommandService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Command\\CacheWarmupCommand'] = \TYPO3\CMS\Core\ServiceProvider::getCacheWarmupCommand($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Command\DumpAutoloadCommand' shared service.
     *
     * @return \TYPO3\CMS\Core\Command\DumpAutoloadCommand
     */
    protected function getDumpAutoloadCommandService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Command\\DumpAutoloadCommand'] = \TYPO3\CMS\Core\ServiceProvider::getDumpAutoloadCommand($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Command\ExtensionListCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Command\ExtensionListCommand
     */
    protected function getExtensionListCommandService()
    {
        $this->services['TYPO3\\CMS\\Core\\Command\\ExtensionListCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Command\ExtensionListCommand::class, ($this->services['_early.TYPO3\\CMS\\Core\\Package\\PackageManager'] ?? $this->get('_early.TYPO3\\CMS\\Core\\Package\\PackageManager', 1)));

        $instance->setName('extension:list');
        $instance->setDescription('Shows the list of extensions available to the system');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Command\ListCommand' shared service.
     *
     * @return \TYPO3\CMS\Core\Command\ListCommand
     */
    protected function getListCommandService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Command\\ListCommand'] = \TYPO3\CMS\Core\ServiceProvider::getListCommand($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Command\SendEmailCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Command\SendEmailCommand
     */
    protected function getSendEmailCommandService()
    {
        $this->services['TYPO3\\CMS\\Core\\Command\\SendEmailCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Command\SendEmailCommand::class);

        $instance->setName('mailer:spool:send');
        $instance->setDescription('Sends emails from the spool');
        $instance->setAliases([0 => 'swiftmailer:spool:send']);

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Command\SiteListCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Command\SiteListCommand
     */
    protected function getSiteListCommandService()
    {
        $this->services['TYPO3\\CMS\\Core\\Command\\SiteListCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Command\SiteListCommand::class, ($this->privates['TYPO3\\CMS\\Core\\Site\\SiteFinder'] ?? $this->getSiteFinderService()));

        $instance->setName('site:list');
        $instance->setDescription('Shows the list of sites available to the system');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Command\SiteShowCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Command\SiteShowCommand
     */
    protected function getSiteShowCommandService()
    {
        $this->services['TYPO3\\CMS\\Core\\Command\\SiteShowCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Command\SiteShowCommand::class, ($this->privates['TYPO3\\CMS\\Core\\Site\\SiteFinder'] ?? $this->getSiteFinderService()));

        $instance->setName('site:show');
        $instance->setDescription('Shows the configuration of the specified site');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Composer\PackageArtifactBuilder' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Composer\PackageArtifactBuilder
     */
    protected function getPackageArtifactBuilderService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Composer\\PackageArtifactBuilder'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Composer\PackageArtifactBuilder::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Configuration\Loader\PageTsConfigLoader' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Configuration\Loader\PageTsConfigLoader
     */
    protected function getPageTsConfigLoaderService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Configuration\\Loader\\PageTsConfigLoader'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Configuration\Loader\PageTsConfigLoader::class, ($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Configuration\SiteConfiguration' shared service.
     *
     * @return \TYPO3\CMS\Core\Configuration\SiteConfiguration
     */
    protected function getSiteConfigurationService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Configuration\\SiteConfiguration'] = \TYPO3\CMS\Core\ServiceProvider::getSiteConfiguration($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Console\CommandApplication' shared service.
     *
     * @return \TYPO3\CMS\Core\Console\CommandApplication
     */
    protected function getCommandApplicationService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Console\\CommandApplication'] = \TYPO3\CMS\Core\ServiceProvider::getConsoleCommandApplication($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Console\CommandRegistry_decorated_2' shared service.
     *
     * @return \TYPO3\CMS\Core\Console\CommandRegistry
     */
    protected function getCommandRegistryDecorated2Service()
    {
        $a = \TYPO3\CMS\Core\ServiceProvider::getConsoleCommandRegistry($this);
        $a->addLazyCommand('extension:list', 'TYPO3\\CMS\\Core\\Command\\ExtensionListCommand', 'Shows the list of extensions available to the system', false, false, NULL);
        $a->addLazyCommand('mailer:spool:send', 'TYPO3\\CMS\\Core\\Command\\SendEmailCommand', 'Sends emails from the spool', false, true, NULL);
        $a->addLazyCommand('swiftmailer:spool:send', 'TYPO3\\CMS\\Core\\Command\\SendEmailCommand', 'Sends emails from the spool', false, false, 'mailer:spool:send');
        $a->addLazyCommand('site:list', 'TYPO3\\CMS\\Core\\Command\\SiteListCommand', 'Shows the list of sites available to the system', false, false, NULL);
        $a->addLazyCommand('site:show', 'TYPO3\\CMS\\Core\\Command\\SiteShowCommand', 'Shows the configuration of the specified site', false, false, NULL);
        $a->addLazyCommand('scheduler:run', 'TYPO3\\CMS\\Scheduler\\Command\\SchedulerCommand', 'Start the TYPO3 Scheduler from the command line.', false, false, NULL);
        $a->addLazyCommand('backend:lock', 'TYPO3\\CMS\\Backend\\Command\\LockBackendCommand', 'Lock the TYPO3 Backend', false, true, NULL);
        $a->addLazyCommand('referenceindex:update', 'TYPO3\\CMS\\Backend\\Command\\ReferenceIndexUpdateCommand', 'Update the reference index of TYPO3', false, true, NULL);
        $a->addLazyCommand('backend:resetpassword', 'TYPO3\\CMS\\Backend\\Command\\ResetPasswordCommand', 'Trigger a password reset for a backend user', false, false, NULL);
        $a->addLazyCommand('backend:unlock', 'TYPO3\\CMS\\Backend\\Command\\UnlockBackendCommand', 'Unlock the TYPO3 Backend', false, true, NULL);
        $a->addLazyCommand('redirects:checkintegrity', 'TYPO3\\CMS\\Redirects\\Command\\CheckIntegrityCommand', 'Check integrity of redirects', false, true, NULL);
        $a->addLazyCommand('redirects:cleanup', 'TYPO3\\CMS\\Redirects\\Command\\CleanupRedirectsCommand', 'Cleanup old redirects periodically for given constraints like days, hit count or domains.', false, true, NULL);
        $a->addLazyCommand('impexp:export', 'TYPO3\\CMS\\Impexp\\Command\\ExportCommand', 'Exports a T3D / XML file with content of a page tree', false, true, NULL);
        $a->addLazyCommand('impexp:import', 'TYPO3\\CMS\\Impexp\\Command\\ImportCommand', 'Imports a T3D / XML file with content into a page tree', false, true, NULL);
        $a->addLazyCommand('extension:activate', 'TYPO3\\CMS\\Extensionmanager\\Command\\ActivateExtensionCommand', 'Activates an extension by key', true, false, NULL);
        $a->addLazyCommand('extensionmanager:extension:install', 'TYPO3\\CMS\\Extensionmanager\\Command\\ActivateExtensionCommand', 'Activates an extension by key', true, false, 'extension:activate');
        $a->addLazyCommand('extension:install', 'TYPO3\\CMS\\Extensionmanager\\Command\\ActivateExtensionCommand', 'Activates an extension by key', true, false, 'extension:activate');
        $a->addLazyCommand('extension:deactivate', 'TYPO3\\CMS\\Extensionmanager\\Command\\DeactivateExtensionCommand', 'Deactivates an extension by key', true, false, NULL);
        $a->addLazyCommand('extensionmanager:extension:uninstall', 'TYPO3\\CMS\\Extensionmanager\\Command\\DeactivateExtensionCommand', 'Deactivates an extension by key', true, false, 'extension:deactivate');
        $a->addLazyCommand('extension:uninstall', 'TYPO3\\CMS\\Extensionmanager\\Command\\DeactivateExtensionCommand', 'Deactivates an extension by key', true, false, 'extension:deactivate');
        $a->addLazyCommand('extension:setup', 'TYPO3\\CMS\\Extensionmanager\\Command\\SetupExtensionsCommand', 'Set up extensions', false, false, NULL);
        $a->addLazyCommand('cleanup:flexforms', 'TYPO3\\CMS\\Lowlevel\\Command\\CleanFlexFormsCommand', 'Updates all database records which have a FlexForm field and the XML data does not match the chosen datastructure.', false, true, NULL);
        $a->addLazyCommand('cleanup:deletedrecords', 'TYPO3\\CMS\\Lowlevel\\Command\\DeletedRecordsCommand', 'Permanently deletes all records marked as "deleted" in the database.', false, true, NULL);
        $a->addLazyCommand('cleanup:multiplereferencedfiles', 'TYPO3\\CMS\\Lowlevel\\Command\\FilesWithMultipleReferencesCommand', 'Looking for files from TYPO3 managed records which are referenced more than once', false, true, NULL);
        $a->addLazyCommand('syslog:list', 'TYPO3\\CMS\\Lowlevel\\Command\\ListSysLogCommand', 'Show entries from the sys_log database table of the last 24 hours.', false, true, NULL);
        $a->addLazyCommand('cleanup:lostfiles', 'TYPO3\\CMS\\Lowlevel\\Command\\LostFilesCommand', 'Looking for files in the uploads/ folder which do not have a reference in TYPO3 managed records.', false, true, NULL);
        $a->addLazyCommand('cleanup:missingfiles', 'TYPO3\\CMS\\Lowlevel\\Command\\MissingFilesCommand', 'Find all file references from records pointing to a missing (non-existing) file.', false, true, NULL);
        $a->addLazyCommand('cleanup:missingrelations', 'TYPO3\\CMS\\Lowlevel\\Command\\MissingRelationsCommand', 'Find all record references pointing to a non-existing record', false, true, NULL);
        $a->addLazyCommand('cleanup:orphanrecords', 'TYPO3\\CMS\\Lowlevel\\Command\\OrphanRecordsCommand', 'Find and delete records that have lost their connection with the page tree.', false, true, NULL);
        $a->addLazyCommand('workspace:autopublish', 'TYPO3\\CMS\\Workspaces\\Command\\AutoPublishCommand', 'Publish a workspace with a publication date.', false, true, NULL);
        $a->addLazyCommand('cleanup:previewlinks', 'TYPO3\\CMS\\Workspaces\\Command\\CleanupPreviewLinksCommand', 'Clean up expired preview links from shared workspace previews.', false, true, NULL);
        $a->addLazyCommand('cleanup:versions', 'TYPO3\\CMS\\Workspaces\\Command\\WorkspaceVersionRecordsCommand', 'Find all versioned records and possibly cleans up invalid records in the database.', false, true, NULL);

        return $this->services['TYPO3\\CMS\\Core\\Console\\CommandRegistry_decorated_2'] = \TYPO3\CMS\Install\ServiceProvider::configureCommands($this, \TYPO3\CMS\Core\ServiceProvider::configureCommands($this, $a));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Context\Context' shared service.
     *
     * @return \TYPO3\CMS\Core\Context\Context
     */
    protected function getContextService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Context\\Context'] = \TYPO3\CMS\Core\ServiceProvider::getContext($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Controller\FileDumpController' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Controller\FileDumpController
     */
    protected function getFileDumpControllerService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Controller\\FileDumpController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Controller\FileDumpController::class, ($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()), ($this->services['TYPO3\\CMS\\Core\\Resource\\ResourceFactory'] ?? $this->getResourceFactoryService()), ($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class))));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Core\BootService' shared service.
     *
     * @return \TYPO3\CMS\Core\Core\BootService
     */
    protected function getBootServiceService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Core\\BootService'] = \TYPO3\CMS\Core\ServiceProvider::getBootService($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Core\ClassLoadingInformation' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Core\ClassLoadingInformation
     */
    protected function getClassLoadingInformationService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Core\\ClassLoadingInformation'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Core\ClassLoadingInformation::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Core\Event\WarmupBaseTcaCache' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Core\Event\WarmupBaseTcaCache
     */
    protected function getWarmupBaseTcaCacheService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Core\\Event\\WarmupBaseTcaCache'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Core\Event\WarmupBaseTcaCache::class, ($this->services['_early.cache.core'] ?? $this->get('_early.cache.core', 1)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Crypto\PasswordHashing\PasswordHashFactory' shared service.
     *
     * @return \TYPO3\CMS\Core\Crypto\PasswordHashing\PasswordHashFactory
     */
    protected function getPasswordHashFactoryService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Crypto\\PasswordHashing\\PasswordHashFactory'] = \TYPO3\CMS\Core\ServiceProvider::getPasswordHashFactory($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\DataHandling\SoftReference\EmailSoftReferenceParser' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\DataHandling\SoftReference\EmailSoftReferenceParser
     */
    protected function getEmailSoftReferenceParserService()
    {
        return $this->services['TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\EmailSoftReferenceParser'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\DataHandling\SoftReference\EmailSoftReferenceParser::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\DataHandling\SoftReference\ExtensionPathSoftReferenceParser' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\DataHandling\SoftReference\ExtensionPathSoftReferenceParser
     */
    protected function getExtensionPathSoftReferenceParserService()
    {
        return $this->services['TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\ExtensionPathSoftReferenceParser'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\DataHandling\SoftReference\ExtensionPathSoftReferenceParser::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\DataHandling\SoftReference\NotifySoftReferenceParser' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\DataHandling\SoftReference\NotifySoftReferenceParser
     */
    protected function getNotifySoftReferenceParserService()
    {
        return $this->services['TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\NotifySoftReferenceParser'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\DataHandling\SoftReference\NotifySoftReferenceParser::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\DataHandling\SoftReference\SoftReferenceParserFactory' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\DataHandling\SoftReference\SoftReferenceParserFactory
     */
    protected function getSoftReferenceParserFactoryService()
    {
        $this->services['TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\SoftReferenceParserFactory'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\DataHandling\SoftReference\SoftReferenceParserFactory::class, ($this->privates['cache.runtime'] ?? $this->getCache_RuntimeService()), ($this->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $this->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\SoftReferenceParserFactory'));

        $instance->addParser(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\DataHandling\SoftReference\EmailSoftReferenceParser::class), 'email');
        $instance->addParser(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\DataHandling\SoftReference\ExtensionPathSoftReferenceParser::class), 'ext_fileref');
        $instance->addParser(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\DataHandling\SoftReference\NotifySoftReferenceParser::class), 'notify');
        $instance->addParser(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\DataHandling\SoftReference\SubstituteSoftReferenceParser::class), 'substitute');
        $instance->addParser(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\DataHandling\SoftReference\TypolinkSoftReferenceParser::class, ($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service())), 'typolink');
        $instance->addParser(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\DataHandling\SoftReference\TypolinkTagSoftReferenceParser::class), 'typolink_tag');
        $instance->addParser(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\DataHandling\SoftReference\UrlSoftReferenceParser::class), 'url');
        $instance->addParser(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\SoftReference\FormPersistenceIdentifierSoftReferenceParser::class), 'formPersistenceIdentifier');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\DataHandling\SoftReference\SubstituteSoftReferenceParser' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\DataHandling\SoftReference\SubstituteSoftReferenceParser
     */
    protected function getSubstituteSoftReferenceParserService()
    {
        return $this->services['TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\SubstituteSoftReferenceParser'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\DataHandling\SoftReference\SubstituteSoftReferenceParser::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\DataHandling\SoftReference\TypolinkSoftReferenceParser' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\DataHandling\SoftReference\TypolinkSoftReferenceParser
     */
    protected function getTypolinkSoftReferenceParserService()
    {
        return $this->services['TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\TypolinkSoftReferenceParser'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\DataHandling\SoftReference\TypolinkSoftReferenceParser::class, ($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\DataHandling\SoftReference\TypolinkTagSoftReferenceParser' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\DataHandling\SoftReference\TypolinkTagSoftReferenceParser
     */
    protected function getTypolinkTagSoftReferenceParserService()
    {
        return $this->services['TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\TypolinkTagSoftReferenceParser'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\DataHandling\SoftReference\TypolinkTagSoftReferenceParser::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\DataHandling\SoftReference\UrlSoftReferenceParser' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\DataHandling\SoftReference\UrlSoftReferenceParser
     */
    protected function getUrlSoftReferenceParserService()
    {
        return $this->services['TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\UrlSoftReferenceParser'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\DataHandling\SoftReference\UrlSoftReferenceParser::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Database\ConnectionPool' shared service.
     *
     * @return \TYPO3\CMS\Core\Database\ConnectionPool
     */
    protected function getConnectionPoolService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] = \TYPO3\CMS\Core\ServiceProvider::getConnectionPool($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Database\Schema\SqlReader' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Database\Schema\SqlReader
     */
    protected function getSqlReaderService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Database\\Schema\\SqlReader'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Database\Schema\SqlReader::class, ($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()), ($this->services['_early.TYPO3\\CMS\\Core\\Package\\PackageManager'] ?? $this->get('_early.TYPO3\\CMS\\Core\\Package\\PackageManager', 1)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Database\SoftReferenceIndex' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Database\SoftReferenceIndex
     */
    protected function getSoftReferenceIndexService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Database\\SoftReferenceIndex'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Database\SoftReferenceIndex::class, ($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()), ($this->services['TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\SoftReferenceParserFactory'] ?? $this->getSoftReferenceParserFactoryService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Error\DebugExceptionHandler' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Error\DebugExceptionHandler
     */
    protected function getDebugExceptionHandlerService()
    {
        $this->services['TYPO3\\CMS\\Core\\Error\\DebugExceptionHandler'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Error\DebugExceptionHandler::class);

        $instance->setLogger(($this->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $this->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Core\\Error\\DebugExceptionHandler'));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Error\ProductionExceptionHandler' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Error\ProductionExceptionHandler
     */
    protected function getProductionExceptionHandlerService()
    {
        $this->services['TYPO3\\CMS\\Core\\Error\\ProductionExceptionHandler'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Error\ProductionExceptionHandler::class);

        $instance->setLogger(($this->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $this->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Core\\Error\\ProductionExceptionHandler'));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\EventDispatcher\EventDispatcher' shared service.
     *
     * @return \TYPO3\CMS\Core\EventDispatcher\EventDispatcher
     */
    protected function getEventDispatcher2Service()
    {
        return $this->services['TYPO3\\CMS\\Core\\EventDispatcher\\EventDispatcher'] = \TYPO3\CMS\Core\ServiceProvider::getEventDispatcher($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\EventDispatcher\ListenerProvider_decorated_3' shared service.
     *
     * @return \TYPO3\CMS\Core\EventDispatcher\ListenerProvider
     */
    protected function getListenerProviderDecorated3Service()
    {
        $a = \TYPO3\CMS\Core\ServiceProvider::getEventListenerProvider($this);
        $a->addListener('TYPO3\\CMS\\Core\\Database\\Event\\AlterTableDefinitionStatementsEvent', 'TYPO3\\CMS\\Core\\Cache\\DatabaseSchemaService', 'addCachingFrameworkDatabaseSchema');
        $a->addListener('TYPO3\\CMS\\Core\\Database\\Event\\AlterTableDefinitionStatementsEvent', 'TYPO3\\CMS\\Core\\Category\\CategoryRegistry', 'addCategoryDatabaseSchema');
        $a->addListener('TYPO3\\CMS\\Core\\Database\\Event\\AlterTableDefinitionStatementsEvent', 'TYPO3\\CMS\\IndexedSearch\\Service\\DatabaseSchemaService', 'addMysqlFulltextIndex');
        $a->addListener('TYPO3\\CMS\\Core\\Package\\Event\\AfterPackageActivationEvent', 'TYPO3\\CMS\\Core\\Core\\ClassLoadingInformation', 'updateClassLoadingInformationAfterPackageActivation');
        $a->addListener('TYPO3\\CMS\\Core\\Package\\Event\\AfterPackageDeactivationEvent', 'TYPO3\\CMS\\Core\\Core\\ClassLoadingInformation', 'updateClassLoadingInformationAfterPackageDeactivation');
        $a->addListener('TYPO3\\CMS\\Core\\Cache\\Event\\CacheWarmupEvent', 'TYPO3\\CMS\\Core\\ExpressionLanguage\\ProviderConfigurationLoader', 'warmupCaches');
        $a->addListener('TYPO3\\CMS\\Core\\Cache\\Event\\CacheWarmupEvent', 'TYPO3\\CMS\\Core\\Localization\\CacheWarmer', 'warmupCaches');
        $a->addListener('TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileMetaDataUpdatedEvent', 'TYPO3\\CMS\\Core\\Resource\\MetaDataEventListener', 'afterFileMetaDataUpdated');
        $a->addListener('TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileAddedEvent', 'TYPO3\\CMS\\Core\\Resource\\Processing\\FileDeletionAspect', 'cleanupProcessedFilesPostFileAdd');
        $a->addListener('TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileReplacedEvent', 'TYPO3\\CMS\\Core\\Resource\\Processing\\FileDeletionAspect', 'cleanupProcessedFilesPostFileReplace');
        $a->addListener('TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileDeletedEvent', 'TYPO3\\CMS\\Core\\Resource\\Processing\\FileDeletionAspect', 'removeFromRepositoryAfterFileDeleted');
        $a->addListener('TYPO3\\CMS\\Core\\Resource\\Event\\AfterResourceStorageInitializationEvent', 'TYPO3\\CMS\\Core\\Resource\\Security\\StoragePermissionsAspect', 'addUserPermissionsToStorage');
        $a->addListener('TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFileAddedEvent', 'TYPO3\\CMS\\Form\\Slot\\FilePersistenceSlot', 'onPreFileAdd');
        $a->addListener('TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFileAddedEvent', 'TYPO3\\CMS\\Core\\Resource\\Security\\SvgEventListener', 'beforeFileAdded');
        $a->addListener('TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFileReplacedEvent', 'TYPO3\\CMS\\Form\\Slot\\FilePersistenceSlot', 'onPreFileReplace');
        $a->addListener('TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFileReplacedEvent', 'TYPO3\\CMS\\Core\\Resource\\Security\\SvgEventListener', 'beforeFileReplaced');
        $a->addListener('TYPO3\\CMS\\Core\\Resource\\Event\\AfterFileContentsSetEvent', 'TYPO3\\CMS\\Core\\Resource\\Security\\SvgEventListener', 'afterFileContentsSet');
        $a->addListener('TYPO3\\CMS\\Core\\Resource\\Event\\AfterFolderRenamedEvent', 'TYPO3\\CMS\\Core\\Resource\\SynchronizeFolderRelations', 'synchronizeFileCollectionsAfterRename');
        $a->addListener('TYPO3\\CMS\\Core\\Resource\\Event\\AfterFolderRenamedEvent', 'TYPO3\\CMS\\Core\\Resource\\SynchronizeFolderRelations', 'synchronizeFilemountsAfterRename');
        $a->addListener('TYPO3\\CMS\\Backend\\Backend\\Event\\SystemInformationToolbarCollectorEvent', 'TYPO3\\CMS\\Belog\\Controller\\SystemInformationController', 'appendMessage');
        $a->addListener('TYPO3\\CMS\\Backend\\Backend\\Event\\SystemInformationToolbarCollectorEvent', 'TYPO3\\CMS\\Scheduler\\SystemInformation\\ToolbarItemProvider', 'getItem');
        $a->addListener('TYPO3\\CMS\\Recordlist\\Event\\RenderAdditionalContentToRecordListEvent', 'TYPO3\\CMS\\SysNote\\Provider\\RecordListProvider', NULL);
        $a->addListener('TYPO3\\CMS\\Recordlist\\Event\\RenderAdditionalContentToRecordListEvent', 'TYPO3\\CMS\\Recordlist\\HookProvider\\AddToRecordListHookProvider', NULL);
        $a->addListener('TYPO3\\CMS\\Core\\Tree\\Event\\ModifyTreeDataEvent', 'TYPO3\\CMS\\Backend\\Security\\CategoryPermissionsAspect', 'addUserPermissionsToCategoryTreeData');
        $a->addListener('TYPO3\\CMS\\Backend\\View\\Event\\AfterSectionMarkupGeneratedEvent', 'TYPO3\\CMS\\Backend\\View\\PageLayoutViewDrawEmptyColposContent', NULL);
        $a->addListener('TYPO3\\CMS\\Core\\Resource\\Event\\EnrichFileMetaDataEvent', 'TYPO3\\CMS\\Frontend\\Aspect\\FileMetadataOverlayAspect', 'languageAndWorkspaceOverlay');
        $a->addListener('TYPO3\\CMS\\Backend\\History\\Event\\BeforeHistoryRollbackStartEvent', 'TYPO3\\CMS\\Redirects\\EventListener\\RecordHistoryRollbackEventsListener', 'beforeHistoryRollbackStartEvent');
        $a->addListener('TYPO3\\CMS\\Backend\\History\\Event\\AfterHistoryRollbackFinishedEvent', 'TYPO3\\CMS\\Redirects\\EventListener\\RecordHistoryRollbackEventsListener', 'afterHistoryRollbackFinishedEvent');
        $a->addListener('TYPO3\\CMS\\Filelist\\Event\\ProcessFileListActionsEvent', 'TYPO3\\CMS\\Form\\EventListener\\ProcessFileListActionsEventListener', NULL);
        $a->addListener('TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFileCreatedEvent', 'TYPO3\\CMS\\Form\\Slot\\FilePersistenceSlot', 'onPreFileCreate');
        $a->addListener('TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFileRenamedEvent', 'TYPO3\\CMS\\Form\\Slot\\FilePersistenceSlot', 'onPreFileRename');
        $a->addListener('TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFileMovedEvent', 'TYPO3\\CMS\\Form\\Slot\\FilePersistenceSlot', 'onPreFileMove');
        $a->addListener('TYPO3\\CMS\\Core\\Resource\\Event\\BeforeFileContentsSetEvent', 'TYPO3\\CMS\\Form\\Slot\\FilePersistenceSlot', 'onPreFileSetContents');
        $a->addListener('TYPO3\\CMS\\Core\\Resource\\Event\\GeneratePublicUrlForResourceEvent', 'TYPO3\\CMS\\Form\\Slot\\ResourcePublicationSlot', 'getPublicUrl');
        $a->addListener('TYPO3\\CMS\\Core\\Html\\Event\\BrokenLinkAnalysisEvent', 'TYPO3\\CMS\\Linkvalidator\\EventListener\\CheckBrokenRteLinkEventListener', 'checkExternalLink');
        $a->addListener('TYPO3\\CMS\\Core\\Html\\Event\\BrokenLinkAnalysisEvent', 'TYPO3\\CMS\\Linkvalidator\\EventListener\\CheckBrokenRteLinkEventListener', 'checkFileLink');
        $a->addListener('TYPO3\\CMS\\Core\\Html\\Event\\BrokenLinkAnalysisEvent', 'TYPO3\\CMS\\Linkvalidator\\EventListener\\CheckBrokenRteLinkEventListener', 'checkPageLink');
        $a->addListener('TYPO3\\CMS\\Frontend\\Event\\ModifyHrefLangTagsEvent', 'TYPO3\\CMS\\Seo\\HrefLang\\HrefLangGenerator', NULL);

        return $this->services['TYPO3\\CMS\\Core\\EventDispatcher\\ListenerProvider_decorated_3'] = \TYPO3\CMS\Dashboard\ServiceProvider::addEventListeners($this, \TYPO3\CMS\Backend\ServiceProvider::addEventListeners($this, \TYPO3\CMS\Core\ServiceProvider::extendEventListenerProvider($this, $a)));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\ExpressionLanguage\ProviderConfigurationLoader' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\ExpressionLanguage\ProviderConfigurationLoader
     */
    protected function getProviderConfigurationLoaderService()
    {
        return $this->services['TYPO3\\CMS\\Core\\ExpressionLanguage\\ProviderConfigurationLoader'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\ExpressionLanguage\ProviderConfigurationLoader::class, ($this->services['_early.TYPO3\\CMS\\Core\\Package\\PackageManager'] ?? $this->get('_early.TYPO3\\CMS\\Core\\Package\\PackageManager', 1)), ($this->services['_early.cache.core'] ?? $this->get('_early.cache.core', 1)), ($this->services['TYPO3\\CMS\\Core\\Package\\Cache\\PackageDependentCacheIdentifier'] ?? $this->getPackageDependentCacheIdentifierService())->withPrefix("ExpressionLanguageProviders")->toString());
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Html\RteHtmlParser' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Html\RteHtmlParser
     */
    protected function getRteHtmlParserService()
    {
        $this->services['TYPO3\\CMS\\Core\\Html\\RteHtmlParser'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Html\RteHtmlParser::class, ($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()));

        $instance->setLogger(($this->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $this->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Core\\Html\\RteHtmlParser'));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Http\MiddlewareStackResolver' shared service.
     *
     * @return \TYPO3\CMS\Core\Http\MiddlewareStackResolver
     */
    protected function getMiddlewareStackResolverService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Http\\MiddlewareStackResolver'] = \TYPO3\CMS\Core\ServiceProvider::getMiddlewareStackResolver($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Http\RequestFactory' shared service.
     *
     * @return \TYPO3\CMS\Core\Http\RequestFactory
     */
    protected function getRequestFactoryService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Http\\RequestFactory'] = \TYPO3\CMS\Core\ServiceProvider::getRequestFactory($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Imaging\IconFactory' shared service.
     *
     * @return \TYPO3\CMS\Core\Imaging\IconFactory
     */
    protected function getIconFactoryService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] = \TYPO3\CMS\Core\ServiceProvider::getIconFactory($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Imaging\IconProvider\FontawesomeIconProvider' shared service.
     *
     * @return \TYPO3\CMS\Core\Imaging\IconProvider\FontawesomeIconProvider
     */
    protected function getFontawesomeIconProviderService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Imaging\\IconProvider\\FontawesomeIconProvider'] = \TYPO3\CMS\Core\ServiceProvider::getFontawesomeIconProvider($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Imaging\IconRegistry_decorated_1' shared service.
     *
     * @return \TYPO3\CMS\Core\Imaging\IconRegistry
     */
    protected function getIconRegistryDecorated1Service()
    {
        return $this->services['TYPO3\\CMS\\Core\\Imaging\\IconRegistry_decorated_1'] = \TYPO3\CMS\Core\ServiceProvider::configureIconRegistry($this, \TYPO3\CMS\Core\ServiceProvider::getIconRegistry($this));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\LinkHandling\LinkService' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\LinkHandling\LinkService
     */
    protected function getLinkServiceService()
    {
        return $this->services['TYPO3\\CMS\\Core\\LinkHandling\\LinkService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\LinkHandling\LinkService::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Localization\CacheWarmer' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Localization\CacheWarmer
     */
    protected function getCacheWarmerService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Localization\\CacheWarmer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Localization\CacheWarmer::class, ($this->services['_early.TYPO3\\CMS\\Core\\Package\\PackageManager'] ?? $this->get('_early.TYPO3\\CMS\\Core\\Package\\PackageManager', 1)), ($this->services['TYPO3\\CMS\\Core\\Localization\\LocalizationFactory'] ?? $this->getLocalizationFactoryService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Localization\LanguageService' autowired service.
     *
     * @return \TYPO3\CMS\Core\Localization\LanguageService
     *
     * @deprecated Since typo3/cms-core 11.3: Injection/Instantiation of "TYPO3\CMS\Core\Localization\LanguageService" is deprecated. Please use TYPO3\CMS\Core\Localization\LanguageServiceFactory->create().
     */
    protected function getLanguageServiceService()
    {
        trigger_deprecation('typo3/cms-core', '11.3', 'Injection/Instantiation of "TYPO3\\CMS\\Core\\Localization\\LanguageService" is deprecated. Please use TYPO3\\CMS\\Core\\Localization\\LanguageServiceFactory->create().');

        $this->factories['TYPO3\\CMS\\Core\\Localization\\LanguageService'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Localization\LanguageService::class, ($this->services['TYPO3\\CMS\\Core\\Localization\\Locales'] ?? $this->getLocalesService()), ($this->services['TYPO3\\CMS\\Core\\Localization\\LocalizationFactory'] ?? $this->getLocalizationFactoryService()), ($this->privates['cache.runtime'] ?? $this->getCache_RuntimeService()));
        };

        return $this->factories['TYPO3\\CMS\\Core\\Localization\\LanguageService']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Localization\LanguageServiceFactory' shared service.
     *
     * @return \TYPO3\CMS\Core\Localization\LanguageServiceFactory
     */
    protected function getLanguageServiceFactoryService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Localization\\LanguageServiceFactory'] = \TYPO3\CMS\Core\ServiceProvider::getLanguageServiceFactory($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Localization\LanguageStore' shared service.
     *
     * @return \TYPO3\CMS\Core\Localization\LanguageStore
     */
    protected function getLanguageStoreService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Localization\\LanguageStore'] = \TYPO3\CMS\Core\ServiceProvider::getLanguageStore($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Localization\Locales' shared service.
     *
     * @return \TYPO3\CMS\Core\Localization\Locales
     */
    protected function getLocalesService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Localization\\Locales'] = \TYPO3\CMS\Core\ServiceProvider::getLocales($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Localization\LocalizationFactory' shared service.
     *
     * @return \TYPO3\CMS\Core\Localization\LocalizationFactory
     */
    protected function getLocalizationFactoryService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Localization\\LocalizationFactory'] = \TYPO3\CMS\Core\ServiceProvider::getLocalizationFactory($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Localization\TcaSystemLanguageCollector' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Localization\TcaSystemLanguageCollector
     */
    protected function getTcaSystemLanguageCollectorService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Localization\\TcaSystemLanguageCollector'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Localization\TcaSystemLanguageCollector::class, ($this->services['TYPO3\\CMS\\Core\\Localization\\Locales'] ?? $this->getLocalesService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Locking\LockFactory' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Locking\LockFactory
     */
    protected function getLockFactoryService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Locking\\LockFactory'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Locking\LockFactory::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Mail\Mailer' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Mail\Mailer
     */
    protected function getMailerService()
    {
        $this->services['TYPO3\\CMS\\Core\\Mail\\Mailer'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Mail\Mailer::class, NULL, ($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()));

        $instance->injectMailSettings();

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Mail\MemorySpool' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Mail\MemorySpool
     */
    protected function getMemorySpoolService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Mail\\MemorySpool'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Mail\MemorySpool::class, ($this->services['TYPO3\\SymfonyPsrEventDispatcherAdapter\\EventDispatcherAdapter'] ?? $this->getEventDispatcherAdapterService()), ($this->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $this->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Core\\Mail\\MemorySpool'));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Mail\TransportFactory' shared service.
     *
     * @return \TYPO3\CMS\Core\Mail\TransportFactory
     */
    protected function getTransportFactoryService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Mail\\TransportFactory'] = \TYPO3\CMS\Core\ServiceProvider::getMailTransportFactory($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Messaging\FlashMessageService' shared service.
     *
     * @return \TYPO3\CMS\Core\Messaging\FlashMessageService
     */
    protected function getFlashMessageServiceService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] = \TYPO3\CMS\Core\ServiceProvider::getFlashMessageService($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\MetaTag\MetaTagManagerRegistry' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\MetaTag\MetaTagManagerRegistry
     */
    protected function getMetaTagManagerRegistryService()
    {
        return $this->services['TYPO3\\CMS\\Core\\MetaTag\\MetaTagManagerRegistry'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\MetaTag\MetaTagManagerRegistry::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Middleware\NormalizedParamsAttribute' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Middleware\NormalizedParamsAttribute
     */
    protected function getNormalizedParamsAttributeService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Middleware\\NormalizedParamsAttribute'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Middleware\NormalizedParamsAttribute::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Middleware\ResponsePropagation' shared service.
     *
     * @return \TYPO3\CMS\Core\Middleware\ResponsePropagation
     */
    protected function getResponsePropagationService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Middleware\\ResponsePropagation'] = \TYPO3\CMS\Core\ServiceProvider::getResponsePropagationMiddleware($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Middleware\VerifyHostHeader' shared service.
     *
     * @return \TYPO3\CMS\Core\Middleware\VerifyHostHeader
     */
    protected function getVerifyHostHeaderService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Middleware\\VerifyHostHeader'] = \TYPO3\CMS\Core\ServiceProvider::getVerifyHostHeaderMiddleware($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Package\Cache\PackageDependentCacheIdentifier' shared service.
     *
     * @return \TYPO3\CMS\Core\Package\Cache\PackageDependentCacheIdentifier
     */
    protected function getPackageDependentCacheIdentifierService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Package\\Cache\\PackageDependentCacheIdentifier'] = \TYPO3\CMS\Core\ServiceProvider::getPackageDependentCacheIdentifier($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Package\FailsafePackageManager' shared service.
     *
     * @return \TYPO3\CMS\Core\Package\FailsafePackageManager
     */
    protected function getFailsafePackageManagerService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Package\\FailsafePackageManager'] = \TYPO3\CMS\Core\ServiceProvider::getFailsafePackageManager($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\PageTitle\PageTitleProviderManager' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\PageTitle\PageTitleProviderManager
     */
    protected function getPageTitleProviderManagerService()
    {
        $this->services['TYPO3\\CMS\\Core\\PageTitle\\PageTitleProviderManager'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\PageTitle\PageTitleProviderManager::class);

        $instance->setLogger(($this->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $this->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Core\\PageTitle\\PageTitleProviderManager'));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\PageTitle\RecordPageTitleProvider' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\PageTitle\RecordPageTitleProvider
     */
    protected function getRecordPageTitleProviderService()
    {
        return $this->services['TYPO3\\CMS\\Core\\PageTitle\\RecordPageTitleProvider'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\PageTitle\RecordPageTitleProvider::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Page\AssetCollector' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Page\AssetCollector
     */
    protected function getAssetCollectorService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Page\\AssetCollector'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\AssetCollector::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Page\AssetRenderer' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Page\AssetRenderer
     */
    protected function getAssetRendererService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Page\\AssetRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\AssetRenderer::class, ($this->services['TYPO3\\CMS\\Core\\Page\\AssetCollector'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\AssetCollector'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\AssetCollector::class))), ($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Page\PageRenderer' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Page\PageRenderer
     */
    protected function getPageRendererService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\RateLimiter\RateLimiterFactory' autowired service.
     *
     * @return \TYPO3\CMS\Core\RateLimiter\RateLimiterFactory
     */
    protected function getRateLimiterFactoryService()
    {
        $this->factories['TYPO3\\CMS\\Core\\RateLimiter\\RateLimiterFactory'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\RateLimiter\RateLimiterFactory::class);
        };

        return $this->factories['TYPO3\\CMS\\Core\\RateLimiter\\RateLimiterFactory']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\RateLimiter\Storage\CachingFrameworkStorage' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\RateLimiter\Storage\CachingFrameworkStorage
     */
    protected function getCachingFrameworkStorageService()
    {
        return $this->services['TYPO3\\CMS\\Core\\RateLimiter\\Storage\\CachingFrameworkStorage'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\RateLimiter\Storage\CachingFrameworkStorage::class, ($this->services['TYPO3\\CMS\\Core\\Cache\\CacheManager'] ?? $this->getCacheManagerService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Registry' shared service.
     *
     * @return \TYPO3\CMS\Core\Registry
     */
    protected function getRegistryService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Registry'] = \TYPO3\CMS\Core\ServiceProvider::getRegistry($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\Collection\FileCollectionRegistry' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\Collection\FileCollectionRegistry
     */
    protected function getFileCollectionRegistryService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Resource\\Collection\\FileCollectionRegistry'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\Collection\FileCollectionRegistry::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\Driver\DriverRegistry' shared service.
     *
     * @return \TYPO3\CMS\Core\Resource\Driver\DriverRegistry
     */
    protected function getDriverRegistryService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Resource\\Driver\\DriverRegistry'] = \TYPO3\CMS\Core\ServiceProvider::getDriverRegistry($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\FileRepository' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\FileRepository
     */
    protected function getFileRepositoryService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Resource\\FileRepository'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\FileRepository::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\Index\ExtractorRegistry' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\Index\ExtractorRegistry
     */
    protected function getExtractorRegistryService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Resource\\Index\\ExtractorRegistry'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\Index\ExtractorRegistry::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\Index\FileIndexRepository' shared service.
     *
     * @return \TYPO3\CMS\Core\Resource\Index\FileIndexRepository
     */
    protected function getFileIndexRepositoryService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Resource\\Index\\FileIndexRepository'] = \TYPO3\CMS\Core\ServiceProvider::getFileIndexRepository($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\Index\MetaDataRepository' shared service.
     *
     * @return \TYPO3\CMS\Core\Resource\Index\MetaDataRepository
     */
    protected function getMetaDataRepositoryService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Resource\\Index\\MetaDataRepository'] = \TYPO3\CMS\Core\ServiceProvider::getMetaDataRepository($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\MetaDataEventListener' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\MetaDataEventListener
     */
    protected function getMetaDataEventListenerService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Resource\\MetaDataEventListener'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\MetaDataEventListener::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\OnlineMedia\Helpers\OnlineMediaHelperRegistry' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\OnlineMedia\Helpers\OnlineMediaHelperRegistry
     */
    protected function getOnlineMediaHelperRegistryService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Resource\\OnlineMedia\\Helpers\\OnlineMediaHelperRegistry'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\OnlineMedia\Helpers\OnlineMediaHelperRegistry::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\ProcessedFileRepository' shared service.
     *
     * @return \TYPO3\CMS\Core\Resource\ProcessedFileRepository
     */
    protected function getProcessedFileRepositoryService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Resource\\ProcessedFileRepository'] = \TYPO3\CMS\Core\ServiceProvider::getProcessedFileRepository($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\Processing\FileDeletionAspect' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\Processing\FileDeletionAspect
     */
    protected function getFileDeletionAspectService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Resource\\Processing\\FileDeletionAspect'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\Processing\FileDeletionAspect::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\Processing\ProcessorRegistry' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\Processing\ProcessorRegistry
     */
    protected function getProcessorRegistryService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Resource\\Processing\\ProcessorRegistry'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\Processing\ProcessorRegistry::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\Processing\TaskTypeRegistry' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\Processing\TaskTypeRegistry
     */
    protected function getTaskTypeRegistryService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Resource\\Processing\\TaskTypeRegistry'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\Processing\TaskTypeRegistry::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\Rendering\AudioTagRenderer' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\Rendering\AudioTagRenderer
     */
    protected function getAudioTagRendererService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Resource\\Rendering\\AudioTagRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\Rendering\AudioTagRenderer::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\Rendering\RendererRegistry' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\Rendering\RendererRegistry
     */
    protected function getRendererRegistryService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Resource\\Rendering\\RendererRegistry'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\Rendering\RendererRegistry::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\Rendering\VideoTagRenderer' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\Rendering\VideoTagRenderer
     */
    protected function getVideoTagRendererService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Resource\\Rendering\\VideoTagRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\Rendering\VideoTagRenderer::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\Rendering\VimeoRenderer' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\Rendering\VimeoRenderer
     */
    protected function getVimeoRendererService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Resource\\Rendering\\VimeoRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\Rendering\VimeoRenderer::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\Rendering\YouTubeRenderer' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\Rendering\YouTubeRenderer
     */
    protected function getYouTubeRendererService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Resource\\Rendering\\YouTubeRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\Rendering\YouTubeRenderer::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\ResourceFactory' shared service.
     *
     * @return \TYPO3\CMS\Core\Resource\ResourceFactory
     */
    protected function getResourceFactoryService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Resource\\ResourceFactory'] = \TYPO3\CMS\Core\ServiceProvider::getResourceFactory($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\Security\FileMetadataPermissionsAspect' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\Security\FileMetadataPermissionsAspect
     */
    protected function getFileMetadataPermissionsAspectService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Resource\\Security\\FileMetadataPermissionsAspect'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\Security\FileMetadataPermissionsAspect::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\Security\StoragePermissionsAspect' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\Security\StoragePermissionsAspect
     */
    protected function getStoragePermissionsAspectService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Resource\\Security\\StoragePermissionsAspect'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\Security\StoragePermissionsAspect::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\Security\SvgEventListener' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\Security\SvgEventListener
     */
    protected function getSvgEventListenerService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Resource\\Security\\SvgEventListener'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\Security\SvgEventListener::class, ($this->privates['TYPO3\\CMS\\Core\\Resource\\Security\\SvgSanitizer'] ?? ($this->privates['TYPO3\\CMS\\Core\\Resource\\Security\\SvgSanitizer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\Security\SvgSanitizer::class))), ($this->services['TYPO3\\CMS\\Core\\Resource\\Security\\SvgTypeCheck'] ?? $this->getSvgTypeCheckService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\Security\SvgHookHandler' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\Security\SvgHookHandler
     */
    protected function getSvgHookHandlerService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Resource\\Security\\SvgHookHandler'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\Security\SvgHookHandler::class, ($this->privates['TYPO3\\CMS\\Core\\Resource\\Security\\SvgSanitizer'] ?? ($this->privates['TYPO3\\CMS\\Core\\Resource\\Security\\SvgSanitizer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\Security\SvgSanitizer::class))), ($this->services['TYPO3\\CMS\\Core\\Resource\\Security\\SvgTypeCheck'] ?? $this->getSvgTypeCheckService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\Security\SvgTypeCheck' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\Security\SvgTypeCheck
     */
    protected function getSvgTypeCheckService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Resource\\Security\\SvgTypeCheck'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\Security\SvgTypeCheck::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\MimeTypeDetector::class));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\StorageRepository' shared service.
     *
     * @return \TYPO3\CMS\Core\Resource\StorageRepository
     */
    protected function getStorageRepositoryService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Resource\\StorageRepository'] = \TYPO3\CMS\Core\ServiceProvider::getStorageRepository($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\SynchronizeFolderRelations' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\SynchronizeFolderRelations
     */
    protected function getSynchronizeFolderRelationsService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Resource\\SynchronizeFolderRelations'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\SynchronizeFolderRelations::class, ($this->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? $this->getConnectionPoolService()), ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Resource\TextExtraction\TextExtractorRegistry' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\TextExtraction\TextExtractorRegistry
     */
    protected function getTextExtractorRegistryService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Resource\\TextExtraction\\TextExtractorRegistry'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\TextExtraction\TextExtractorRegistry::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Routing\SiteMatcher' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Routing\SiteMatcher
     */
    protected function getSiteMatcherService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Routing\\SiteMatcher'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Routing\SiteMatcher::class, ($this->privates['TYPO3\\CMS\\Core\\Site\\SiteFinder'] ?? $this->getSiteFinderService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Service\DependencyOrderingService' shared service.
     *
     * @return \TYPO3\CMS\Core\Service\DependencyOrderingService
     */
    protected function getDependencyOrderingServiceService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Service\\DependencyOrderingService'] = \TYPO3\CMS\Core\ServiceProvider::getDependencyOrderingService($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Service\FlexFormService' shared service.
     *
     * @return \TYPO3\CMS\Core\Service\FlexFormService
     */
    protected function getFlexFormServiceService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Service\\FlexFormService'] = \TYPO3\CMS\Core\ServiceProvider::getFlexFormService($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Service\OpcodeCacheService' shared service.
     *
     * @return \TYPO3\CMS\Core\Service\OpcodeCacheService
     */
    protected function getOpcodeCacheServiceService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Service\\OpcodeCacheService'] = \TYPO3\CMS\Core\ServiceProvider::getOpcodeCacheService($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Session\SessionManager' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Session\SessionManager
     */
    protected function getSessionManagerService()
    {
        return $this->services['TYPO3\\CMS\\Core\\Session\\SessionManager'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Session\SessionManager::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\TimeTracker\TimeTracker' shared service.
     *
     * @return \TYPO3\CMS\Core\TimeTracker\TimeTracker
     */
    protected function getTimeTrackerService()
    {
        return $this->services['TYPO3\\CMS\\Core\\TimeTracker\\TimeTracker'] = \TYPO3\CMS\Core\ServiceProvider::getTimeTracker($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\Tree\TableConfiguration\DatabaseTreeDataProvider' autowired service.
     *
     * @return \TYPO3\CMS\Core\Tree\TableConfiguration\DatabaseTreeDataProvider
     */
    protected function getDatabaseTreeDataProviderService()
    {
        $this->factories['TYPO3\\CMS\\Core\\Tree\\TableConfiguration\\DatabaseTreeDataProvider'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Tree\TableConfiguration\DatabaseTreeDataProvider::class, ($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()));
        };

        return $this->factories['TYPO3\\CMS\\Core\\Tree\\TableConfiguration\\DatabaseTreeDataProvider']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\TypoScript\Parser\ConstantConfigurationParser' shared service.
     *
     * @return \TYPO3\CMS\Core\TypoScript\Parser\ConstantConfigurationParser
     */
    protected function getConstantConfigurationParserService()
    {
        return $this->services['TYPO3\\CMS\\Core\\TypoScript\\Parser\\ConstantConfigurationParser'] = \TYPO3\CMS\Core\ServiceProvider::getTypoScriptConstantConfigurationParser($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\TypoScript\TypoScriptService' shared service.
     *
     * @return \TYPO3\CMS\Core\TypoScript\TypoScriptService
     */
    protected function getTypoScriptServiceService()
    {
        return $this->services['TYPO3\\CMS\\Core\\TypoScript\\TypoScriptService'] = \TYPO3\CMS\Core\ServiceProvider::getTypoScriptService($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\ViewHelpers\Form\TypoScriptConstantsViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Core\ViewHelpers\Form\TypoScriptConstantsViewHelper
     */
    protected function getTypoScriptConstantsViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Core\\ViewHelpers\\Form\\TypoScriptConstantsViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\ViewHelpers\Form\TypoScriptConstantsViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Core\\ViewHelpers\\Form\\TypoScriptConstantsViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\ViewHelpers\IconForRecordViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Core\ViewHelpers\IconForRecordViewHelper
     */
    protected function getIconForRecordViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Core\\ViewHelpers\\IconForRecordViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\ViewHelpers\IconForRecordViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Core\\ViewHelpers\\IconForRecordViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\ViewHelpers\IconForResourceViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Core\ViewHelpers\IconForResourceViewHelper
     */
    protected function getIconForResourceViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Core\\ViewHelpers\\IconForResourceViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\ViewHelpers\IconForResourceViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Core\\ViewHelpers\\IconForResourceViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\ViewHelpers\IconViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Core\ViewHelpers\IconViewHelper
     */
    protected function getIconViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Core\\ViewHelpers\\IconViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\ViewHelpers\IconViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Core\\ViewHelpers\\IconViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Core\ViewHelpers\NormalizedUrlViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Core\ViewHelpers\NormalizedUrlViewHelper
     */
    protected function getNormalizedUrlViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Core\\ViewHelpers\\NormalizedUrlViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\ViewHelpers\NormalizedUrlViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Core\\ViewHelpers\\NormalizedUrlViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Dashboard\Controller\DashboardController' shared autowired service.
     *
     * @return \TYPO3\CMS\Dashboard\Controller\DashboardController
     */
    protected function getDashboardControllerService()
    {
        $a = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));
        $b = ($this->services['TYPO3\\CMS\\Dashboard\\DashboardPresetRegistry_decorated_1'] ?? $this->getDashboardPresetRegistryDecorated1Service());
        $c = ($this->privates['TYPO3\\CMS\\Dashboard\\DashboardRepository'] ?? $this->getDashboardRepositoryService());

        return $this->services['TYPO3\\CMS\\Dashboard\\Controller\\DashboardController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Controller\DashboardController::class, $a, ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), $b, $c, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\DashboardInitializationService::class, $c, $b), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\WidgetGroupInitializationService::class, ($this->services['TYPO3\\CMS\\Dashboard\\WidgetGroupRegistry_decorated_1'] ?? $this->getWidgetGroupRegistryDecorated1Service()), ($this->services['TYPO3\\CMS\\Dashboard\\WidgetRegistry'] ?? $this->getWidgetRegistryService())), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $a, ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService()), ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())));
    }

    /**
     * Gets the public 'TYPO3\CMS\Dashboard\Controller\WidgetAjaxController' shared autowired service.
     *
     * @return \TYPO3\CMS\Dashboard\Controller\WidgetAjaxController
     */
    protected function getWidgetAjaxControllerService()
    {
        return $this->services['TYPO3\\CMS\\Dashboard\\Controller\\WidgetAjaxController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Controller\WidgetAjaxController::class, ($this->privates['TYPO3\\CMS\\Dashboard\\DashboardRepository'] ?? $this->getDashboardRepositoryService()), ($this->services['TYPO3\\CMS\\Dashboard\\WidgetRegistry'] ?? $this->getWidgetRegistryService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Dashboard\DashboardPresetRegistry_decorated_1' shared service.
     *
     * @return \TYPO3\CMS\Dashboard\DashboardPresetRegistry
     */
    protected function getDashboardPresetRegistryDecorated1Service()
    {
        return $this->services['TYPO3\\CMS\\Dashboard\\DashboardPresetRegistry_decorated_1'] = \TYPO3\CMS\Dashboard\ServiceProvider::configureDashboardPresetRegistry($this, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\DashboardPresetRegistry::class));
    }

    /**
     * Gets the public 'TYPO3\CMS\Dashboard\ViewHelpers\Widget\ButtonViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Dashboard\ViewHelpers\Widget\ButtonViewHelper
     */
    protected function getButtonViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Dashboard\\ViewHelpers\\Widget\\ButtonViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\ViewHelpers\Widget\ButtonViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Dashboard\\ViewHelpers\\Widget\\ButtonViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Dashboard\WidgetGroupRegistry_decorated_1' shared service.
     *
     * @return \TYPO3\CMS\Dashboard\WidgetGroupRegistry
     */
    protected function getWidgetGroupRegistryDecorated1Service()
    {
        return $this->services['TYPO3\\CMS\\Dashboard\\WidgetGroupRegistry_decorated_1'] = \TYPO3\CMS\Dashboard\ServiceProvider::configureWidgetGroupRegistry($this, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\WidgetGroupRegistry::class));
    }

    /**
     * Gets the public 'TYPO3\CMS\Dashboard\WidgetRegistry' shared autowired service.
     *
     * @return \TYPO3\CMS\Dashboard\WidgetRegistry
     */
    protected function getWidgetRegistryService()
    {
        $this->services['TYPO3\\CMS\\Dashboard\\WidgetRegistry'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\WidgetRegistry::class, $this);

        $instance->registerWidget('t3newsWidgetConfiguration');
        $instance->registerWidget('sysLogErrorsWidgetConfiguration');
        $instance->registerWidget('docGettingStartedWidgetConfiguration');
        $instance->registerWidget('docTypoScriptReferenceWidgetConfiguration');
        $instance->registerWidget('docTSconfigWidgetConfiguration');
        $instance->registerWidget('t3informationWidgetConfiguration');
        $instance->registerWidget('typeOfUsersWidgetConfiguration');
        $instance->registerWidget('t3securityAdvisoriesWidgetConfiguration');
        $instance->registerWidget('failedLoginsWidgetConfiguration');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Configuration\BackendConfigurationManager' shared service.
     *
     * @return \TYPO3\CMS\Extbase\Configuration\BackendConfigurationManager
     */
    protected function getBackendConfigurationManagerService()
    {
        return $this->services['TYPO3\\CMS\\Extbase\\Configuration\\BackendConfigurationManager'] = \TYPO3\CMS\Extbase\ServiceProvider::getBackendConfigurationManager($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Configuration\ConfigurationManager' shared service.
     *
     * @return \TYPO3\CMS\Extbase\Configuration\ConfigurationManager
     */
    protected function getConfigurationManagerService()
    {
        return $this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] = \TYPO3\CMS\Extbase\ServiceProvider::getConfigurationManager($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Configuration\FrontendConfigurationManager' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Configuration\FrontendConfigurationManager
     */
    protected function getFrontendConfigurationManagerService()
    {
        return $this->services['TYPO3\\CMS\\Extbase\\Configuration\\FrontendConfigurationManager'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Configuration\FrontendConfigurationManager::class, ($this->services['TYPO3\\CMS\\Core\\TypoScript\\TypoScriptService'] ?? $this->getTypoScriptServiceService()), ($this->services['TYPO3\\CMS\\Core\\Service\\FlexFormService'] ?? $this->getFlexFormServiceService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Core\Bootstrap' autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Core\Bootstrap
     */
    protected function getBootstrapService()
    {
        $this->factories['TYPO3\\CMS\\Extbase\\Core\\Bootstrap'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Core\Bootstrap::class, $this, ($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()), ($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? $this->getPersistenceManagerService()), ($this->privates['TYPO3\\CMS\\Extbase\\Mvc\\RequestHandlerResolver'] ?? $this->getRequestHandlerResolverService()), ($this->services['TYPO3\\CMS\\Extbase\\Service\\CacheService'] ?? $this->getCacheServiceService()), ($this->services['TYPO3\\CMS\\Extbase\\Mvc\\Dispatcher'] ?? $this->getDispatcherService()), ($this->services['TYPO3\\CMS\\Extbase\\Mvc\\Web\\RequestBuilder'] ?? $this->getRequestBuilderService()));
        };

        return $this->factories['TYPO3\\CMS\\Extbase\\Core\\Bootstrap']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Domain\Repository\BackendUserGroupRepository' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Domain\Repository\BackendUserGroupRepository
     */
    protected function getBackendUserGroupRepository2Service()
    {
        $this->services['TYPO3\\CMS\\Extbase\\Domain\\Repository\\BackendUserGroupRepository'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Domain\Repository\BackendUserGroupRepository::class, ($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));

        $instance->injectPersistenceManager(($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? $this->getPersistenceManagerService()));
        $instance->initializeObject();

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Domain\Repository\BackendUserRepository' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Domain\Repository\BackendUserRepository
     */
    protected function getBackendUserRepository2Service()
    {
        $this->services['TYPO3\\CMS\\Extbase\\Domain\\Repository\\BackendUserRepository'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Domain\Repository\BackendUserRepository::class, ($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));

        $instance->injectPersistenceManager(($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? $this->getPersistenceManagerService()));
        $instance->initializeObject();

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Domain\Repository\CategoryRepository' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Domain\Repository\CategoryRepository
     */
    protected function getCategoryRepositoryService()
    {
        $this->services['TYPO3\\CMS\\Extbase\\Domain\\Repository\\CategoryRepository'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Domain\Repository\CategoryRepository::class, ($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));

        $instance->injectPersistenceManager(($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? $this->getPersistenceManagerService()));
        $instance->initializeObject();

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Domain\Repository\FrontendUserGroupRepository' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Domain\Repository\FrontendUserGroupRepository
     */
    protected function getFrontendUserGroupRepositoryService()
    {
        $this->services['TYPO3\\CMS\\Extbase\\Domain\\Repository\\FrontendUserGroupRepository'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Domain\Repository\FrontendUserGroupRepository::class, ($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));

        $instance->injectPersistenceManager(($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? $this->getPersistenceManagerService()));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Domain\Repository\FrontendUserRepository' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Domain\Repository\FrontendUserRepository
     */
    protected function getFrontendUserRepositoryService()
    {
        $this->services['TYPO3\\CMS\\Extbase\\Domain\\Repository\\FrontendUserRepository'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Domain\Repository\FrontendUserRepository::class, ($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));

        $instance->injectPersistenceManager(($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? $this->getPersistenceManagerService()));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Mvc\Controller\ControllerContext' autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Mvc\Controller\ControllerContext
     */
    protected function getControllerContextService()
    {
        $this->factories['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ControllerContext'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\Controller\ControllerContext::class);

            $instance->injectFlashMessageService(($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService()));
            $instance->injectExtensionService(($this->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? $this->getExtensionServiceService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\ControllerContext']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Mvc\Controller\MvcPropertyMappingConfigurationService' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Mvc\Controller\MvcPropertyMappingConfigurationService
     */
    protected function getMvcPropertyMappingConfigurationServiceService()
    {
        $this->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\Controller\MvcPropertyMappingConfigurationService::class);

        $instance->injectHashService(($this->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? $this->getHashServiceService()));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Mvc\Dispatcher' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Mvc\Dispatcher
     */
    protected function getDispatcherService()
    {
        return $this->services['TYPO3\\CMS\\Extbase\\Mvc\\Dispatcher'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\Dispatcher::class, ($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()), $this, ($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Mvc\View\EmptyView' autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Mvc\View\EmptyView
     */
    protected function getEmptyViewService()
    {
        $this->factories['TYPO3\\CMS\\Extbase\\Mvc\\View\\EmptyView'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\EmptyView::class);
        };

        return $this->factories['TYPO3\\CMS\\Extbase\\Mvc\\View\\EmptyView']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Mvc\View\JsonView' autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Mvc\View\JsonView
     */
    protected function getJsonViewService()
    {
        $this->factories['TYPO3\\CMS\\Extbase\\Mvc\\View\\JsonView'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\JsonView::class);

            $instance->injectPersistenceManager(($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? $this->getPersistenceManagerService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Extbase\\Mvc\\View\\JsonView']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Mvc\Web\FrontendRequestHandler' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Mvc\Web\FrontendRequestHandler
     */
    protected function getFrontendRequestHandlerService()
    {
        return $this->services['TYPO3\\CMS\\Extbase\\Mvc\\Web\\FrontendRequestHandler'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\Web\FrontendRequestHandler::class, ($this->services['TYPO3\\CMS\\Extbase\\Mvc\\Dispatcher'] ?? $this->getDispatcherService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Mvc\Web\RequestBuilder' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Mvc\Web\RequestBuilder
     */
    protected function getRequestBuilderService()
    {
        $this->services['TYPO3\\CMS\\Extbase\\Mvc\\Web\\RequestBuilder'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\Web\RequestBuilder::class);

        $instance->injectConfigurationManager(($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));
        $instance->injectExtensionService(($this->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? $this->getExtensionServiceService()));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Mvc\Web\Routing\UriBuilder' autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Mvc\Web\Routing\UriBuilder
     */
    protected function getUriBuilder2Service()
    {
        $this->factories['TYPO3\\CMS\\Extbase\\Mvc\\Web\\Routing\\UriBuilder'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\Web\Routing\UriBuilder::class);

            $instance->injectConfigurationManager(($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));
            $instance->injectExtensionService(($this->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? $this->getExtensionServiceService()));
            $instance->initializeObject();

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Extbase\\Mvc\\Web\\Routing\\UriBuilder']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Object\Container\Container' shared service.
     *
     * @return \TYPO3\CMS\Extbase\Object\Container\Container
     */
    protected function getContainerService()
    {
        $this->services['TYPO3\\CMS\\Extbase\\Object\\Container\\Container'] = $instance = \TYPO3\CMS\Extbase\ServiceProvider::getObjectContainer($this);

        $instance->registerImplementation('Psr\\EventDispatcher\\EventDispatcherInterface', 'TYPO3\\CMS\\Adminpanel\\Service\\EventDispatcher');
        $instance->registerImplementation('Psr\\Http\\Client\\ClientInterface', 'GuzzleHttp\\Client');
        $instance->registerImplementation('Psr\\Http\\Message\\RequestFactoryInterface', 'TYPO3\\CMS\\Core\\Http\\RequestFactory');
        $instance->registerImplementation('Psr\\Http\\Message\\ResponseFactoryInterface', 'TYPO3\\CMS\\Core\\Http\\ResponseFactory');
        $instance->registerImplementation('Psr\\Http\\Message\\ServerRequestFactoryInterface', 'TYPO3\\CMS\\Core\\Http\\ServerRequestFactory');
        $instance->registerImplementation('Psr\\Http\\Message\\StreamFactoryInterface', 'TYPO3\\CMS\\Core\\Http\\StreamFactory');
        $instance->registerImplementation('Psr\\Http\\Message\\UploadedFileFactoryInterface', 'TYPO3\\CMS\\Core\\Http\\UploadedFileFactory');
        $instance->registerImplementation('Psr\\Http\\Message\\UriFactoryInterface', 'TYPO3\\CMS\\Core\\Http\\UriFactory');
        $instance->registerImplementation('GuzzleHttp\\ClientInterface', 'GuzzleHttp\\Client');
        $instance->registerImplementation('Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface', 'TYPO3\\SymfonyPsrEventDispatcherAdapter\\EventDispatcherAdapter');
        $instance->registerImplementation('TYPO3\\CMS\\Core\\Authentication\\Mfa\\MfaProviderManifestInterface', 'TYPO3\\CMS\\Core\\Authentication\\Mfa\\MfaProviderManifest');
        $instance->registerImplementation('TYPO3\\CMS\\Core\\Cache\\Backend\\FreezableBackendInterface', 'TYPO3\\CMS\\Core\\Cache\\Backend\\FileBackend');
        $instance->registerImplementation('TYPO3\\CMS\\Core\\Collection\\EditableCollectionInterface', 'TYPO3\\CMS\\Core\\Category\\Collection\\CategoryCollection');
        $instance->registerImplementation('TYPO3\\CMS\\Core\\Core\\ApplicationInterface', 'TYPO3\\CMS\\Core\\Console\\CommandApplication');
        $instance->registerImplementation('TYPO3\\CMS\\Core\\DataHandling\\DataHandlerCheckModifyAccessListHookInterface', 'TYPO3\\CMS\\Core\\Resource\\Security\\FileMetadataPermissionsAspect');
        $instance->registerImplementation('TYPO3\\CMS\\Core\\DataHandling\\Model\\EntityPointer', 'TYPO3\\CMS\\Core\\DataHandling\\Model\\EntityUidPointer');
        $instance->registerImplementation('TYPO3\\CMS\\Core\\Error\\ErrorHandlerInterface', 'TYPO3\\CMS\\Core\\Error\\ErrorHandler');
        $instance->registerImplementation('TYPO3\\CMS\\Core\\Http\\DispatcherInterface', 'TYPO3\\CMS\\Core\\Http\\Dispatcher');
        $instance->registerImplementation('TYPO3\\CMS\\Core\\Localization\\Parser\\LocalizationParserInterface', 'TYPO3\\CMS\\Core\\Localization\\Parser\\XliffParser');
        $instance->registerImplementation('TYPO3\\CMS\\Core\\Log\\LogManagerInterface', 'TYPO3\\CMS\\Core\\Log\\LogManager');
        $instance->registerImplementation('TYPO3\\CMS\\Core\\Package\\PackageInterface', 'TYPO3\\CMS\\Core\\Package\\Package');
        $instance->registerImplementation('TYPO3\\CMS\\Core\\PageTitle\\PageTitleProviderInterface', 'TYPO3\\CMS\\Core\\PageTitle\\RecordPageTitleProvider');
        $instance->registerImplementation('TYPO3\\CMS\\Core\\Pagination\\PaginationInterface', 'TYPO3\\CMS\\Core\\Pagination\\SimplePagination');
        $instance->registerImplementation('TYPO3\\CMS\\Core\\Pagination\\PaginatorInterface', 'TYPO3\\CMS\\Core\\Pagination\\ArrayPaginator');
        $instance->registerImplementation('TYPO3\\CMS\\Core\\Resource\\Driver\\DriverInterface', 'TYPO3\\CMS\\Core\\Resource\\Driver\\LocalDriver');
        $instance->registerImplementation('TYPO3\\CMS\\Core\\Resource\\Driver\\StreamableDriverInterface', 'TYPO3\\CMS\\Core\\Resource\\Driver\\LocalDriver');
        $instance->registerImplementation('TYPO3\\CMS\\Core\\Resource\\Index\\ExtractorInterface', 'TYPO3\\CMS\\Core\\Resource\\OnlineMedia\\Metadata\\Extractor');
        $instance->registerImplementation('TYPO3\\CMS\\Core\\Resource\\ResourceStorageInterface', 'TYPO3\\CMS\\Core\\Resource\\ResourceStorage');
        $instance->registerImplementation('TYPO3\\CMS\\Core\\Resource\\TextExtraction\\TextExtractorInterface', 'TYPO3\\CMS\\Core\\Resource\\TextExtraction\\PlainTextExtractor');
        $instance->registerImplementation('TYPO3\\CMS\\Core\\Routing\\Aspect\\ModifiableAspectInterface', 'TYPO3\\CMS\\Core\\Routing\\Aspect\\LocaleModifier');
        $instance->registerImplementation('TYPO3\\CMS\\Core\\Routing\\Enhancer\\DecoratingEnhancerInterface', 'TYPO3\\CMS\\Core\\Routing\\Enhancer\\PageTypeDecorator');
        $instance->registerImplementation('TYPO3\\CMS\\Core\\Routing\\RouterInterface', 'TYPO3\\CMS\\Core\\Routing\\PageRouter');
        $instance->registerImplementation('TYPO3\\CMS\\Core\\Type\\Exception\\InvalidValueExceptionInterface', 'TYPO3\\CMS\\Core\\Type\\Exception\\InvalidEnumerationValueException');
        $instance->registerImplementation('TYPO3\\CMS\\Extbase\\Object\\ObjectManagerInterface', 'TYPO3\\CMS\\Extbase\\Object\\ObjectManager');
        $instance->registerImplementation('TYPO3\\CMS\\Extbase\\Persistence\\QueryInterface', 'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Query');
        $instance->registerImplementation('TYPO3\\CMS\\Extbase\\Persistence\\QueryResultInterface', 'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\QueryResult');
        $instance->registerImplementation('TYPO3\\CMS\\Extbase\\Persistence\\PersistenceManagerInterface', 'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager');
        $instance->registerImplementation('TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Storage\\BackendInterface', 'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Storage\\Typo3DbBackend');
        $instance->registerImplementation('TYPO3\\CMS\\Extbase\\Persistence\\Generic\\QuerySettingsInterface', 'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Typo3QuerySettings');
        $instance->registerImplementation('TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManagerInterface', 'TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager');
        $instance->registerImplementation('TYPO3\\CMS\\Extbase\\Mvc\\View\\ViewResolverInterface', 'TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver');
        $instance->registerImplementation('TYPO3\\CMS\\Extbase\\Mvc\\RequestHandlerInterface', 'TYPO3\\CMS\\Extbase\\Mvc\\Web\\FrontendRequestHandler');
        $instance->registerImplementation('TYPO3\\CMS\\Extbase\\Persistence\\ForwardCompatibleQueryInterface', 'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Query');
        $instance->registerImplementation('TYPO3\\CMS\\Extbase\\Persistence\\ForwardCompatibleQueryResultInterface', 'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\QueryResult');
        $instance->registerImplementation('TYPO3\\CMS\\Extbase\\Persistence\\Generic\\BackendInterface', 'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Backend');
        $instance->registerImplementation('TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\AndInterface', 'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\LogicalAnd');
        $instance->registerImplementation('TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\BindVariableValueInterface', 'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\BindVariableValue');
        $instance->registerImplementation('TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\ComparisonInterface', 'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\Comparison');
        $instance->registerImplementation('TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\EquiJoinConditionInterface', 'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\EquiJoinCondition');
        $instance->registerImplementation('TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\JoinConditionInterface', 'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\EquiJoinCondition');
        $instance->registerImplementation('TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\JoinInterface', 'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\Join');
        $instance->registerImplementation('TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\LowerCaseInterface', 'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\LowerCase');
        $instance->registerImplementation('TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\NotInterface', 'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\LogicalNot');
        $instance->registerImplementation('TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\OrInterface', 'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\LogicalOr');
        $instance->registerImplementation('TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\OrderingInterface', 'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\Ordering');
        $instance->registerImplementation('TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\SelectorInterface', 'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\Selector');
        $instance->registerImplementation('TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\StaticOperandInterface', 'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\BindVariableValue');
        $instance->registerImplementation('TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\UpperCaseInterface', 'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\UpperCase');
        $instance->registerImplementation('TYPO3\\CMS\\Extbase\\Persistence\\Generic\\QueryFactoryInterface', 'TYPO3\\CMS\\Extbase\\Persistence\\Generic\\QueryFactory');
        $instance->registerImplementation('TYPO3\\CMS\\Backend\\Backend\\Avatar\\AvatarProviderInterface', 'TYPO3\\CMS\\Backend\\Backend\\Avatar\\DefaultAvatarProvider');
        $instance->registerImplementation('TYPO3\\CMS\\Backend\\LoginProvider\\LoginProviderInterface', 'TYPO3\\CMS\\Backend\\LoginProvider\\UsernamePasswordLoginProvider');
        $instance->registerImplementation('TYPO3\\CMS\\Backend\\Preview\\PreviewRendererInterface', 'TYPO3\\CMS\\Backend\\Preview\\StandardContentPreviewRenderer');
        $instance->registerImplementation('TYPO3\\CMS\\Backend\\Preview\\PreviewRendererResolverInterface', 'TYPO3\\CMS\\Backend\\Preview\\StandardPreviewRendererResolver');
        $instance->registerImplementation('TYPO3\\CMS\\Backend\\View\\ProgressListenerInterface', 'TYPO3\\CMS\\Backend\\Command\\ProgressListener\\ReferenceIndexProgressListener');
        $instance->registerImplementation('TYPO3\\CMS\\Frontend\\ContentObject\\Exception\\ExceptionHandlerInterface', 'TYPO3\\CMS\\Frontend\\ContentObject\\Exception\\ProductionExceptionHandler');
        $instance->registerImplementation('TYPO3\\CMS\\Frontend\\Typolink\\LinkResultInterface', 'TYPO3\\CMS\\Frontend\\Typolink\\LinkResult');
        $instance->registerImplementation('Psr\\EventDispatcher\\ListenerProviderInterface', 'TYPO3\\CMS\\Core\\EventDispatcher\\ListenerProvider');
        $instance->registerImplementation('TYPO3\\CMS\\Dashboard\\Widgets\\ElementAttributesInterface', 'TYPO3\\CMS\\Dashboard\\Widgets\\Provider\\SysLogButtonProvider');
        $instance->registerImplementation('TYPO3\\CMS\\Dashboard\\Widgets\\NumberWithIconDataProviderInterface', 'TYPO3\\CMS\\Dashboard\\Widgets\\Provider\\NumberOfFailedLoginsDataProvider');
        $instance->registerImplementation('TYPO3\\CMS\\Dashboard\\Widgets\\WidgetConfigurationInterface', 'TYPO3\\CMS\\Dashboard\\Widgets\\WidgetConfiguration');
        $instance->registerImplementation('TYPO3\\CMS\\Reports\\RequestAwareReportInterface', 'TYPO3\\CMS\\Reports\\Report\\Status\\Status');
        $instance->registerImplementation('TYPO3\\CMS\\Reports\\RequestAwareStatusProviderInterface', 'TYPO3\\CMS\\Reports\\Report\\Status\\SecurityStatus');
        $instance->registerImplementation('TYPO3\\CMS\\Form\\Mvc\\Configuration\\ConfigurationManagerInterface', 'TYPO3\\CMS\\Form\\Mvc\\Configuration\\ConfigurationManager');
        $instance->registerImplementation('TYPO3\\CMS\\Form\\Mvc\\Persistence\\FormPersistenceManagerInterface', 'TYPO3\\CMS\\Form\\Mvc\\Persistence\\FormPersistenceManager');
        $instance->registerImplementation('TYPO3\\CMS\\Form\\Domain\\Configuration\\FlexformConfiguration\\Processors\\ProcessorInterface', 'TYPO3\\CMS\\Form\\Domain\\Configuration\\FlexformConfiguration\\Processors\\FinisherOptionGenerator');
        $instance->registerImplementation('TYPO3\\CMS\\Form\\Domain\\Factory\\FormFactoryInterface', 'TYPO3\\CMS\\Form\\Domain\\Factory\\ArrayFormFactory');
        $instance->registerImplementation('TYPO3\\CMS\\Form\\Domain\\Renderer\\RendererInterface', 'TYPO3\\CMS\\Form\\Domain\\Renderer\\FluidFormRenderer');
        $instance->registerImplementation('TYPO3\\CMS\\Form\\Domain\\Runtime\\FormRuntime\\Lifecycle\\AfterFormStateInitializedInterface', 'TYPO3\\CMS\\Form\\Mvc\\Property\\PropertyMappingConfiguration');
        $instance->registerImplementation('TYPO3\\CMS\\Extensionmanager\\Remote\\ExtensionDownloaderRemoteInterface', 'TYPO3\\CMS\\Extensionmanager\\Remote\\TerExtensionRemote');
        $instance->registerImplementation('TYPO3\\CMS\\Extensionmanager\\Remote\\ListableRemoteInterface', 'TYPO3\\CMS\\Extensionmanager\\Remote\\TerExtensionRemote');
        $instance->registerImplementation('TYPO3\\CMS\\FrontendLogin\\Service\\RecoveryServiceInterface', 'TYPO3\\CMS\\FrontendLogin\\Service\\RecoveryService');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Object\ObjectManager' shared service.
     *
     * @return \TYPO3\CMS\Extbase\Object\ObjectManager
     */
    protected function getObjectManagerService()
    {
        return $this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] = \TYPO3\CMS\Extbase\ServiceProvider::getObjectManager($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Persistence\Generic\Backend' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Persistence\Generic\Backend
     */
    protected function getBackendService()
    {
        return $this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Backend'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Backend::class, ($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()), ($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Session'] ?? $this->getSessionService()), ($this->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? $this->getReflectionServiceService()), ($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Storage\\Typo3DbBackend'] ?? $this->getTypo3DbBackendService()), ($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Mapper\\DataMapFactory'] ?? $this->getDataMapFactoryService()), ($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapFactory' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapFactory
     */
    protected function getDataMapFactoryService()
    {
        return $this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Mapper\\DataMapFactory'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapFactory::class, ($this->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? $this->getReflectionServiceService()), ($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()), ($this->services['TYPO3\\CMS\\Core\\Cache\\CacheManager'] ?? $this->getCacheManagerService()), (\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\ClassesConfigurationFactory::class, ($this->privates['cache.extbase'] ?? $this->getCache_ExtbaseService()), ($this->services['_early.TYPO3\\CMS\\Core\\Package\\PackageManager'] ?? $this->get('_early.TYPO3\\CMS\\Core\\Package\\PackageManager', 1)), ($this->services['TYPO3\\CMS\\Core\\Package\\Cache\\PackageDependentCacheIdentifier'] ?? $this->getPackageDependentCacheIdentifierService())->withPrefix("PersistenceClasses")->toString()))->createClassesConfiguration(), ($this->services['TYPO3\\CMS\\Core\\Package\\Cache\\PackageDependentCacheIdentifier'] ?? $this->getPackageDependentCacheIdentifierService())->toString());
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapper' autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapper
     */
    protected function getDataMapperService()
    {
        $this->factories['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Mapper\\DataMapper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapper::class, ($this->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? $this->getReflectionServiceService()), ($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\QueryObjectModelFactory'] ?? ($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\QueryObjectModelFactory'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Qom\QueryObjectModelFactory::class))), ($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Session'] ?? $this->getSessionService()), ($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Mapper\\DataMapFactory'] ?? $this->getDataMapFactoryService()), ($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\QueryFactory'] ?? $this->getQueryFactoryService()), ($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()), ($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()));
        };

        return $this->factories['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Mapper\\DataMapper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Persistence\Generic\PersistenceManager' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Persistence\Generic\PersistenceManager
     */
    protected function getPersistenceManagerService()
    {
        $this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\PersistenceManager::class, ($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\QueryFactory'] ?? $this->getQueryFactoryService()), ($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Backend'] ?? $this->getBackendService()), ($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Session'] ?? $this->getSessionService()));

        $instance->initializeObject();

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Persistence\Generic\Qom\QueryObjectModelFactory' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Persistence\Generic\Qom\QueryObjectModelFactory
     */
    protected function getQueryObjectModelFactoryService()
    {
        return $this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\QueryObjectModelFactory'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Qom\QueryObjectModelFactory::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Persistence\Generic\Query' autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Persistence\Generic\Query
     */
    protected function getQueryService()
    {
        $this->factories['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Query'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Query::class, ($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Mapper\\DataMapFactory'] ?? $this->getDataMapFactoryService()), ($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? $this->getPersistenceManagerService()), ($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\QueryObjectModelFactory'] ?? ($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\QueryObjectModelFactory'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Qom\QueryObjectModelFactory::class))), $this);
        };

        return $this->factories['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Query']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Persistence\Generic\QueryFactory' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Persistence\Generic\QueryFactory
     */
    protected function getQueryFactoryService()
    {
        return $this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\QueryFactory'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\QueryFactory::class, ($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()), ($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Mapper\\DataMapFactory'] ?? $this->getDataMapFactoryService()), $this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Persistence\Generic\QueryResult' autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Persistence\Generic\QueryResult
     */
    protected function getQueryResultService()
    {
        $this->factories['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\QueryResult'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\QueryResult::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapper::class, ($this->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? $this->getReflectionServiceService()), ($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\QueryObjectModelFactory'] ?? ($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\QueryObjectModelFactory'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Qom\QueryObjectModelFactory::class))), ($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Session'] ?? $this->getSessionService()), ($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Mapper\\DataMapFactory'] ?? $this->getDataMapFactoryService()), ($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\QueryFactory'] ?? $this->getQueryFactoryService()), ($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()), ($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service())), ($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? $this->getPersistenceManagerService()));
        };

        return $this->factories['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\QueryResult']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Persistence\Generic\Session' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Persistence\Generic\Session
     */
    protected function getSessionService()
    {
        return $this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Session'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Session::class, ($this->services['TYPO3\\CMS\\Extbase\\Object\\Container\\Container'] ?? $this->getContainerService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Persistence\Generic\Storage\Typo3DbBackend' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Persistence\Generic\Storage\Typo3DbBackend
     */
    protected function getTypo3DbBackendService()
    {
        return $this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Storage\\Typo3DbBackend'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Storage\Typo3DbBackend::class, ($this->services['TYPO3\\CMS\\Extbase\\Service\\CacheService'] ?? $this->getCacheServiceService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Persistence\Generic\Storage\Typo3DbQueryParser' autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Persistence\Generic\Storage\Typo3DbQueryParser
     */
    protected function getTypo3DbQueryParserService()
    {
        $this->factories['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Storage\\Typo3DbQueryParser'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Storage\Typo3DbQueryParser::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Mapper\DataMapper::class, ($this->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? $this->getReflectionServiceService()), ($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\QueryObjectModelFactory'] ?? ($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Qom\\QueryObjectModelFactory'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Qom\QueryObjectModelFactory::class))), ($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Session'] ?? $this->getSessionService()), ($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Mapper\\DataMapFactory'] ?? $this->getDataMapFactoryService()), ($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\QueryFactory'] ?? $this->getQueryFactoryService()), ($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()), ($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service())));
        };

        return $this->factories['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Storage\\Typo3DbQueryParser']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Persistence\Generic\Typo3QuerySettings' autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Persistence\Generic\Typo3QuerySettings
     */
    protected function getTypo3QuerySettingsService()
    {
        $this->factories['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Typo3QuerySettings'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Typo3QuerySettings::class, ($this->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? $this->getContextService()), ($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));
        };

        return $this->factories['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\Typo3QuerySettings']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Persistence\Repository' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Persistence\Repository
     */
    protected function getRepositoryService()
    {
        $this->services['TYPO3\\CMS\\Extbase\\Persistence\\Repository'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Repository::class, ($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));

        $instance->injectPersistenceManager(($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? $this->getPersistenceManagerService()));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Property\PropertyMapper' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Property\PropertyMapper
     */
    protected function getPropertyMapperService()
    {
        $this->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\PropertyMapper::class, $this, ($this->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMappingConfigurationBuilder'] ?? ($this->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMappingConfigurationBuilder'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\PropertyMappingConfigurationBuilder::class))));

        $instance->initializeObject();

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Property\PropertyMappingConfigurationBuilder' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Property\PropertyMappingConfigurationBuilder
     */
    protected function getPropertyMappingConfigurationBuilderService()
    {
        return $this->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMappingConfigurationBuilder'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\PropertyMappingConfigurationBuilder::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Property\TypeConverter\ArrayConverter' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Property\TypeConverter\ArrayConverter
     */
    protected function getArrayConverterService()
    {
        $this->services['TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\ArrayConverter'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\ArrayConverter::class);

        $instance->injectObjectManager(($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Property\TypeConverter\BooleanConverter' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Property\TypeConverter\BooleanConverter
     */
    protected function getBooleanConverterService()
    {
        $this->services['TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\BooleanConverter'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\BooleanConverter::class);

        $instance->injectObjectManager(($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Property\TypeConverter\CoreTypeConverter' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Property\TypeConverter\CoreTypeConverter
     */
    protected function getCoreTypeConverterService()
    {
        $this->services['TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\CoreTypeConverter'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\CoreTypeConverter::class);

        $instance->injectObjectManager(($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Property\TypeConverter\DateTimeConverter' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Property\TypeConverter\DateTimeConverter
     */
    protected function getDateTimeConverterService()
    {
        $this->services['TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\DateTimeConverter'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\DateTimeConverter::class);

        $instance->injectObjectManager(($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Property\TypeConverter\FileConverter' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Property\TypeConverter\FileConverter
     */
    protected function getFileConverterService()
    {
        $this->services['TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\FileConverter'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\FileConverter::class);

        $instance->injectFileFactory(($this->services['TYPO3\\CMS\\Core\\Resource\\ResourceFactory'] ?? $this->getResourceFactoryService()));
        $instance->injectObjectManager(($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Property\TypeConverter\FileReferenceConverter' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Property\TypeConverter\FileReferenceConverter
     */
    protected function getFileReferenceConverterService()
    {
        $this->services['TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\FileReferenceConverter'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\FileReferenceConverter::class);

        $instance->injectFileFactory(($this->services['TYPO3\\CMS\\Core\\Resource\\ResourceFactory'] ?? $this->getResourceFactoryService()));
        $instance->injectObjectManager(($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Property\TypeConverter\FloatConverter' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Property\TypeConverter\FloatConverter
     */
    protected function getFloatConverterService()
    {
        $this->services['TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\FloatConverter'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\FloatConverter::class);

        $instance->injectObjectManager(($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Property\TypeConverter\FolderConverter' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Property\TypeConverter\FolderConverter
     */
    protected function getFolderConverterService()
    {
        $this->services['TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\FolderConverter'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\FolderConverter::class);

        $instance->injectFileFactory(($this->services['TYPO3\\CMS\\Core\\Resource\\ResourceFactory'] ?? $this->getResourceFactoryService()));
        $instance->injectObjectManager(($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Property\TypeConverter\IntegerConverter' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Property\TypeConverter\IntegerConverter
     */
    protected function getIntegerConverterService()
    {
        $this->services['TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\IntegerConverter'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\IntegerConverter::class);

        $instance->injectObjectManager(($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Property\TypeConverter\ObjectConverter' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Property\TypeConverter\ObjectConverter
     */
    protected function getObjectConverterService()
    {
        $this->services['TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\ObjectConverter'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\ObjectConverter::class);

        $instance->injectObjectContainer(($this->services['TYPO3\\CMS\\Extbase\\Object\\Container\\Container'] ?? $this->getContainerService()));
        $instance->injectReflectionService(($this->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? $this->getReflectionServiceService()));
        $instance->injectContainer($this);
        $instance->injectObjectManager(($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Property\TypeConverter\ObjectStorageConverter' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Property\TypeConverter\ObjectStorageConverter
     */
    protected function getObjectStorageConverterService()
    {
        $this->services['TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\ObjectStorageConverter'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\ObjectStorageConverter::class);

        $instance->injectObjectManager(($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Property\TypeConverter\PersistentObjectConverter' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Property\TypeConverter\PersistentObjectConverter
     */
    protected function getPersistentObjectConverterService()
    {
        $this->services['TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\PersistentObjectConverter'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\PersistentObjectConverter::class);

        $instance->injectPersistenceManager(($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? $this->getPersistenceManagerService()));
        $instance->injectObjectContainer(($this->services['TYPO3\\CMS\\Extbase\\Object\\Container\\Container'] ?? $this->getContainerService()));
        $instance->injectReflectionService(($this->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? $this->getReflectionServiceService()));
        $instance->injectContainer($this);
        $instance->injectObjectManager(($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Property\TypeConverter\StringConverter' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Property\TypeConverter\StringConverter
     */
    protected function getStringConverterService()
    {
        $this->services['TYPO3\\CMS\\Extbase\\Property\\TypeConverter\\StringConverter'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Property\TypeConverter\StringConverter::class);

        $instance->injectObjectManager(($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Reflection\ReflectionService' shared service.
     *
     * @return \TYPO3\CMS\Extbase\Reflection\ReflectionService
     */
    protected function getReflectionServiceService()
    {
        return $this->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] = \TYPO3\CMS\Extbase\ServiceProvider::getReflectionService($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Security\Cryptography\HashService' shared service.
     *
     * @return \TYPO3\CMS\Extbase\Security\Cryptography\HashService
     */
    protected function getHashServiceService()
    {
        return $this->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] = \TYPO3\CMS\Extbase\ServiceProvider::getHashService($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Service\CacheService' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Service\CacheService
     */
    protected function getCacheServiceService()
    {
        return $this->services['TYPO3\\CMS\\Extbase\\Service\\CacheService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Service\CacheService::class, ($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()), ($this->services['TYPO3\\CMS\\Core\\Cache\\CacheManager'] ?? $this->getCacheManagerService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Service\EnvironmentService' shared service.
     *
     * @return \TYPO3\CMS\Extbase\Service\EnvironmentService
     */
    protected function getEnvironmentServiceService()
    {
        return $this->services['TYPO3\\CMS\\Extbase\\Service\\EnvironmentService'] = \TYPO3\CMS\Extbase\ServiceProvider::getEnvironmentService($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Service\ExtensionService' shared service.
     *
     * @return \TYPO3\CMS\Extbase\Service\ExtensionService
     */
    protected function getExtensionServiceService()
    {
        return $this->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] = \TYPO3\CMS\Extbase\ServiceProvider::getExtensionService($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Service\ImageService' shared service.
     *
     * @return \TYPO3\CMS\Extbase\Service\ImageService
     */
    protected function getImageServiceService()
    {
        return $this->services['TYPO3\\CMS\\Extbase\\Service\\ImageService'] = \TYPO3\CMS\Extbase\ServiceProvider::getImageService($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\SignalSlot\Dispatcher' shared service.
     *
     * @return \TYPO3\CMS\Extbase\SignalSlot\Dispatcher
     */
    protected function getDispatcher2Service()
    {
        return $this->services['TYPO3\\CMS\\Extbase\\SignalSlot\\Dispatcher'] = \TYPO3\CMS\Extbase\ServiceProvider::getSignalSlotDispatcher($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extbase\Validation\ValidatorResolver' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Validation\ValidatorResolver
     */
    protected function getValidatorResolverService()
    {
        $this->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Validation\ValidatorResolver::class);

        $instance->injectReflectionService(($this->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? $this->getReflectionServiceService()));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Command\ActivateExtensionCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Command\ActivateExtensionCommand
     */
    protected function getActivateExtensionCommandService()
    {
        $this->services['TYPO3\\CMS\\Extensionmanager\\Command\\ActivateExtensionCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Command\ActivateExtensionCommand::class, ($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()), ($this->services['TYPO3\\CMS\\Extensionmanager\\Utility\\InstallUtility'] ?? $this->getInstallUtilityService()));

        $instance->setName('extension:activate');
        $instance->setDescription('Activates an extension by key');
        $instance->setHidden(true);
        $instance->setAliases([0 => 'extensionmanager:extension:install', 1 => 'extension:install']);

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Command\DeactivateExtensionCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Command\DeactivateExtensionCommand
     */
    protected function getDeactivateExtensionCommandService()
    {
        $this->services['TYPO3\\CMS\\Extensionmanager\\Command\\DeactivateExtensionCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Command\DeactivateExtensionCommand::class, ($this->services['TYPO3\\CMS\\Extensionmanager\\Utility\\InstallUtility'] ?? $this->getInstallUtilityService()));

        $instance->setName('extension:deactivate');
        $instance->setDescription('Deactivates an extension by key');
        $instance->setHidden(true);
        $instance->setAliases([0 => 'extensionmanager:extension:uninstall', 1 => 'extension:uninstall']);

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Command\SetupExtensionsCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Command\SetupExtensionsCommand
     */
    protected function getSetupExtensionsCommandService()
    {
        $this->services['TYPO3\\CMS\\Extensionmanager\\Command\\SetupExtensionsCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Command\SetupExtensionsCommand::class, ($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()), ($this->services['TYPO3\\CMS\\Extensionmanager\\Utility\\InstallUtility'] ?? $this->getInstallUtilityService()), ($this->services['_early.TYPO3\\CMS\\Core\\Package\\PackageManager'] ?? $this->get('_early.TYPO3\\CMS\\Core\\Package\\PackageManager', 1)));

        $instance->setName('extension:setup');
        $instance->setDescription('Set up extensions');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Controller\AbstractController' autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Controller\AbstractController
     */
    protected function getAbstractControllerService()
    {
        $this->factories['TYPO3\\CMS\\Extensionmanager\\Controller\\AbstractController'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Controller\AbstractController::class);

            $instance->injectResponseFactory(($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class))));
            $instance->injectStreamFactory(($this->services['Psr\\Http\\Message\\StreamFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\StreamFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class))));
            $instance->injectConfigurationManager(($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));
            $instance->injectObjectManager(($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));
            $instance->injectSignalSlotDispatcher(($this->services['TYPO3\\CMS\\Extbase\\SignalSlot\\Dispatcher'] ?? $this->getDispatcher2Service()));
            $instance->injectValidatorResolver(($this->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? $this->getValidatorResolverService()));
            $instance->injectViewResolver(($this->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ?? ($this->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $this))));
            $instance->injectReflectionService(($this->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? $this->getReflectionServiceService()));
            $instance->injectHashService(($this->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? $this->getHashServiceService()));
            $instance->injectMvcPropertyMappingConfigurationService(($this->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? $this->getMvcPropertyMappingConfigurationServiceService()));
            $instance->injectEventDispatcher(($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()));
            $instance->injectPropertyMapper(($this->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? $this->getPropertyMapperService()));
            $instance->injectInternalFlashMessageService(($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService()));
            $instance->injectInternalExtensionService(($this->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? $this->getExtensionServiceService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Extensionmanager\\Controller\\AbstractController']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Controller\AbstractModuleController' autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Controller\AbstractModuleController
     */
    protected function getAbstractModuleControllerService()
    {
        $this->factories['TYPO3\\CMS\\Extensionmanager\\Controller\\AbstractModuleController'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Controller\AbstractModuleController::class);

            $a = ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService());

            $instance->injectModuleTemplateFactory(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class))), ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService()), $a));
            $instance->injectResponseFactory(($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class))));
            $instance->injectStreamFactory(($this->services['Psr\\Http\\Message\\StreamFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\StreamFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class))));
            $instance->injectConfigurationManager(($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));
            $instance->injectObjectManager(($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));
            $instance->injectSignalSlotDispatcher(($this->services['TYPO3\\CMS\\Extbase\\SignalSlot\\Dispatcher'] ?? $this->getDispatcher2Service()));
            $instance->injectValidatorResolver(($this->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? $this->getValidatorResolverService()));
            $instance->injectViewResolver(($this->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ?? ($this->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $this))));
            $instance->injectReflectionService(($this->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? $this->getReflectionServiceService()));
            $instance->injectHashService(($this->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? $this->getHashServiceService()));
            $instance->injectMvcPropertyMappingConfigurationService(($this->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? $this->getMvcPropertyMappingConfigurationServiceService()));
            $instance->injectEventDispatcher(($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()));
            $instance->injectPropertyMapper(($this->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? $this->getPropertyMapperService()));
            $instance->injectInternalFlashMessageService($a);
            $instance->injectInternalExtensionService(($this->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? $this->getExtensionServiceService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Extensionmanager\\Controller\\AbstractModuleController']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Controller\ActionController' autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Controller\ActionController
     */
    protected function getActionControllerService()
    {
        $this->factories['TYPO3\\CMS\\Extensionmanager\\Controller\\ActionController'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Controller\ActionController::class, ($this->services['TYPO3\\CMS\\Extensionmanager\\Utility\\InstallUtility'] ?? $this->getInstallUtilityService()), ($this->services['TYPO3\\CMS\\Extensionmanager\\Service\\ExtensionManagementService'] ?? $this->getExtensionManagementServiceService()));

            $instance->injectResponseFactory(($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class))));
            $instance->injectStreamFactory(($this->services['Psr\\Http\\Message\\StreamFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\StreamFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class))));
            $instance->injectConfigurationManager(($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));
            $instance->injectObjectManager(($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));
            $instance->injectSignalSlotDispatcher(($this->services['TYPO3\\CMS\\Extbase\\SignalSlot\\Dispatcher'] ?? $this->getDispatcher2Service()));
            $instance->injectValidatorResolver(($this->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? $this->getValidatorResolverService()));
            $instance->injectViewResolver(($this->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ?? ($this->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $this))));
            $instance->injectReflectionService(($this->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? $this->getReflectionServiceService()));
            $instance->injectHashService(($this->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? $this->getHashServiceService()));
            $instance->injectMvcPropertyMappingConfigurationService(($this->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? $this->getMvcPropertyMappingConfigurationServiceService()));
            $instance->injectEventDispatcher(($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()));
            $instance->injectPropertyMapper(($this->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? $this->getPropertyMapperService()));
            $instance->injectInternalFlashMessageService(($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService()));
            $instance->injectInternalExtensionService(($this->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? $this->getExtensionServiceService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Extensionmanager\\Controller\\ActionController']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Controller\DistributionController' autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Controller\DistributionController
     */
    protected function getDistributionControllerService()
    {
        $this->factories['TYPO3\\CMS\\Extensionmanager\\Controller\\DistributionController'] = function () {
            $a = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));
            $b = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());

            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Controller\DistributionController::class, ($this->services['_early.TYPO3\\CMS\\Core\\Package\\PackageManager'] ?? $this->get('_early.TYPO3\\CMS\\Core\\Package\\PackageManager', 1)), $a, $b);

            $c = ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService());

            $instance->injectModuleTemplateFactory(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $a, $b, $c));
            $instance->injectResponseFactory(($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class))));
            $instance->injectStreamFactory(($this->services['Psr\\Http\\Message\\StreamFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\StreamFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class))));
            $instance->injectConfigurationManager(($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));
            $instance->injectObjectManager(($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));
            $instance->injectSignalSlotDispatcher(($this->services['TYPO3\\CMS\\Extbase\\SignalSlot\\Dispatcher'] ?? $this->getDispatcher2Service()));
            $instance->injectValidatorResolver(($this->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? $this->getValidatorResolverService()));
            $instance->injectViewResolver(($this->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ?? ($this->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $this))));
            $instance->injectReflectionService(($this->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? $this->getReflectionServiceService()));
            $instance->injectHashService(($this->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? $this->getHashServiceService()));
            $instance->injectMvcPropertyMappingConfigurationService(($this->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? $this->getMvcPropertyMappingConfigurationServiceService()));
            $instance->injectEventDispatcher(($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()));
            $instance->injectPropertyMapper(($this->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? $this->getPropertyMapperService()));
            $instance->injectInternalFlashMessageService($c);
            $instance->injectInternalExtensionService(($this->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? $this->getExtensionServiceService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Extensionmanager\\Controller\\DistributionController']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Controller\DownloadController' autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Controller\DownloadController
     */
    protected function getDownloadControllerService()
    {
        $this->factories['TYPO3\\CMS\\Extensionmanager\\Controller\\DownloadController'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Controller\DownloadController::class, ($this->services['TYPO3\\CMS\\Extensionmanager\\Domain\\Repository\\ExtensionRepository'] ?? $this->getExtensionRepositoryService()), ($this->services['TYPO3\\CMS\\Extensionmanager\\Service\\ExtensionManagementService'] ?? $this->getExtensionManagementServiceService()));

            $instance->injectResponseFactory(($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class))));
            $instance->injectStreamFactory(($this->services['Psr\\Http\\Message\\StreamFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\StreamFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class))));
            $instance->injectConfigurationManager(($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));
            $instance->injectObjectManager(($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));
            $instance->injectSignalSlotDispatcher(($this->services['TYPO3\\CMS\\Extbase\\SignalSlot\\Dispatcher'] ?? $this->getDispatcher2Service()));
            $instance->injectValidatorResolver(($this->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? $this->getValidatorResolverService()));
            $instance->injectViewResolver(($this->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ?? ($this->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $this))));
            $instance->injectReflectionService(($this->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? $this->getReflectionServiceService()));
            $instance->injectHashService(($this->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? $this->getHashServiceService()));
            $instance->injectMvcPropertyMappingConfigurationService(($this->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? $this->getMvcPropertyMappingConfigurationServiceService()));
            $instance->injectEventDispatcher(($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()));
            $instance->injectPropertyMapper(($this->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? $this->getPropertyMapperService()));
            $instance->injectInternalFlashMessageService(($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService()));
            $instance->injectInternalExtensionService(($this->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? $this->getExtensionServiceService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Extensionmanager\\Controller\\DownloadController']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Controller\ExtensionComposerStatusController' autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Controller\ExtensionComposerStatusController
     */
    protected function getExtensionComposerStatusControllerService()
    {
        $this->factories['TYPO3\\CMS\\Extensionmanager\\Controller\\ExtensionComposerStatusController'] = function () {
            $a = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));
            $b = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());

            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Controller\ExtensionComposerStatusController::class, ($this->privates['TYPO3\\CMS\\Extensionmanager\\Package\\ComposerDeficitDetector'] ?? $this->getComposerDeficitDetectorService()), ($this->privates['TYPO3\\CMS\\Extensionmanager\\Service\\ComposerManifestProposalGenerator'] ?? $this->getComposerManifestProposalGeneratorService()), $a, $b);

            $c = ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService());

            $instance->injectModuleTemplateFactory(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $a, $b, $c));
            $instance->injectResponseFactory(($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class))));
            $instance->injectStreamFactory(($this->services['Psr\\Http\\Message\\StreamFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\StreamFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class))));
            $instance->injectConfigurationManager(($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));
            $instance->injectObjectManager(($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));
            $instance->injectSignalSlotDispatcher(($this->services['TYPO3\\CMS\\Extbase\\SignalSlot\\Dispatcher'] ?? $this->getDispatcher2Service()));
            $instance->injectValidatorResolver(($this->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? $this->getValidatorResolverService()));
            $instance->injectViewResolver(($this->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ?? ($this->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $this))));
            $instance->injectReflectionService(($this->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? $this->getReflectionServiceService()));
            $instance->injectHashService(($this->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? $this->getHashServiceService()));
            $instance->injectMvcPropertyMappingConfigurationService(($this->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? $this->getMvcPropertyMappingConfigurationServiceService()));
            $instance->injectEventDispatcher(($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()));
            $instance->injectPropertyMapper(($this->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? $this->getPropertyMapperService()));
            $instance->injectInternalFlashMessageService($c);
            $instance->injectInternalExtensionService(($this->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? $this->getExtensionServiceService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Extensionmanager\\Controller\\ExtensionComposerStatusController']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Controller\ListController' autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Controller\ListController
     */
    protected function getListControllerService()
    {
        $this->factories['TYPO3\\CMS\\Extensionmanager\\Controller\\ListController'] = function () {
            $a = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));
            $b = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());

            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Controller\ListController::class, $a, ($this->services['TYPO3\\CMS\\Extensionmanager\\Domain\\Repository\\ExtensionRepository'] ?? $this->getExtensionRepositoryService()), ($this->services['TYPO3\\CMS\\Extensionmanager\\Utility\\ListUtility'] ?? $this->getListUtilityService()), ($this->services['TYPO3\\CMS\\Extensionmanager\\Utility\\DependencyUtility'] ?? $this->getDependencyUtilityService()), $b);

            $c = ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService());

            $instance->injectModuleTemplateFactory(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $a, $b, $c));
            $instance->injectResponseFactory(($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class))));
            $instance->injectStreamFactory(($this->services['Psr\\Http\\Message\\StreamFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\StreamFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class))));
            $instance->injectConfigurationManager(($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));
            $instance->injectObjectManager(($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));
            $instance->injectSignalSlotDispatcher(($this->services['TYPO3\\CMS\\Extbase\\SignalSlot\\Dispatcher'] ?? $this->getDispatcher2Service()));
            $instance->injectValidatorResolver(($this->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? $this->getValidatorResolverService()));
            $instance->injectViewResolver(($this->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ?? ($this->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $this))));
            $instance->injectReflectionService(($this->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? $this->getReflectionServiceService()));
            $instance->injectHashService(($this->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? $this->getHashServiceService()));
            $instance->injectMvcPropertyMappingConfigurationService(($this->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? $this->getMvcPropertyMappingConfigurationServiceService()));
            $instance->injectEventDispatcher(($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()));
            $instance->injectPropertyMapper(($this->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? $this->getPropertyMapperService()));
            $instance->injectInternalFlashMessageService($c);
            $instance->injectInternalExtensionService(($this->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? $this->getExtensionServiceService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Extensionmanager\\Controller\\ListController']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Controller\UpdateFromTerController' autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Controller\UpdateFromTerController
     */
    protected function getUpdateFromTerControllerService()
    {
        $this->factories['TYPO3\\CMS\\Extensionmanager\\Controller\\UpdateFromTerController'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Controller\UpdateFromTerController::class, ($this->services['TYPO3\\CMS\\Extensionmanager\\Remote\\RemoteRegistry'] ?? $this->getRemoteRegistryService()), ($this->services['TYPO3\\CMS\\Extensionmanager\\Utility\\ListUtility'] ?? $this->getListUtilityService()), ($this->services['TYPO3\\CMS\\Extensionmanager\\Domain\\Repository\\ExtensionRepository'] ?? $this->getExtensionRepositoryService()));

            $instance->injectResponseFactory(($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class))));
            $instance->injectStreamFactory(($this->services['Psr\\Http\\Message\\StreamFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\StreamFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class))));
            $instance->injectConfigurationManager(($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));
            $instance->injectObjectManager(($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));
            $instance->injectSignalSlotDispatcher(($this->services['TYPO3\\CMS\\Extbase\\SignalSlot\\Dispatcher'] ?? $this->getDispatcher2Service()));
            $instance->injectValidatorResolver(($this->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? $this->getValidatorResolverService()));
            $instance->injectViewResolver(($this->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ?? ($this->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $this))));
            $instance->injectReflectionService(($this->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? $this->getReflectionServiceService()));
            $instance->injectHashService(($this->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? $this->getHashServiceService()));
            $instance->injectMvcPropertyMappingConfigurationService(($this->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? $this->getMvcPropertyMappingConfigurationServiceService()));
            $instance->injectEventDispatcher(($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()));
            $instance->injectPropertyMapper(($this->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? $this->getPropertyMapperService()));
            $instance->injectInternalFlashMessageService(($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService()));
            $instance->injectInternalExtensionService(($this->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? $this->getExtensionServiceService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Extensionmanager\\Controller\\UpdateFromTerController']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Controller\UploadExtensionFileController' autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Controller\UploadExtensionFileController
     */
    protected function getUploadExtensionFileControllerService()
    {
        $this->factories['TYPO3\\CMS\\Extensionmanager\\Controller\\UploadExtensionFileController'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Controller\UploadExtensionFileController::class, ($this->services['TYPO3\\CMS\\Extensionmanager\\Utility\\FileHandlingUtility'] ?? $this->getFileHandlingUtilityService()), ($this->services['TYPO3\\CMS\\Extensionmanager\\Service\\ExtensionManagementService'] ?? $this->getExtensionManagementServiceService()));

            $instance->injectResponseFactory(($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class))));
            $instance->injectStreamFactory(($this->services['Psr\\Http\\Message\\StreamFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\StreamFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class))));
            $instance->injectConfigurationManager(($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));
            $instance->injectObjectManager(($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));
            $instance->injectSignalSlotDispatcher(($this->services['TYPO3\\CMS\\Extbase\\SignalSlot\\Dispatcher'] ?? $this->getDispatcher2Service()));
            $instance->injectValidatorResolver(($this->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? $this->getValidatorResolverService()));
            $instance->injectViewResolver(($this->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ?? ($this->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $this))));
            $instance->injectReflectionService(($this->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? $this->getReflectionServiceService()));
            $instance->injectHashService(($this->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? $this->getHashServiceService()));
            $instance->injectMvcPropertyMappingConfigurationService(($this->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? $this->getMvcPropertyMappingConfigurationServiceService()));
            $instance->injectEventDispatcher(($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()));
            $instance->injectPropertyMapper(($this->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? $this->getPropertyMapperService()));
            $instance->injectInternalFlashMessageService(($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService()));
            $instance->injectInternalExtensionService(($this->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? $this->getExtensionServiceService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Extensionmanager\\Controller\\UploadExtensionFileController']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Domain\Model\DownloadQueue' shared autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Domain\Model\DownloadQueue
     */
    protected function getDownloadQueueService()
    {
        return $this->services['TYPO3\\CMS\\Extensionmanager\\Domain\\Model\\DownloadQueue'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Domain\Model\DownloadQueue::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Domain\Repository\BulkExtensionRepositoryWriter' shared autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Domain\Repository\BulkExtensionRepositoryWriter
     */
    protected function getBulkExtensionRepositoryWriterService()
    {
        return $this->services['TYPO3\\CMS\\Extensionmanager\\Domain\\Repository\\BulkExtensionRepositoryWriter'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Domain\Repository\BulkExtensionRepositoryWriter::class, ($this->services['TYPO3\\CMS\\Extensionmanager\\Domain\\Repository\\ExtensionRepository'] ?? $this->getExtensionRepositoryService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Domain\Model\Extension::class), ($this->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? $this->getConnectionPoolService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Parser\ExtensionXmlParser::class));
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Domain\Repository\ExtensionRepository' shared autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Domain\Repository\ExtensionRepository
     */
    protected function getExtensionRepositoryService()
    {
        $this->services['TYPO3\\CMS\\Extensionmanager\\Domain\\Repository\\ExtensionRepository'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Domain\Repository\ExtensionRepository::class, ($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));

        $instance->injectQuerySettings(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Persistence\Generic\Typo3QuerySettings::class, ($this->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? $this->getContextService()), ($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService())));
        $instance->injectPersistenceManager(($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? $this->getPersistenceManagerService()));
        $instance->initializeObject();

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Remote\RemoteRegistry' shared autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Remote\RemoteRegistry
     */
    protected function getRemoteRegistryService()
    {
        $this->services['TYPO3\\CMS\\Extensionmanager\\Remote\\RemoteRegistry'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Remote\RemoteRegistry::class);

        $instance->registerRemote(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Remote\TerExtensionRemote::class, 'ter'), ['default' => true, 'enabled' => true]);

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Report\ExtensionComposerStatus' shared autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Report\ExtensionComposerStatus
     */
    protected function getExtensionComposerStatusService()
    {
        return $this->services['TYPO3\\CMS\\Extensionmanager\\Report\\ExtensionComposerStatus'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Report\ExtensionComposerStatus::class, ($this->privates['TYPO3\\CMS\\Extensionmanager\\Package\\ComposerDeficitDetector'] ?? $this->getComposerDeficitDetectorService()), ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Service\ExtensionManagementService' shared autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Service\ExtensionManagementService
     */
    protected function getExtensionManagementServiceService()
    {
        $a = ($this->services['TYPO3\\CMS\\Extensionmanager\\Utility\\FileHandlingUtility'] ?? $this->getFileHandlingUtilityService());

        if (isset($this->services['TYPO3\\CMS\\Extensionmanager\\Service\\ExtensionManagementService'])) {
            return $this->services['TYPO3\\CMS\\Extensionmanager\\Service\\ExtensionManagementService'];
        }

        $this->services['TYPO3\\CMS\\Extensionmanager\\Service\\ExtensionManagementService'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Service\ExtensionManagementService::class, ($this->services['TYPO3\\CMS\\Extensionmanager\\Remote\\RemoteRegistry'] ?? $this->getRemoteRegistryService()), $a);

        $instance->injectEventDispatcher(($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()));
        $instance->injectDownloadQueue(($this->services['TYPO3\\CMS\\Extensionmanager\\Domain\\Model\\DownloadQueue'] ?? ($this->services['TYPO3\\CMS\\Extensionmanager\\Domain\\Model\\DownloadQueue'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Domain\Model\DownloadQueue::class))));
        $instance->injectDependencyUtility(($this->services['TYPO3\\CMS\\Extensionmanager\\Utility\\DependencyUtility'] ?? $this->getDependencyUtilityService()));
        $instance->injectInstallUtility(($this->services['TYPO3\\CMS\\Extensionmanager\\Utility\\InstallUtility'] ?? $this->getInstallUtilityService()));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Utility\DependencyUtility' shared autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Utility\DependencyUtility
     */
    protected function getDependencyUtilityService()
    {
        $this->services['TYPO3\\CMS\\Extensionmanager\\Utility\\DependencyUtility'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Utility\DependencyUtility::class);

        $instance->injectExtensionRepository(($this->services['TYPO3\\CMS\\Extensionmanager\\Domain\\Repository\\ExtensionRepository'] ?? $this->getExtensionRepositoryService()));
        $instance->injectListUtility(($this->services['TYPO3\\CMS\\Extensionmanager\\Utility\\ListUtility'] ?? $this->getListUtilityService()));
        $instance->injectEmConfUtility(($this->services['TYPO3\\CMS\\Extensionmanager\\Utility\\EmConfUtility'] ?? ($this->services['TYPO3\\CMS\\Extensionmanager\\Utility\\EmConfUtility'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Utility\EmConfUtility::class))));
        $instance->injectManagementService(($this->services['TYPO3\\CMS\\Extensionmanager\\Service\\ExtensionManagementService'] ?? $this->getExtensionManagementServiceService()));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Utility\EmConfUtility' shared autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Utility\EmConfUtility
     */
    protected function getEmConfUtilityService()
    {
        return $this->services['TYPO3\\CMS\\Extensionmanager\\Utility\\EmConfUtility'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Utility\EmConfUtility::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Utility\FileHandlingUtility' shared autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Utility\FileHandlingUtility
     */
    protected function getFileHandlingUtilityService()
    {
        $this->services['TYPO3\\CMS\\Extensionmanager\\Utility\\FileHandlingUtility'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Utility\FileHandlingUtility::class);

        $instance->setLogger(($this->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $this->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Extensionmanager\\Utility\\FileHandlingUtility'));
        $instance->injectEmConfUtility(($this->services['TYPO3\\CMS\\Extensionmanager\\Utility\\EmConfUtility'] ?? ($this->services['TYPO3\\CMS\\Extensionmanager\\Utility\\EmConfUtility'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Utility\EmConfUtility::class))));
        $instance->injectInstallUtility(($this->services['TYPO3\\CMS\\Extensionmanager\\Utility\\InstallUtility'] ?? $this->getInstallUtilityService()));
        $instance->injectLanguageServiceFactory(($this->services['TYPO3\\CMS\\Core\\Localization\\LanguageServiceFactory'] ?? $this->getLanguageServiceFactoryService()));
        $instance->initializeObject();

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Utility\InstallUtility' shared autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Utility\InstallUtility
     */
    protected function getInstallUtilityService()
    {
        $this->services['TYPO3\\CMS\\Extensionmanager\\Utility\\InstallUtility'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Utility\InstallUtility::class);

        $instance->setLogger(($this->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $this->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Extensionmanager\\Utility\\InstallUtility'));
        $instance->injectEventDispatcher(($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()));
        $instance->injectFileHandlingUtility(($this->services['TYPO3\\CMS\\Extensionmanager\\Utility\\FileHandlingUtility'] ?? $this->getFileHandlingUtilityService()));
        $instance->injectListUtility(($this->services['TYPO3\\CMS\\Extensionmanager\\Utility\\ListUtility'] ?? $this->getListUtilityService()));
        $instance->injectPackageManager(($this->services['_early.TYPO3\\CMS\\Core\\Package\\PackageManager'] ?? $this->get('_early.TYPO3\\CMS\\Core\\Package\\PackageManager', 1)));
        $instance->injectCacheManager(($this->services['TYPO3\\CMS\\Core\\Cache\\CacheManager'] ?? $this->getCacheManagerService()));
        $instance->injectRegistry(($this->services['TYPO3\\CMS\\Core\\Registry'] ?? $this->getRegistryService()));
        $instance->injectBootService(($this->services['TYPO3\\CMS\\Core\\Core\\BootService'] ?? $this->getBootServiceService()));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\Utility\ListUtility' shared autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Utility\ListUtility
     */
    protected function getListUtilityService()
    {
        $this->services['TYPO3\\CMS\\Extensionmanager\\Utility\\ListUtility'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Utility\ListUtility::class);

        $instance->injectEventDispatcher(($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()));
        $instance->injectEmConfUtility(($this->services['TYPO3\\CMS\\Extensionmanager\\Utility\\EmConfUtility'] ?? ($this->services['TYPO3\\CMS\\Extensionmanager\\Utility\\EmConfUtility'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Utility\EmConfUtility::class))));
        $instance->injectExtensionRepository(($this->services['TYPO3\\CMS\\Extensionmanager\\Domain\\Repository\\ExtensionRepository'] ?? $this->getExtensionRepositoryService()));
        $instance->injectPackageManager(($this->services['_early.TYPO3\\CMS\\Core\\Package\\PackageManager'] ?? $this->get('_early.TYPO3\\CMS\\Core\\Package\\PackageManager', 1)));
        $instance->injectDependencyUtility(($this->services['TYPO3\\CMS\\Extensionmanager\\Utility\\DependencyUtility'] ?? $this->getDependencyUtilityService()));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\ViewHelpers\Be\TriggerViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\ViewHelpers\Be\TriggerViewHelper
     */
    protected function getTriggerViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\Be\\TriggerViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\ViewHelpers\Be\TriggerViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\Be\\TriggerViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\ViewHelpers\ConstraintsViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\ViewHelpers\ConstraintsViewHelper
     */
    protected function getConstraintsViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\ConstraintsViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\ViewHelpers\ConstraintsViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\ConstraintsViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\ViewHelpers\DownloadExtensionViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\ViewHelpers\DownloadExtensionViewHelper
     */
    protected function getDownloadExtensionViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\DownloadExtensionViewHelper'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\ViewHelpers\DownloadExtensionViewHelper::class);

            $instance->injectExtensionService(($this->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? $this->getExtensionServiceService()));
            $instance->injectPersistenceManager(($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? $this->getPersistenceManagerService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\DownloadExtensionViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\ViewHelpers\InstallationStateCssClassViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\ViewHelpers\InstallationStateCssClassViewHelper
     */
    protected function getInstallationStateCssClassViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\InstallationStateCssClassViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\ViewHelpers\InstallationStateCssClassViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\InstallationStateCssClassViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\ViewHelpers\ProcessAvailableActionsViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\ViewHelpers\ProcessAvailableActionsViewHelper
     */
    protected function getProcessAvailableActionsViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\ProcessAvailableActionsViewHelper'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\ViewHelpers\ProcessAvailableActionsViewHelper::class);

            $instance->injectEventDispatcher(($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\ProcessAvailableActionsViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\ViewHelpers\ReloadSqlDataViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\ViewHelpers\ReloadSqlDataViewHelper
     */
    protected function getReloadSqlDataViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\ReloadSqlDataViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\ViewHelpers\ReloadSqlDataViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\ReloadSqlDataViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\ViewHelpers\RemoveExtensionViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\ViewHelpers\RemoveExtensionViewHelper
     */
    protected function getRemoveExtensionViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\RemoveExtensionViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\ViewHelpers\RemoveExtensionViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\RemoveExtensionViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\ViewHelpers\ToggleExtensionInstallationStateViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\ViewHelpers\ToggleExtensionInstallationStateViewHelper
     */
    protected function getToggleExtensionInstallationStateViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\ToggleExtensionInstallationStateViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\ViewHelpers\ToggleExtensionInstallationStateViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\ToggleExtensionInstallationStateViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Extensionmanager\ViewHelpers\Typo3DependencyViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\ViewHelpers\Typo3DependencyViewHelper
     */
    protected function getTypo3DependencyViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\Typo3DependencyViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\ViewHelpers\Typo3DependencyViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Extensionmanager\\ViewHelpers\\Typo3DependencyViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Filelist\Controller\FileDownloadController' shared autowired service.
     *
     * @return \TYPO3\CMS\Filelist\Controller\FileDownloadController
     */
    protected function getFileDownloadControllerService()
    {
        return $this->services['TYPO3\\CMS\\Filelist\\Controller\\FileDownloadController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Filelist\Controller\FileDownloadController::class, ($this->services['TYPO3\\CMS\\Core\\Resource\\ResourceFactory'] ?? $this->getResourceFactoryService()), ($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class))), ($this->services['Psr\\Http\\Message\\StreamFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\StreamFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class))), ($this->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? $this->getContextService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Filelist\Controller\FileListController' shared autowired service.
     *
     * @return \TYPO3\CMS\Filelist\Controller\FileListController
     */
    protected function getFileListControllerService()
    {
        $a = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));
        $b = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());

        $this->services['TYPO3\\CMS\\Filelist\\Controller\\FileListController'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Filelist\Controller\FileListController::class, ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), $a, $b, ($this->services['TYPO3\\CMS\\Core\\Resource\\ResourceFactory'] ?? $this->getResourceFactoryService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $a, $b, ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())), ($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class))));

        $instance->setLogger(($this->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $this->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Filelist\\Controller\\FileListController'));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Filelist\Controller\File\CreateFolderController' shared autowired service.
     *
     * @return \TYPO3\CMS\Filelist\Controller\File\CreateFolderController
     */
    protected function getCreateFolderControllerService()
    {
        $a = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());
        $b = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));

        return $this->services['TYPO3\\CMS\\Filelist\\Controller\\File\\CreateFolderController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Filelist\Controller\File\CreateFolderController::class, $a, $b, ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), ($this->services['TYPO3\\CMS\\Core\\Resource\\ResourceFactory'] ?? $this->getResourceFactoryService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $b, $a, ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())));
    }

    /**
     * Gets the public 'TYPO3\CMS\Filelist\Controller\File\EditFileController' shared autowired service.
     *
     * @return \TYPO3\CMS\Filelist\Controller\File\EditFileController
     */
    protected function getEditFileControllerService()
    {
        $a = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());

        return $this->services['TYPO3\\CMS\\Filelist\\Controller\\File\\EditFileController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Filelist\Controller\File\EditFileController::class, $a, ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), ($this->services['TYPO3\\CMS\\Core\\Resource\\ResourceFactory'] ?? $this->getResourceFactoryService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class))), $a, ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())));
    }

    /**
     * Gets the public 'TYPO3\CMS\Filelist\Controller\File\FileUploadController' shared autowired service.
     *
     * @return \TYPO3\CMS\Filelist\Controller\File\FileUploadController
     */
    protected function getFileUploadControllerService()
    {
        $a = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());
        $b = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));

        return $this->services['TYPO3\\CMS\\Filelist\\Controller\\File\\FileUploadController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Filelist\Controller\File\FileUploadController::class, $a, $b, ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), ($this->services['TYPO3\\CMS\\Core\\Resource\\ResourceFactory'] ?? $this->getResourceFactoryService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $b, $a, ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())));
    }

    /**
     * Gets the public 'TYPO3\CMS\Filelist\Controller\File\RenameFileController' shared autowired service.
     *
     * @return \TYPO3\CMS\Filelist\Controller\File\RenameFileController
     */
    protected function getRenameFileControllerService()
    {
        $a = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());
        $b = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));

        return $this->services['TYPO3\\CMS\\Filelist\\Controller\\File\\RenameFileController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Filelist\Controller\File\RenameFileController::class, $a, $b, ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), ($this->services['TYPO3\\CMS\\Core\\Resource\\ResourceFactory'] ?? $this->getResourceFactoryService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $b, $a, ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())));
    }

    /**
     * Gets the public 'TYPO3\CMS\Filelist\Controller\File\ReplaceFileController' shared autowired service.
     *
     * @return \TYPO3\CMS\Filelist\Controller\File\ReplaceFileController
     */
    protected function getReplaceFileControllerService()
    {
        $a = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());
        $b = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));

        return $this->services['TYPO3\\CMS\\Filelist\\Controller\\File\\ReplaceFileController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Filelist\Controller\File\ReplaceFileController::class, $a, $b, ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), ($this->services['TYPO3\\CMS\\Core\\Resource\\ResourceFactory'] ?? $this->getResourceFactoryService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $b, $a, ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())));
    }

    /**
     * Gets the public 'TYPO3\CMS\FluidStyledContent\ViewHelpers\Link\ClickEnlargeViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\FluidStyledContent\ViewHelpers\Link\ClickEnlargeViewHelper
     */
    protected function getClickEnlargeViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\FluidStyledContent\\ViewHelpers\\Link\\ClickEnlargeViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\FluidStyledContent\ViewHelpers\Link\ClickEnlargeViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\FluidStyledContent\\ViewHelpers\\Link\\ClickEnlargeViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\Core\Rendering\RenderingContext' service.
     *
     * @return \TYPO3\CMS\Fluid\Core\Rendering\RenderingContext
     *
     * @deprecated Since typo3/cms-fluid 11.3: Injection/Instantiation of "TYPO3\CMS\Fluid\Core\Rendering\RenderingContext" is deprecated. Please use TYPO3\CMS\Fluid\Core\Rendering\RenderingContextFactory->create().
     */
    protected function getRenderingContextService()
    {
        trigger_deprecation('typo3/cms-fluid', '11.3', 'Injection/Instantiation of "TYPO3\\CMS\\Fluid\\Core\\Rendering\\RenderingContext" is deprecated. Please use TYPO3\\CMS\\Fluid\\Core\\Rendering\\RenderingContextFactory->create().');

        $this->factories['TYPO3\\CMS\\Fluid\\Core\\Rendering\\RenderingContext'] = function () {
            return ($this->services['TYPO3\\CMS\\Fluid\\Core\\Rendering\\RenderingContextFactory'] ?? $this->getRenderingContextFactoryService())->create();
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\Core\\Rendering\\RenderingContext']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\Core\Rendering\RenderingContextFactory' shared service.
     *
     * @return \TYPO3\CMS\Fluid\Core\Rendering\RenderingContextFactory
     */
    protected function getRenderingContextFactoryService()
    {
        return $this->services['TYPO3\\CMS\\Fluid\\Core\\Rendering\\RenderingContextFactory'] = \TYPO3\CMS\Fluid\ServiceProvider::getRenderingContextFactory($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\Core\ViewHelper\ViewHelperResolverFactory' shared service.
     *
     * @return \TYPO3\CMS\Fluid\Core\ViewHelper\ViewHelperResolverFactory
     */
    protected function getViewHelperResolverFactoryService()
    {
        return $this->services['TYPO3\\CMS\\Fluid\\Core\\ViewHelper\\ViewHelperResolverFactory'] = \TYPO3\CMS\Fluid\ServiceProvider::getViewHelperResolverFactory($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\Core\ViewHelper\ViewHelperResolverFactoryInterface' shared service.
     *
     * @return \TYPO3\CMS\Fluid\Core\ViewHelper\ViewHelperResolverFactoryInterface
     */
    protected function getViewHelperResolverFactoryInterfaceService()
    {
        return $this->services['TYPO3\\CMS\\Fluid\\Core\\ViewHelper\\ViewHelperResolverFactoryInterface'] = \TYPO3\CMS\Fluid\ServiceProvider::getViewHelperResolverFactoryInterface($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Asset\CssViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Asset\CssViewHelper
     */
    protected function getCssViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Asset\\CssViewHelper'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Asset\CssViewHelper::class);

            $instance->injectAssetCollector(($this->services['TYPO3\\CMS\\Core\\Page\\AssetCollector'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\AssetCollector'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\AssetCollector::class))));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Asset\\CssViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Asset\ScriptViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Asset\ScriptViewHelper
     */
    protected function getScriptViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Asset\\ScriptViewHelper'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Asset\ScriptViewHelper::class);

            $instance->injectAssetCollector(($this->services['TYPO3\\CMS\\Core\\Page\\AssetCollector'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\AssetCollector'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\AssetCollector::class))));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Asset\\ScriptViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\BaseViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\BaseViewHelper
     */
    protected function getBaseViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\BaseViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\BaseViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\BaseViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Be\Buttons\CshViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Be\Buttons\CshViewHelper
     */
    protected function getCshViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Buttons\\CshViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Be\Buttons\CshViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Buttons\\CshViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Be\Buttons\ShortcutViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Be\Buttons\ShortcutViewHelper
     */
    protected function getShortcutViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Buttons\\ShortcutViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Be\Buttons\ShortcutViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Buttons\\ShortcutViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Be\ContainerViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Be\ContainerViewHelper
     */
    protected function getContainerViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\ContainerViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Be\ContainerViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\ContainerViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Be\InfoboxViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Be\InfoboxViewHelper
     */
    protected function getInfoboxViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\InfoboxViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Be\InfoboxViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\InfoboxViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Be\Labels\CshViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Be\Labels\CshViewHelper
     */
    protected function getCshViewHelper2Service()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Labels\\CshViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Be\Labels\CshViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Labels\\CshViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Be\LinkViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Be\LinkViewHelper
     */
    protected function getLinkViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\LinkViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Be\LinkViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\LinkViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Be\Menus\ActionMenuItemGroupViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Be\Menus\ActionMenuItemGroupViewHelper
     */
    protected function getActionMenuItemGroupViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Menus\\ActionMenuItemGroupViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Be\Menus\ActionMenuItemGroupViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Menus\\ActionMenuItemGroupViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Be\Menus\ActionMenuItemViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Be\Menus\ActionMenuItemViewHelper
     */
    protected function getActionMenuItemViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Menus\\ActionMenuItemViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Be\Menus\ActionMenuItemViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Menus\\ActionMenuItemViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Be\Menus\ActionMenuViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Be\Menus\ActionMenuViewHelper
     */
    protected function getActionMenuViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Menus\\ActionMenuViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Be\Menus\ActionMenuViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Menus\\ActionMenuViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Be\PageInfoViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Be\PageInfoViewHelper
     */
    protected function getPageInfoViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\PageInfoViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Be\PageInfoViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\PageInfoViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Be\PagePathViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Be\PagePathViewHelper
     */
    protected function getPagePathViewHelper2Service()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\PagePathViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Be\PagePathViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\PagePathViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Be\PageRendererViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Be\PageRendererViewHelper
     */
    protected function getPageRendererViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\PageRendererViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Be\PageRendererViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\PageRendererViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Be\Security\IfAuthenticatedViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Be\Security\IfAuthenticatedViewHelper
     */
    protected function getIfAuthenticatedViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Security\\IfAuthenticatedViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Be\Security\IfAuthenticatedViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Security\\IfAuthenticatedViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Be\Security\IfHasRoleViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Be\Security\IfHasRoleViewHelper
     */
    protected function getIfHasRoleViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Security\\IfHasRoleViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Be\Security\IfHasRoleViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\Security\\IfHasRoleViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Be\TableListViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Be\TableListViewHelper
     */
    protected function getTableListViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\TableListViewHelper'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Be\TableListViewHelper::class);

            $instance->injectConfigurationManager(($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\TableListViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Be\UriViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Be\UriViewHelper
     */
    protected function getUriViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\UriViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Be\UriViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Be\\UriViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\CObjectViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\CObjectViewHelper
     */
    protected function getCObjectViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\CObjectViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\CObjectViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\CObjectViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\DebugViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\DebugViewHelper
     */
    protected function getDebugViewHelper2Service()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\DebugViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\DebugViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\DebugViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Debug\RenderViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Debug\RenderViewHelper
     */
    protected function getRenderViewHelper2Service()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Debug\\RenderViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Debug\RenderViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Debug\\RenderViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\FlashMessagesViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\FlashMessagesViewHelper
     */
    protected function getFlashMessagesViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\FlashMessagesViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\FlashMessagesViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\FlashMessagesViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\FormViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\FormViewHelper
     */
    protected function getFormViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\FormViewHelper'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\FormViewHelper::class);

            $instance->injectHashService(($this->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? $this->getHashServiceService()));
            $instance->injectMvcPropertyMappingConfigurationService(($this->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? $this->getMvcPropertyMappingConfigurationServiceService()));
            $instance->injectExtensionService(($this->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? $this->getExtensionServiceService()));
            $instance->injectPersistenceManager(($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? $this->getPersistenceManagerService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\FormViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Form\ButtonViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Form\ButtonViewHelper
     */
    protected function getButtonViewHelper2Service()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\ButtonViewHelper'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Form\ButtonViewHelper::class);

            $instance->injectConfigurationManager(($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));
            $instance->injectPersistenceManager(($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? $this->getPersistenceManagerService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\ButtonViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Form\CheckboxViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Form\CheckboxViewHelper
     */
    protected function getCheckboxViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\CheckboxViewHelper'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Form\CheckboxViewHelper::class);

            $instance->injectConfigurationManager(($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));
            $instance->injectPersistenceManager(($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? $this->getPersistenceManagerService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\CheckboxViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Form\HiddenViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Form\HiddenViewHelper
     */
    protected function getHiddenViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\HiddenViewHelper'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Form\HiddenViewHelper::class);

            $instance->injectConfigurationManager(($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));
            $instance->injectPersistenceManager(($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? $this->getPersistenceManagerService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\HiddenViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Form\PasswordViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Form\PasswordViewHelper
     */
    protected function getPasswordViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\PasswordViewHelper'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Form\PasswordViewHelper::class);

            $instance->injectConfigurationManager(($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));
            $instance->injectPersistenceManager(($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? $this->getPersistenceManagerService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\PasswordViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Form\RadioViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Form\RadioViewHelper
     */
    protected function getRadioViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\RadioViewHelper'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Form\RadioViewHelper::class);

            $instance->injectConfigurationManager(($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));
            $instance->injectPersistenceManager(($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? $this->getPersistenceManagerService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\RadioViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Form\SelectViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Form\SelectViewHelper
     */
    protected function getSelectViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\SelectViewHelper'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Form\SelectViewHelper::class);

            $instance->injectConfigurationManager(($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));
            $instance->injectPersistenceManager(($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? $this->getPersistenceManagerService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\SelectViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Form\Select\OptgroupViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Form\Select\OptgroupViewHelper
     */
    protected function getOptgroupViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\Select\\OptgroupViewHelper'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Form\Select\OptgroupViewHelper::class);

            $instance->injectConfigurationManager(($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));
            $instance->injectPersistenceManager(($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? $this->getPersistenceManagerService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\Select\\OptgroupViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Form\Select\OptionViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Form\Select\OptionViewHelper
     */
    protected function getOptionViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\Select\\OptionViewHelper'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Form\Select\OptionViewHelper::class);

            $instance->injectConfigurationManager(($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));
            $instance->injectPersistenceManager(($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? $this->getPersistenceManagerService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\Select\\OptionViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Form\SubmitViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Form\SubmitViewHelper
     */
    protected function getSubmitViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\SubmitViewHelper'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Form\SubmitViewHelper::class);

            $instance->injectConfigurationManager(($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));
            $instance->injectPersistenceManager(($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? $this->getPersistenceManagerService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\SubmitViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Form\TextareaViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Form\TextareaViewHelper
     */
    protected function getTextareaViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\TextareaViewHelper'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Form\TextareaViewHelper::class);

            $instance->injectConfigurationManager(($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));
            $instance->injectPersistenceManager(($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? $this->getPersistenceManagerService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\TextareaViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Form\TextfieldViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Form\TextfieldViewHelper
     */
    protected function getTextfieldViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\TextfieldViewHelper'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Form\TextfieldViewHelper::class);

            $instance->injectConfigurationManager(($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));
            $instance->injectPersistenceManager(($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? $this->getPersistenceManagerService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\TextfieldViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Form\UploadViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Form\UploadViewHelper
     */
    protected function getUploadViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\UploadViewHelper'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Form\UploadViewHelper::class);

            $instance->injectConfigurationManager(($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));
            $instance->injectPersistenceManager(($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? $this->getPersistenceManagerService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\UploadViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Form\ValidationResultsViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Form\ValidationResultsViewHelper
     */
    protected function getValidationResultsViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\ValidationResultsViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Form\ValidationResultsViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Form\\ValidationResultsViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Format\BytesViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Format\BytesViewHelper
     */
    protected function getBytesViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\BytesViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Format\BytesViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\BytesViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Format\CaseViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Format\CaseViewHelper
     */
    protected function getCaseViewHelper2Service()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\CaseViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Format\CaseViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\CaseViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Format\CropViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Format\CropViewHelper
     */
    protected function getCropViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\CropViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Format\CropViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\CropViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Format\CurrencyViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Format\CurrencyViewHelper
     */
    protected function getCurrencyViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\CurrencyViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Format\CurrencyViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\CurrencyViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Format\DateViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Format\DateViewHelper
     */
    protected function getDateViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\DateViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Format\DateViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\DateViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Format\HtmlViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Format\HtmlViewHelper
     */
    protected function getHtmlViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\HtmlViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Format\HtmlViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\HtmlViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Format\HtmlentitiesDecodeViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Format\HtmlentitiesDecodeViewHelper
     */
    protected function getHtmlentitiesDecodeViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\HtmlentitiesDecodeViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Format\HtmlentitiesDecodeViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\HtmlentitiesDecodeViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Format\HtmlentitiesViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Format\HtmlentitiesViewHelper
     */
    protected function getHtmlentitiesViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\HtmlentitiesViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Format\HtmlentitiesViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\HtmlentitiesViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Format\JsonViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Format\JsonViewHelper
     */
    protected function getJsonViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\JsonViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Format\JsonViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\JsonViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Format\Nl2brViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Format\Nl2brViewHelper
     */
    protected function getNl2brViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\Nl2brViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Format\Nl2brViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\Nl2brViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Format\NumberViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Format\NumberViewHelper
     */
    protected function getNumberViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\NumberViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Format\NumberViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\NumberViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Format\PaddingViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Format\PaddingViewHelper
     */
    protected function getPaddingViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\PaddingViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Format\PaddingViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\PaddingViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Format\StripTagsViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Format\StripTagsViewHelper
     */
    protected function getStripTagsViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\StripTagsViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Format\StripTagsViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\StripTagsViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Format\UrlencodeViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Format\UrlencodeViewHelper
     */
    protected function getUrlencodeViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\UrlencodeViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Format\UrlencodeViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Format\\UrlencodeViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\ImageViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\ImageViewHelper
     */
    protected function getImageViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\ImageViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\ImageViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\ImageViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Link\ActionViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Link\ActionViewHelper
     */
    protected function getActionViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\ActionViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Link\ActionViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\ActionViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Link\EmailViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Link\EmailViewHelper
     */
    protected function getEmailViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\EmailViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Link\EmailViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\EmailViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Link\ExternalViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Link\ExternalViewHelper
     */
    protected function getExternalViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\ExternalViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Link\ExternalViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\ExternalViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Link\FileViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Link\FileViewHelper
     */
    protected function getFileViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\FileViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Link\FileViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\FileViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Link\PageViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Link\PageViewHelper
     */
    protected function getPageViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\PageViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Link\PageViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\PageViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Link\TypolinkViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Link\TypolinkViewHelper
     */
    protected function getTypolinkViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\TypolinkViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Link\TypolinkViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Link\\TypolinkViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\MediaViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\MediaViewHelper
     */
    protected function getMediaViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\MediaViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\MediaViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\MediaViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\RenderViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\RenderViewHelper
     */
    protected function getRenderViewHelper3Service()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\RenderViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\RenderViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\RenderViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Sanitize\HtmlViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Sanitize\HtmlViewHelper
     */
    protected function getHtmlViewHelper2Service()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Sanitize\\HtmlViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Sanitize\HtmlViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Sanitize\\HtmlViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Security\IfAuthenticatedViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Security\IfAuthenticatedViewHelper
     */
    protected function getIfAuthenticatedViewHelper2Service()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Security\\IfAuthenticatedViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Security\IfAuthenticatedViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Security\\IfAuthenticatedViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Security\IfHasRoleViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Security\IfHasRoleViewHelper
     */
    protected function getIfHasRoleViewHelper2Service()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Security\\IfHasRoleViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Security\IfHasRoleViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Security\\IfHasRoleViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Transform\HtmlViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Transform\HtmlViewHelper
     */
    protected function getHtmlViewHelper3Service()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Transform\\HtmlViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Transform\HtmlViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Transform\\HtmlViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\TranslateViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\TranslateViewHelper
     */
    protected function getTranslateViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\TranslateViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\TranslateViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\TranslateViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Uri\ActionViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Uri\ActionViewHelper
     */
    protected function getActionViewHelper2Service()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\ActionViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Uri\ActionViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\ActionViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Uri\EmailViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Uri\EmailViewHelper
     */
    protected function getEmailViewHelper2Service()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\EmailViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Uri\EmailViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\EmailViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Uri\ExternalViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Uri\ExternalViewHelper
     */
    protected function getExternalViewHelper2Service()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\ExternalViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Uri\ExternalViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\ExternalViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Uri\ImageViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Uri\ImageViewHelper
     */
    protected function getImageViewHelper2Service()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\ImageViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Uri\ImageViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\ImageViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Uri\PageViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Uri\PageViewHelper
     */
    protected function getPageViewHelper2Service()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\PageViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Uri\PageViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\PageViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Uri\ResourceViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Uri\ResourceViewHelper
     */
    protected function getResourceViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\ResourceViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Uri\ResourceViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\ResourceViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\ViewHelpers\Uri\TypolinkViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\ViewHelpers\Uri\TypolinkViewHelper
     */
    protected function getTypolinkViewHelper2Service()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\TypolinkViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\ViewHelpers\Uri\TypolinkViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\ViewHelpers\\Uri\\TypolinkViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\View\StandaloneView' service.
     *
     * @return \TYPO3\CMS\Fluid\View\StandaloneView
     */
    protected function getStandaloneViewService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\View\\StandaloneView'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\View\StandaloneView::class);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\View\\StandaloneView']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Fluid\View\TemplateView' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\View\TemplateView
     */
    protected function getTemplateViewService()
    {
        $this->factories['TYPO3\\CMS\\Fluid\\View\\TemplateView'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Fluid\View\TemplateView::class, NULL);
        };

        return $this->factories['TYPO3\\CMS\\Fluid\\View\\TemplateView']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Controller\FormEditorController' autowired service.
     *
     * @return \TYPO3\CMS\Form\Controller\FormEditorController
     */
    protected function getFormEditorControllerService()
    {
        $this->factories['TYPO3\\CMS\\Form\\Controller\\FormEditorController'] = function () {
            $a = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));
            $b = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());
            $c = ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService());

            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Controller\FormEditorController::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $a, $b, $c), $a, $b, ($this->services['TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinitionConversionService'] ?? ($this->services['TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinitionConversionService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Domain\Configuration\FormDefinitionConversionService::class))));

            $instance->injectFormPersistenceManager(($this->services['TYPO3\\CMS\\Form\\Mvc\\Persistence\\FormPersistenceManagerInterface'] ?? $this->getFormPersistenceManagerInterfaceService()));
            $instance->injectResponseFactory(($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class))));
            $instance->injectStreamFactory(($this->services['Psr\\Http\\Message\\StreamFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\StreamFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class))));
            $instance->injectConfigurationManager(($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));
            $instance->injectObjectManager(($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));
            $instance->injectSignalSlotDispatcher(($this->services['TYPO3\\CMS\\Extbase\\SignalSlot\\Dispatcher'] ?? $this->getDispatcher2Service()));
            $instance->injectValidatorResolver(($this->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? $this->getValidatorResolverService()));
            $instance->injectViewResolver(($this->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ?? ($this->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $this))));
            $instance->injectReflectionService(($this->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? $this->getReflectionServiceService()));
            $instance->injectHashService(($this->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? $this->getHashServiceService()));
            $instance->injectMvcPropertyMappingConfigurationService(($this->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? $this->getMvcPropertyMappingConfigurationServiceService()));
            $instance->injectEventDispatcher(($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()));
            $instance->injectPropertyMapper(($this->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? $this->getPropertyMapperService()));
            $instance->injectInternalFlashMessageService($c);
            $instance->injectInternalExtensionService(($this->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? $this->getExtensionServiceService()));
            $instance->initializeObject();

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Form\\Controller\\FormEditorController']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Controller\FormFrontendController' autowired service.
     *
     * @return \TYPO3\CMS\Form\Controller\FormFrontendController
     */
    protected function getFormFrontendControllerService()
    {
        $this->factories['TYPO3\\CMS\\Form\\Controller\\FormFrontendController'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Controller\FormFrontendController::class);

            $instance->injectFormPersistenceManager(($this->services['TYPO3\\CMS\\Form\\Mvc\\Persistence\\FormPersistenceManagerInterface'] ?? $this->getFormPersistenceManagerInterfaceService()));
            $instance->injectResponseFactory(($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class))));
            $instance->injectStreamFactory(($this->services['Psr\\Http\\Message\\StreamFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\StreamFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class))));
            $instance->injectConfigurationManager(($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));
            $instance->injectObjectManager(($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));
            $instance->injectSignalSlotDispatcher(($this->services['TYPO3\\CMS\\Extbase\\SignalSlot\\Dispatcher'] ?? $this->getDispatcher2Service()));
            $instance->injectValidatorResolver(($this->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? $this->getValidatorResolverService()));
            $instance->injectViewResolver(($this->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ?? ($this->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $this))));
            $instance->injectReflectionService(($this->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? $this->getReflectionServiceService()));
            $instance->injectHashService(($this->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? $this->getHashServiceService()));
            $instance->injectMvcPropertyMappingConfigurationService(($this->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? $this->getMvcPropertyMappingConfigurationServiceService()));
            $instance->injectEventDispatcher(($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()));
            $instance->injectPropertyMapper(($this->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? $this->getPropertyMapperService()));
            $instance->injectInternalFlashMessageService(($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService()));
            $instance->injectInternalExtensionService(($this->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? $this->getExtensionServiceService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Form\\Controller\\FormFrontendController']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Controller\FormManagerController' autowired service.
     *
     * @return \TYPO3\CMS\Form\Controller\FormManagerController
     */
    protected function getFormManagerControllerService()
    {
        $this->factories['TYPO3\\CMS\\Form\\Controller\\FormManagerController'] = function () {
            $a = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));
            $b = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());
            $c = ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService());

            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Controller\FormManagerController::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $a, $b, $c), $a, $b, ($this->privates['TYPO3\\CMS\\Form\\Service\\DatabaseService'] ?? ($this->privates['TYPO3\\CMS\\Form\\Service\\DatabaseService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Service\DatabaseService::class))));

            $instance->injectFormPersistenceManager(($this->services['TYPO3\\CMS\\Form\\Mvc\\Persistence\\FormPersistenceManagerInterface'] ?? $this->getFormPersistenceManagerInterfaceService()));
            $instance->injectResponseFactory(($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class))));
            $instance->injectStreamFactory(($this->services['Psr\\Http\\Message\\StreamFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\StreamFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class))));
            $instance->injectConfigurationManager(($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));
            $instance->injectObjectManager(($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));
            $instance->injectSignalSlotDispatcher(($this->services['TYPO3\\CMS\\Extbase\\SignalSlot\\Dispatcher'] ?? $this->getDispatcher2Service()));
            $instance->injectValidatorResolver(($this->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? $this->getValidatorResolverService()));
            $instance->injectViewResolver(($this->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ?? ($this->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $this))));
            $instance->injectReflectionService(($this->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? $this->getReflectionServiceService()));
            $instance->injectHashService(($this->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? $this->getHashServiceService()));
            $instance->injectMvcPropertyMappingConfigurationService(($this->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? $this->getMvcPropertyMappingConfigurationServiceService()));
            $instance->injectEventDispatcher(($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()));
            $instance->injectPropertyMapper(($this->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? $this->getPropertyMapperService()));
            $instance->injectInternalFlashMessageService($c);
            $instance->injectInternalExtensionService(($this->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? $this->getExtensionServiceService()));
            $instance->initializeObject();

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Form\\Controller\\FormManagerController']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Domain\Configuration\ConfigurationService' shared autowired service.
     *
     * @return \TYPO3\CMS\Form\Domain\Configuration\ConfigurationService
     */
    protected function getConfigurationService2Service()
    {
        return $this->services['TYPO3\\CMS\\Form\\Domain\\Configuration\\ConfigurationService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Domain\Configuration\ConfigurationService::class, ($this->services['TYPO3\\CMS\\Form\\Mvc\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManager2Service()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Domain\Configuration\FormDefinitionConversionService' shared autowired service.
     *
     * @return \TYPO3\CMS\Form\Domain\Configuration\FormDefinitionConversionService
     */
    protected function getFormDefinitionConversionServiceService()
    {
        return $this->services['TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinitionConversionService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Domain\Configuration\FormDefinitionConversionService::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Domain\Configuration\FormDefinitionValidationService' shared autowired service.
     *
     * @return \TYPO3\CMS\Form\Domain\Configuration\FormDefinitionValidationService
     */
    protected function getFormDefinitionValidationServiceService()
    {
        return $this->services['TYPO3\\CMS\\Form\\Domain\\Configuration\\FormDefinitionValidationService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Domain\Configuration\FormDefinitionValidationService::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Domain\Factory\ArrayFormFactory' autowired service.
     *
     * @return \TYPO3\CMS\Form\Domain\Factory\ArrayFormFactory
     */
    protected function getArrayFormFactoryService()
    {
        $this->factories['TYPO3\\CMS\\Form\\Domain\\Factory\\ArrayFormFactory'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Domain\Factory\ArrayFormFactory::class);
        };

        return $this->factories['TYPO3\\CMS\\Form\\Domain\\Factory\\ArrayFormFactory']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Domain\Finishers\ClosureFinisher' autowired service.
     *
     * @return \TYPO3\CMS\Form\Domain\Finishers\ClosureFinisher
     */
    protected function getClosureFinisherService()
    {
        $this->factories['TYPO3\\CMS\\Form\\Domain\\Finishers\\ClosureFinisher'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Domain\Finishers\ClosureFinisher::class);

            $instance->injectObjectManager(($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Form\\Domain\\Finishers\\ClosureFinisher']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Domain\Finishers\ConfirmationFinisher' autowired service.
     *
     * @return \TYPO3\CMS\Form\Domain\Finishers\ConfirmationFinisher
     */
    protected function getConfirmationFinisherService()
    {
        $this->factories['TYPO3\\CMS\\Form\\Domain\\Finishers\\ConfirmationFinisher'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Domain\Finishers\ConfirmationFinisher::class);

            $a = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer::class, NULL, $this);
            $a->setLogger(($this->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $this->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectRenderer'));

            $instance->injectConfigurationManager(($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));
            $instance->injectContentObjectRenderer($a);
            $instance->injectObjectManager(($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Form\\Domain\\Finishers\\ConfirmationFinisher']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Domain\Finishers\DeleteUploadsFinisher' autowired service.
     *
     * @return \TYPO3\CMS\Form\Domain\Finishers\DeleteUploadsFinisher
     */
    protected function getDeleteUploadsFinisherService()
    {
        $this->factories['TYPO3\\CMS\\Form\\Domain\\Finishers\\DeleteUploadsFinisher'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Domain\Finishers\DeleteUploadsFinisher::class);

            $instance->injectObjectManager(($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Form\\Domain\\Finishers\\DeleteUploadsFinisher']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Domain\Finishers\EmailFinisher' autowired service.
     *
     * @return \TYPO3\CMS\Form\Domain\Finishers\EmailFinisher
     */
    protected function getEmailFinisherService()
    {
        $this->factories['TYPO3\\CMS\\Form\\Domain\\Finishers\\EmailFinisher'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Domain\Finishers\EmailFinisher::class);

            $instance->injectObjectManager(($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Form\\Domain\\Finishers\\EmailFinisher']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Domain\Finishers\FlashMessageFinisher' autowired service.
     *
     * @return \TYPO3\CMS\Form\Domain\Finishers\FlashMessageFinisher
     */
    protected function getFlashMessageFinisherService()
    {
        $this->factories['TYPO3\\CMS\\Form\\Domain\\Finishers\\FlashMessageFinisher'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Domain\Finishers\FlashMessageFinisher::class);

            $instance->injectFlashMessageService(($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService()));
            $instance->injectExtensionService(($this->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? $this->getExtensionServiceService()));
            $instance->injectObjectManager(($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Form\\Domain\\Finishers\\FlashMessageFinisher']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Domain\Finishers\RedirectFinisher' autowired service.
     *
     * @return \TYPO3\CMS\Form\Domain\Finishers\RedirectFinisher
     */
    protected function getRedirectFinisherService()
    {
        $this->factories['TYPO3\\CMS\\Form\\Domain\\Finishers\\RedirectFinisher'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Domain\Finishers\RedirectFinisher::class);

            $instance->injectObjectManager(($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Form\\Domain\\Finishers\\RedirectFinisher']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Domain\Finishers\SaveToDatabaseFinisher' autowired service.
     *
     * @return \TYPO3\CMS\Form\Domain\Finishers\SaveToDatabaseFinisher
     */
    protected function getSaveToDatabaseFinisherService()
    {
        $this->factories['TYPO3\\CMS\\Form\\Domain\\Finishers\\SaveToDatabaseFinisher'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Domain\Finishers\SaveToDatabaseFinisher::class);

            $instance->injectObjectManager(($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Form\\Domain\\Finishers\\SaveToDatabaseFinisher']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Domain\Renderer\FluidFormRenderer' autowired service.
     *
     * @return \TYPO3\CMS\Form\Domain\Renderer\FluidFormRenderer
     */
    protected function getFluidFormRendererService()
    {
        $this->factories['TYPO3\\CMS\\Form\\Domain\\Renderer\\FluidFormRenderer'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Domain\Renderer\FluidFormRenderer::class);
        };

        return $this->factories['TYPO3\\CMS\\Form\\Domain\\Renderer\\FluidFormRenderer']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Domain\Runtime\FormRuntime' autowired service.
     *
     * @return \TYPO3\CMS\Form\Domain\Runtime\FormRuntime
     */
    protected function getFormRuntimeService()
    {
        $this->factories['TYPO3\\CMS\\Form\\Domain\\Runtime\\FormRuntime'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Domain\Runtime\FormRuntime::class, $this, ($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()), ($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()), ($this->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? $this->getHashServiceService()));
        };

        return $this->factories['TYPO3\\CMS\\Form\\Domain\\Runtime\\FormRuntime']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\EventListener\ProcessFileListActionsEventListener' shared autowired service.
     *
     * @return \TYPO3\CMS\Form\EventListener\ProcessFileListActionsEventListener
     */
    protected function getProcessFileListActionsEventListenerService()
    {
        return $this->services['TYPO3\\CMS\\Form\\EventListener\\ProcessFileListActionsEventListener'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\EventListener\ProcessFileListActionsEventListener::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Mvc\Configuration\ConfigurationManager' shared autowired service.
     *
     * @return \TYPO3\CMS\Form\Mvc\Configuration\ConfigurationManager
     */
    protected function getConfigurationManager2Service()
    {
        $this->services['TYPO3\\CMS\\Form\\Mvc\\Configuration\\ConfigurationManager'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Mvc\Configuration\ConfigurationManager::class, $this);

        $instance->injectYamlSource(($this->privates['TYPO3\\CMS\\Form\\Mvc\\Configuration\\YamlSource'] ?? $this->getYamlSourceService()));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Mvc\Configuration\TypoScriptService' shared autowired service.
     *
     * @return \TYPO3\CMS\Form\Mvc\Configuration\TypoScriptService
     */
    protected function getTypoScriptService2Service()
    {
        return $this->services['TYPO3\\CMS\\Form\\Mvc\\Configuration\\TypoScriptService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Mvc\Configuration\TypoScriptService::class, ($this->services['TYPO3\\CMS\\Core\\TypoScript\\TypoScriptService'] ?? $this->getTypoScriptServiceService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Mvc\Persistence\FormPersistenceManagerInterface' shared autowired service.
     *
     * @return \TYPO3\CMS\Form\Mvc\Persistence\FormPersistenceManager
     */
    protected function getFormPersistenceManagerInterfaceService()
    {
        return $this->services['TYPO3\\CMS\\Form\\Mvc\\Persistence\\FormPersistenceManagerInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Mvc\Persistence\FormPersistenceManager::class, ($this->privates['TYPO3\\CMS\\Form\\Mvc\\Configuration\\YamlSource'] ?? $this->getYamlSourceService()), ($this->services['TYPO3\\CMS\\Core\\Resource\\StorageRepository'] ?? $this->getStorageRepositoryService()), ($this->services['TYPO3\\CMS\\Form\\Slot\\FilePersistenceSlot'] ?? ($this->services['TYPO3\\CMS\\Form\\Slot\\FilePersistenceSlot'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Slot\FilePersistenceSlot::class))), ($this->services['TYPO3\\CMS\\Core\\Resource\\ResourceFactory'] ?? $this->getResourceFactoryService()), ($this->services['TYPO3\\CMS\\Form\\Mvc\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManager2Service()), ($this->services['TYPO3\\CMS\\Core\\Cache\\CacheManager'] ?? $this->getCacheManagerService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Mvc\ProcessingRule' autowired service.
     *
     * @return \TYPO3\CMS\Form\Mvc\ProcessingRule
     */
    protected function getProcessingRuleService()
    {
        $this->factories['TYPO3\\CMS\\Form\\Mvc\\ProcessingRule'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Mvc\ProcessingRule::class, ($this->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? $this->getPropertyMapperService()));
        };

        return $this->factories['TYPO3\\CMS\\Form\\Mvc\\ProcessingRule']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Mvc\Property\TypeConverter\FormDefinitionArrayConverter' shared autowired service.
     *
     * @return \TYPO3\CMS\Form\Mvc\Property\TypeConverter\FormDefinitionArrayConverter
     */
    protected function getFormDefinitionArrayConverterService()
    {
        $this->services['TYPO3\\CMS\\Form\\Mvc\\Property\\TypeConverter\\FormDefinitionArrayConverter'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Mvc\Property\TypeConverter\FormDefinitionArrayConverter::class);

        $instance->injectObjectManager(($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Mvc\Property\TypeConverter\UploadedFileReferenceConverter' shared autowired service.
     *
     * @return \TYPO3\CMS\Form\Mvc\Property\TypeConverter\UploadedFileReferenceConverter
     */
    protected function getUploadedFileReferenceConverterService()
    {
        $this->services['TYPO3\\CMS\\Form\\Mvc\\Property\\TypeConverter\\UploadedFileReferenceConverter'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Mvc\Property\TypeConverter\UploadedFileReferenceConverter::class);

        $instance->injectResourceFactory(($this->services['TYPO3\\CMS\\Core\\Resource\\ResourceFactory'] ?? $this->getResourceFactoryService()));
        $instance->injectHashService(($this->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? $this->getHashServiceService()));
        $instance->injectPersistenceManager(($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? $this->getPersistenceManagerService()));
        $instance->injectObjectManager(($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Service\TranslationService' shared autowired service.
     *
     * @return \TYPO3\CMS\Form\Service\TranslationService
     */
    protected function getTranslationServiceService()
    {
        return $this->services['TYPO3\\CMS\\Form\\Service\\TranslationService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Service\TranslationService::class, ($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Slot\FilePersistenceSlot' shared autowired service.
     *
     * @return \TYPO3\CMS\Form\Slot\FilePersistenceSlot
     */
    protected function getFilePersistenceSlotService()
    {
        return $this->services['TYPO3\\CMS\\Form\\Slot\\FilePersistenceSlot'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Slot\FilePersistenceSlot::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\Slot\ResourcePublicationSlot' shared autowired service.
     *
     * @return \TYPO3\CMS\Form\Slot\ResourcePublicationSlot
     */
    protected function getResourcePublicationSlotService()
    {
        return $this->services['TYPO3\\CMS\\Form\\Slot\\ResourcePublicationSlot'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Slot\ResourcePublicationSlot::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\SoftReference\FormPersistenceIdentifierSoftReferenceParser' shared autowired service.
     *
     * @return \TYPO3\CMS\Form\SoftReference\FormPersistenceIdentifierSoftReferenceParser
     */
    protected function getFormPersistenceIdentifierSoftReferenceParserService()
    {
        return $this->services['TYPO3\\CMS\\Form\\SoftReference\\FormPersistenceIdentifierSoftReferenceParser'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\SoftReference\FormPersistenceIdentifierSoftReferenceParser::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\ViewHelpers\Be\MaximumFileSizeViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Form\ViewHelpers\Be\MaximumFileSizeViewHelper
     */
    protected function getMaximumFileSizeViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Form\\ViewHelpers\\Be\\MaximumFileSizeViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\ViewHelpers\Be\MaximumFileSizeViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Form\\ViewHelpers\\Be\\MaximumFileSizeViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\ViewHelpers\Be\RenderContentElementPreviewViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Form\ViewHelpers\Be\RenderContentElementPreviewViewHelper
     */
    protected function getRenderContentElementPreviewViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Form\\ViewHelpers\\Be\\RenderContentElementPreviewViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\ViewHelpers\Be\RenderContentElementPreviewViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Form\\ViewHelpers\\Be\\RenderContentElementPreviewViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\ViewHelpers\FormViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Form\ViewHelpers\FormViewHelper
     */
    protected function getFormViewHelper2Service()
    {
        $this->factories['TYPO3\\CMS\\Form\\ViewHelpers\\FormViewHelper'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\ViewHelpers\FormViewHelper::class);

            $instance->injectHashService(($this->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? $this->getHashServiceService()));
            $instance->injectMvcPropertyMappingConfigurationService(($this->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? $this->getMvcPropertyMappingConfigurationServiceService()));
            $instance->injectExtensionService(($this->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? $this->getExtensionServiceService()));
            $instance->injectPersistenceManager(($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? $this->getPersistenceManagerService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Form\\ViewHelpers\\FormViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\ViewHelpers\Form\DatePickerViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Form\ViewHelpers\Form\DatePickerViewHelper
     */
    protected function getDatePickerViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Form\\ViewHelpers\\Form\\DatePickerViewHelper'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\ViewHelpers\Form\DatePickerViewHelper::class);

            $instance->injectPropertyMapper(($this->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? $this->getPropertyMapperService()));
            $instance->injectConfigurationManager(($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));
            $instance->injectPersistenceManager(($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? $this->getPersistenceManagerService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Form\\ViewHelpers\\Form\\DatePickerViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\ViewHelpers\Form\TimePickerViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Form\ViewHelpers\Form\TimePickerViewHelper
     */
    protected function getTimePickerViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Form\\ViewHelpers\\Form\\TimePickerViewHelper'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\ViewHelpers\Form\TimePickerViewHelper::class);

            $instance->injectPropertyMapper(($this->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? $this->getPropertyMapperService()));
            $instance->injectConfigurationManager(($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));
            $instance->injectPersistenceManager(($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? $this->getPersistenceManagerService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Form\\ViewHelpers\\Form\\TimePickerViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\ViewHelpers\Form\UploadedResourceViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Form\ViewHelpers\Form\UploadedResourceViewHelper
     */
    protected function getUploadedResourceViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Form\\ViewHelpers\\Form\\UploadedResourceViewHelper'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\ViewHelpers\Form\UploadedResourceViewHelper::class);

            $instance->injectHashService(($this->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? $this->getHashServiceService()));
            $instance->injectPropertyMapper(($this->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? $this->getPropertyMapperService()));
            $instance->injectConfigurationManager(($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));
            $instance->injectPersistenceManager(($this->services['TYPO3\\CMS\\Extbase\\Persistence\\Generic\\PersistenceManager'] ?? $this->getPersistenceManagerService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Form\\ViewHelpers\\Form\\UploadedResourceViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\ViewHelpers\GridColumnClassAutoConfigurationViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Form\ViewHelpers\GridColumnClassAutoConfigurationViewHelper
     */
    protected function getGridColumnClassAutoConfigurationViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Form\\ViewHelpers\\GridColumnClassAutoConfigurationViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\ViewHelpers\GridColumnClassAutoConfigurationViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Form\\ViewHelpers\\GridColumnClassAutoConfigurationViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\ViewHelpers\RenderAllFormValuesViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Form\ViewHelpers\RenderAllFormValuesViewHelper
     */
    protected function getRenderAllFormValuesViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Form\\ViewHelpers\\RenderAllFormValuesViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\ViewHelpers\RenderAllFormValuesViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Form\\ViewHelpers\\RenderAllFormValuesViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\ViewHelpers\RenderFormValueViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Form\ViewHelpers\RenderFormValueViewHelper
     */
    protected function getRenderFormValueViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Form\\ViewHelpers\\RenderFormValueViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\ViewHelpers\RenderFormValueViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Form\\ViewHelpers\\RenderFormValueViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\ViewHelpers\RenderRenderableViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Form\ViewHelpers\RenderRenderableViewHelper
     */
    protected function getRenderRenderableViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Form\\ViewHelpers\\RenderRenderableViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\ViewHelpers\RenderRenderableViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Form\\ViewHelpers\\RenderRenderableViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\ViewHelpers\RenderViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Form\ViewHelpers\RenderViewHelper
     */
    protected function getRenderViewHelper4Service()
    {
        $this->factories['TYPO3\\CMS\\Form\\ViewHelpers\\RenderViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\ViewHelpers\RenderViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Form\\ViewHelpers\\RenderViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\ViewHelpers\TranslateElementErrorViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Form\ViewHelpers\TranslateElementErrorViewHelper
     */
    protected function getTranslateElementErrorViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Form\\ViewHelpers\\TranslateElementErrorViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\ViewHelpers\TranslateElementErrorViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Form\\ViewHelpers\\TranslateElementErrorViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Form\ViewHelpers\TranslateElementPropertyViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Form\ViewHelpers\TranslateElementPropertyViewHelper
     */
    protected function getTranslateElementPropertyViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Form\\ViewHelpers\\TranslateElementPropertyViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\ViewHelpers\TranslateElementPropertyViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Form\\ViewHelpers\\TranslateElementPropertyViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\FrontendLogin\Controller\LoginController' autowired service.
     *
     * @return \TYPO3\CMS\FrontendLogin\Controller\LoginController
     */
    protected function getLoginController2Service()
    {
        $this->factories['TYPO3\\CMS\\FrontendLogin\\Controller\\LoginController'] = function () {
            $a = ($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service());

            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\FrontendLogin\Controller\LoginController::class, ($this->privates['TYPO3\\CMS\\FrontendLogin\\Redirect\\RedirectHandler'] ?? $this->getRedirectHandler2Service()), ($this->privates['TYPO3\\CMS\\FrontendLogin\\Redirect\\ServerRequestHandler'] ?? ($this->privates['TYPO3\\CMS\\FrontendLogin\\Redirect\\ServerRequestHandler'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\FrontendLogin\Redirect\ServerRequestHandler::class))), ($this->privates['TYPO3\\CMS\\FrontendLogin\\Service\\UserService'] ?? ($this->privates['TYPO3\\CMS\\FrontendLogin\\Service\\UserService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\FrontendLogin\Service\UserService::class))), $a);

            $instance->injectResponseFactory(($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class))));
            $instance->injectStreamFactory(($this->services['Psr\\Http\\Message\\StreamFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\StreamFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class))));
            $instance->injectConfigurationManager(($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));
            $instance->injectObjectManager(($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));
            $instance->injectSignalSlotDispatcher(($this->services['TYPO3\\CMS\\Extbase\\SignalSlot\\Dispatcher'] ?? $this->getDispatcher2Service()));
            $instance->injectValidatorResolver(($this->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? $this->getValidatorResolverService()));
            $instance->injectViewResolver(($this->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ?? ($this->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $this))));
            $instance->injectReflectionService(($this->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? $this->getReflectionServiceService()));
            $instance->injectHashService(($this->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? $this->getHashServiceService()));
            $instance->injectMvcPropertyMappingConfigurationService(($this->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? $this->getMvcPropertyMappingConfigurationServiceService()));
            $instance->injectEventDispatcher($a);
            $instance->injectPropertyMapper(($this->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? $this->getPropertyMapperService()));
            $instance->injectInternalFlashMessageService(($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService()));
            $instance->injectInternalExtensionService(($this->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? $this->getExtensionServiceService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\FrontendLogin\\Controller\\LoginController']();
    }

    /**
     * Gets the public 'TYPO3\CMS\FrontendLogin\Controller\PasswordRecoveryController' autowired service.
     *
     * @return \TYPO3\CMS\FrontendLogin\Controller\PasswordRecoveryController
     */
    protected function getPasswordRecoveryControllerService()
    {
        $this->factories['TYPO3\\CMS\\FrontendLogin\\Controller\\PasswordRecoveryController'] = function () {
            $a = ($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service());

            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\FrontendLogin\Controller\PasswordRecoveryController::class, $a, ($this->privates['TYPO3\\CMS\\FrontendLogin\\Service\\RecoveryService'] ?? $this->getRecoveryServiceService()), ($this->privates['TYPO3\\CMS\\FrontendLogin\\Domain\\Repository\\FrontendUserRepository'] ?? $this->getFrontendUserRepository2Service()));

            $instance->injectResponseFactory(($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class))));
            $instance->injectStreamFactory(($this->services['Psr\\Http\\Message\\StreamFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\StreamFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class))));
            $instance->injectConfigurationManager(($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));
            $instance->injectObjectManager(($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));
            $instance->injectSignalSlotDispatcher(($this->services['TYPO3\\CMS\\Extbase\\SignalSlot\\Dispatcher'] ?? $this->getDispatcher2Service()));
            $instance->injectValidatorResolver(($this->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? $this->getValidatorResolverService()));
            $instance->injectViewResolver(($this->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ?? ($this->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $this))));
            $instance->injectReflectionService(($this->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? $this->getReflectionServiceService()));
            $instance->injectHashService(($this->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? $this->getHashServiceService()));
            $instance->injectMvcPropertyMappingConfigurationService(($this->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? $this->getMvcPropertyMappingConfigurationServiceService()));
            $instance->injectEventDispatcher($a);
            $instance->injectPropertyMapper(($this->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? $this->getPropertyMapperService()));
            $instance->injectInternalFlashMessageService(($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService()));
            $instance->injectInternalExtensionService(($this->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? $this->getExtensionServiceService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\FrontendLogin\\Controller\\PasswordRecoveryController']();
    }

    /**
     * Gets the public 'TYPO3\CMS\FrontendLogin\Service\ValidatorResolverService' shared autowired service.
     *
     * @return \TYPO3\CMS\FrontendLogin\Service\ValidatorResolverService
     */
    protected function getValidatorResolverServiceService()
    {
        return $this->services['TYPO3\\CMS\\FrontendLogin\\Service\\ValidatorResolverService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\FrontendLogin\Service\ValidatorResolverService::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Aspect\FileMetadataOverlayAspect' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Aspect\FileMetadataOverlayAspect
     */
    protected function getFileMetadataOverlayAspectService()
    {
        return $this->services['TYPO3\\CMS\\Frontend\\Aspect\\FileMetadataOverlayAspect'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Aspect\FileMetadataOverlayAspect::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\ContentObject\ContentDataProcessor' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\ContentObject\ContentDataProcessor
     */
    protected function getContentDataProcessorService()
    {
        return $this->services['TYPO3\\CMS\\Frontend\\ContentObject\\ContentDataProcessor'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\ContentObject\ContentDataProcessor::class, $this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer' autowired service.
     *
     * @return \TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer
     */
    protected function getContentObjectRendererService()
    {
        $this->factories['TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectRenderer'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer::class, NULL, $this);

            $instance->setLogger(($this->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $this->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectRenderer'));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectRenderer']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\ContentObject\Exception\ProductionExceptionHandler' autowired service.
     *
     * @return \TYPO3\CMS\Frontend\ContentObject\Exception\ProductionExceptionHandler
     */
    protected function getProductionExceptionHandler2Service()
    {
        $this->factories['TYPO3\\CMS\\Frontend\\ContentObject\\Exception\\ProductionExceptionHandler'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\ContentObject\Exception\ProductionExceptionHandler::class, ($this->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? $this->getContextService()), ($this->privates['TYPO3\\CMS\\Core\\Crypto\\Random'] ?? ($this->privates['TYPO3\\CMS\\Core\\Crypto\\Random'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Crypto\Random::class))), ($this->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $this->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Frontend\\ContentObject\\Exception\\ProductionExceptionHandler'));
        };

        return $this->factories['TYPO3\\CMS\\Frontend\\ContentObject\\Exception\\ProductionExceptionHandler']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\ContentObject\Menu\MenuContentObjectFactory' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\ContentObject\Menu\MenuContentObjectFactory
     */
    protected function getMenuContentObjectFactoryService()
    {
        return $this->services['TYPO3\\CMS\\Frontend\\ContentObject\\Menu\\MenuContentObjectFactory'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\ContentObject\Menu\MenuContentObjectFactory::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Hooks\MediaItemHooks' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Hooks\MediaItemHooks
     */
    protected function getMediaItemHooksService()
    {
        return $this->services['TYPO3\\CMS\\Frontend\\Hooks\\MediaItemHooks'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Hooks\MediaItemHooks::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Html\HtmlWorker' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Html\HtmlWorker
     */
    protected function getHtmlWorkerService()
    {
        return $this->services['TYPO3\\CMS\\Frontend\\Html\\HtmlWorker'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Html\HtmlWorker::class, ($this->services['TYPO3\\CMS\\Frontend\\Typolink\\LinkResultFactory'] ?? $this->getLinkResultFactoryService()), ($this->services['Masterminds\\HTML5'] ?? $this->getHTML5Service()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Http\Application' shared service.
     *
     * @return \TYPO3\CMS\Frontend\Http\Application
     */
    protected function getApplication2Service()
    {
        return $this->services['TYPO3\\CMS\\Frontend\\Http\\Application'] = \TYPO3\CMS\Frontend\ServiceProvider::getApplication($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Http\RequestHandler' shared service.
     *
     * @return \TYPO3\CMS\Frontend\Http\RequestHandler
     */
    protected function getRequestHandler2Service()
    {
        return $this->services['TYPO3\\CMS\\Frontend\\Http\\RequestHandler'] = \TYPO3\CMS\Frontend\ServiceProvider::getRequestHandler($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Middleware\BackendUserAuthenticator' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Middleware\BackendUserAuthenticator
     */
    protected function getBackendUserAuthenticator2Service()
    {
        return $this->services['TYPO3\\CMS\\Frontend\\Middleware\\BackendUserAuthenticator'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Middleware\BackendUserAuthenticator::class, ($this->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? $this->getContextService()), ($this->services['TYPO3\\CMS\\Core\\Localization\\LanguageServiceFactory'] ?? $this->getLanguageServiceFactoryService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Middleware\ContentLengthResponseHeader' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Middleware\ContentLengthResponseHeader
     */
    protected function getContentLengthResponseHeaderService()
    {
        return $this->services['TYPO3\\CMS\\Frontend\\Middleware\\ContentLengthResponseHeader'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Middleware\ContentLengthResponseHeader::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Middleware\EidHandler' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Middleware\EidHandler
     */
    protected function getEidHandlerService()
    {
        return $this->services['TYPO3\\CMS\\Frontend\\Middleware\\EidHandler'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Middleware\EidHandler::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\Dispatcher::class, $this));
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Middleware\FrontendUserAuthenticator' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Middleware\FrontendUserAuthenticator
     */
    protected function getFrontendUserAuthenticatorService()
    {
        $this->services['TYPO3\\CMS\\Frontend\\Middleware\\FrontendUserAuthenticator'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Middleware\FrontendUserAuthenticator::class, ($this->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? $this->getContextService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\RateLimiter\RateLimiterFactory::class));

        $instance->setLogger(($this->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $this->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Frontend\\Middleware\\FrontendUserAuthenticator'));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Middleware\MaintenanceMode' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Middleware\MaintenanceMode
     */
    protected function getMaintenanceModeService()
    {
        return $this->services['TYPO3\\CMS\\Frontend\\Middleware\\MaintenanceMode'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Middleware\MaintenanceMode::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Middleware\OutputCompression' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Middleware\OutputCompression
     */
    protected function getOutputCompression2Service()
    {
        return $this->services['TYPO3\\CMS\\Frontend\\Middleware\\OutputCompression'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Middleware\OutputCompression::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Middleware\PageArgumentValidator' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Middleware\PageArgumentValidator
     */
    protected function getPageArgumentValidatorService()
    {
        $this->services['TYPO3\\CMS\\Frontend\\Middleware\\PageArgumentValidator'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Middleware\PageArgumentValidator::class, ($this->services['TYPO3\\CMS\\Frontend\\Page\\CacheHashCalculator'] ?? $this->getCacheHashCalculatorService()), ($this->services['TYPO3\\CMS\\Core\\TimeTracker\\TimeTracker'] ?? $this->getTimeTrackerService()));

        $instance->setLogger(($this->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $this->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Frontend\\Middleware\\PageArgumentValidator'));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Middleware\PageResolver' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Middleware\PageResolver
     */
    protected function getPageResolverService()
    {
        return $this->services['TYPO3\\CMS\\Frontend\\Middleware\\PageResolver'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Middleware\PageResolver::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Middleware\PrepareTypoScriptFrontendRendering' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Middleware\PrepareTypoScriptFrontendRendering
     */
    protected function getPrepareTypoScriptFrontendRenderingService()
    {
        return $this->services['TYPO3\\CMS\\Frontend\\Middleware\\PrepareTypoScriptFrontendRendering'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Middleware\PrepareTypoScriptFrontendRendering::class, ($this->services['TYPO3\\CMS\\Core\\TimeTracker\\TimeTracker'] ?? $this->getTimeTrackerService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Middleware\PreviewSimulator' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Middleware\PreviewSimulator
     */
    protected function getPreviewSimulatorService()
    {
        return $this->services['TYPO3\\CMS\\Frontend\\Middleware\\PreviewSimulator'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Middleware\PreviewSimulator::class, ($this->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? $this->getContextService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Middleware\ShortcutAndMountPointRedirect' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Middleware\ShortcutAndMountPointRedirect
     */
    protected function getShortcutAndMountPointRedirectService()
    {
        return $this->services['TYPO3\\CMS\\Frontend\\Middleware\\ShortcutAndMountPointRedirect'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Middleware\ShortcutAndMountPointRedirect::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Middleware\SiteBaseRedirectResolver' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Middleware\SiteBaseRedirectResolver
     */
    protected function getSiteBaseRedirectResolverService()
    {
        return $this->services['TYPO3\\CMS\\Frontend\\Middleware\\SiteBaseRedirectResolver'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Middleware\SiteBaseRedirectResolver::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Middleware\SiteResolver' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Middleware\SiteResolver
     */
    protected function getSiteResolver2Service()
    {
        return $this->services['TYPO3\\CMS\\Frontend\\Middleware\\SiteResolver'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Middleware\SiteResolver::class, ($this->services['TYPO3\\CMS\\Core\\Routing\\SiteMatcher'] ?? $this->getSiteMatcherService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Middleware\StaticRouteResolver' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Middleware\StaticRouteResolver
     */
    protected function getStaticRouteResolverService()
    {
        return $this->services['TYPO3\\CMS\\Frontend\\Middleware\\StaticRouteResolver'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Middleware\StaticRouteResolver::class, ($this->services['TYPO3\\CMS\\Core\\Http\\RequestFactory'] ?? $this->getRequestFactoryService()), ($this->services['TYPO3\\CMS\\Core\\LinkHandling\\LinkService'] ?? ($this->services['TYPO3\\CMS\\Core\\LinkHandling\\LinkService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\LinkHandling\LinkService::class))));
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Middleware\TimeTrackerInitialization' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Middleware\TimeTrackerInitialization
     */
    protected function getTimeTrackerInitializationService()
    {
        return $this->services['TYPO3\\CMS\\Frontend\\Middleware\\TimeTrackerInitialization'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Middleware\TimeTrackerInitialization::class, ($this->services['TYPO3\\CMS\\Core\\TimeTracker\\TimeTracker'] ?? $this->getTimeTrackerService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Middleware\TypoScriptFrontendInitialization' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Middleware\TypoScriptFrontendInitialization
     */
    protected function getTypoScriptFrontendInitializationService()
    {
        return $this->services['TYPO3\\CMS\\Frontend\\Middleware\\TypoScriptFrontendInitialization'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Middleware\TypoScriptFrontendInitialization::class, ($this->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? $this->getContextService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Page\CacheHashCalculator' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Page\CacheHashCalculator
     */
    protected function getCacheHashCalculatorService()
    {
        return $this->services['TYPO3\\CMS\\Frontend\\Page\\CacheHashCalculator'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Page\CacheHashCalculator::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Page\CacheHashConfiguration::class));
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Resource\PublicUrlPrefixer' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Resource\PublicUrlPrefixer
     */
    protected function getPublicUrlPrefixer2Service()
    {
        return $this->services['TYPO3\\CMS\\Frontend\\Resource\\PublicUrlPrefixer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Resource\PublicUrlPrefixer::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Typolink\LinkResultFactory' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Typolink\LinkResultFactory
     */
    protected function getLinkResultFactoryService()
    {
        return $this->services['TYPO3\\CMS\\Frontend\\Typolink\\LinkResultFactory'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Typolink\LinkResultFactory::class, ($this->services['TYPO3\\CMS\\Core\\LinkHandling\\LinkService'] ?? ($this->services['TYPO3\\CMS\\Core\\LinkHandling\\LinkService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\LinkHandling\LinkService::class))));
    }

    /**
     * Gets the public 'TYPO3\CMS\Frontend\Utility\CompressionUtility' shared autowired service.
     *
     * @return \TYPO3\CMS\Frontend\Utility\CompressionUtility
     */
    protected function getCompressionUtilityService()
    {
        return $this->services['TYPO3\\CMS\\Frontend\\Utility\\CompressionUtility'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\Utility\CompressionUtility::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Impexp\Command\ExportCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Impexp\Command\ExportCommand
     */
    protected function getExportCommandService()
    {
        $this->services['TYPO3\\CMS\\Impexp\\Command\\ExportCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Impexp\Command\ExportCommand::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Impexp\Export::class));

        $instance->setName('impexp:export');
        $instance->setDescription('Exports a T3D / XML file with content of a page tree');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Impexp\Command\ImportCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Impexp\Command\ImportCommand
     */
    protected function getImportCommandService()
    {
        $this->services['TYPO3\\CMS\\Impexp\\Command\\ImportCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Impexp\Command\ImportCommand::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Impexp\Import::class));

        $instance->setName('impexp:import');
        $instance->setDescription('Imports a T3D / XML file with content into a page tree');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Impexp\Controller\ExportController' shared autowired service.
     *
     * @return \TYPO3\CMS\Impexp\Controller\ExportController
     */
    protected function getExportControllerService()
    {
        $a = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());
        $b = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));

        return $this->services['TYPO3\\CMS\\Impexp\\Controller\\ExportController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Impexp\Controller\ExportController::class, $a, $b, ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $b, $a, ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())), ($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class))));
    }

    /**
     * Gets the public 'TYPO3\CMS\Impexp\Controller\ImportController' shared autowired service.
     *
     * @return \TYPO3\CMS\Impexp\Controller\ImportController
     */
    protected function getImportControllerService()
    {
        $a = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());
        $b = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));

        return $this->services['TYPO3\\CMS\\Impexp\\Controller\\ImportController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Impexp\Controller\ImportController::class, $a, $b, ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $b, $a, ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())));
    }

    /**
     * Gets the public 'TYPO3\CMS\Impexp\Utility\ImportExportUtility' shared autowired service.
     *
     * @return \TYPO3\CMS\Impexp\Utility\ImportExportUtility
     */
    protected function getImportExportUtilityService()
    {
        return $this->services['TYPO3\\CMS\\Impexp\\Utility\\ImportExportUtility'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Impexp\Utility\ImportExportUtility::class, ($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()));
    }

    /**
     * Gets the public 'TYPO3\CMS\IndexedSearch\Controller\AdministrationController' autowired service.
     *
     * @return \TYPO3\CMS\IndexedSearch\Controller\AdministrationController
     */
    protected function getAdministrationControllerService()
    {
        $this->factories['TYPO3\\CMS\\IndexedSearch\\Controller\\AdministrationController'] = function () {
            $a = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());
            $b = ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService());

            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\IndexedSearch\Controller\AdministrationController::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class))), $a, $b), ($this->privates['TYPO3\\CMS\\IndexedSearch\\Domain\\Repository\\AdministrationRepository'] ?? ($this->privates['TYPO3\\CMS\\IndexedSearch\\Domain\\Repository\\AdministrationRepository'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\IndexedSearch\Domain\Repository\AdministrationRepository::class))), ($this->privates['TYPO3\\CMS\\IndexedSearch\\Indexer'] ?? ($this->privates['TYPO3\\CMS\\IndexedSearch\\Indexer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\IndexedSearch\Indexer::class))), $a);

            $instance->injectResponseFactory(($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class))));
            $instance->injectStreamFactory(($this->services['Psr\\Http\\Message\\StreamFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\StreamFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class))));
            $instance->injectConfigurationManager(($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));
            $instance->injectObjectManager(($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));
            $instance->injectSignalSlotDispatcher(($this->services['TYPO3\\CMS\\Extbase\\SignalSlot\\Dispatcher'] ?? $this->getDispatcher2Service()));
            $instance->injectValidatorResolver(($this->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? $this->getValidatorResolverService()));
            $instance->injectViewResolver(($this->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ?? ($this->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $this))));
            $instance->injectReflectionService(($this->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? $this->getReflectionServiceService()));
            $instance->injectHashService(($this->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? $this->getHashServiceService()));
            $instance->injectMvcPropertyMappingConfigurationService(($this->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? $this->getMvcPropertyMappingConfigurationServiceService()));
            $instance->injectEventDispatcher(($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()));
            $instance->injectPropertyMapper(($this->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? $this->getPropertyMapperService()));
            $instance->injectInternalFlashMessageService($b);
            $instance->injectInternalExtensionService(($this->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? $this->getExtensionServiceService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\IndexedSearch\\Controller\\AdministrationController']();
    }

    /**
     * Gets the public 'TYPO3\CMS\IndexedSearch\Controller\SearchController' autowired service.
     *
     * @return \TYPO3\CMS\IndexedSearch\Controller\SearchController
     */
    protected function getSearchControllerService()
    {
        $this->factories['TYPO3\\CMS\\IndexedSearch\\Controller\\SearchController'] = function () {
            $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\IndexedSearch\Controller\SearchController::class);

            $instance->injectTypoScriptService(($this->services['TYPO3\\CMS\\Core\\TypoScript\\TypoScriptService'] ?? $this->getTypoScriptServiceService()));
            $instance->injectResponseFactory(($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class))));
            $instance->injectStreamFactory(($this->services['Psr\\Http\\Message\\StreamFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\StreamFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\StreamFactory::class))));
            $instance->injectConfigurationManager(($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));
            $instance->injectObjectManager(($this->services['TYPO3\\CMS\\Extbase\\Object\\ObjectManager'] ?? $this->getObjectManagerService()));
            $instance->injectSignalSlotDispatcher(($this->services['TYPO3\\CMS\\Extbase\\SignalSlot\\Dispatcher'] ?? $this->getDispatcher2Service()));
            $instance->injectValidatorResolver(($this->services['TYPO3\\CMS\\Extbase\\Validation\\ValidatorResolver'] ?? $this->getValidatorResolverService()));
            $instance->injectViewResolver(($this->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] ?? ($this->privates['TYPO3\\CMS\\Extbase\\Mvc\\View\\GenericViewResolver'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\View\GenericViewResolver::class, $this))));
            $instance->injectReflectionService(($this->services['TYPO3\\CMS\\Extbase\\Reflection\\ReflectionService'] ?? $this->getReflectionServiceService()));
            $instance->injectHashService(($this->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? $this->getHashServiceService()));
            $instance->injectMvcPropertyMappingConfigurationService(($this->services['TYPO3\\CMS\\Extbase\\Mvc\\Controller\\MvcPropertyMappingConfigurationService'] ?? $this->getMvcPropertyMappingConfigurationServiceService()));
            $instance->injectEventDispatcher(($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()));
            $instance->injectPropertyMapper(($this->services['TYPO3\\CMS\\Extbase\\Property\\PropertyMapper'] ?? $this->getPropertyMapperService()));
            $instance->injectInternalFlashMessageService(($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService()));
            $instance->injectInternalExtensionService(($this->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? $this->getExtensionServiceService()));

            return $instance;
        };

        return $this->factories['TYPO3\\CMS\\IndexedSearch\\Controller\\SearchController']();
    }

    /**
     * Gets the public 'TYPO3\CMS\IndexedSearch\Service\DatabaseSchemaService' shared autowired service.
     *
     * @return \TYPO3\CMS\IndexedSearch\Service\DatabaseSchemaService
     */
    protected function getDatabaseSchemaService2Service()
    {
        return $this->services['TYPO3\\CMS\\IndexedSearch\\Service\\DatabaseSchemaService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\IndexedSearch\Service\DatabaseSchemaService::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\IndexedSearch\ViewHelpers\Format\DateTimeViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\IndexedSearch\ViewHelpers\Format\DateTimeViewHelper
     */
    protected function getDateTimeViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\IndexedSearch\\ViewHelpers\\Format\\DateTimeViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\IndexedSearch\ViewHelpers\Format\DateTimeViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\IndexedSearch\\ViewHelpers\\Format\\DateTimeViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\IndexedSearch\ViewHelpers\Format\FlagValueViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\IndexedSearch\ViewHelpers\Format\FlagValueViewHelper
     */
    protected function getFlagValueViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\IndexedSearch\\ViewHelpers\\Format\\FlagValueViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\IndexedSearch\ViewHelpers\Format\FlagValueViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\IndexedSearch\\ViewHelpers\\Format\\FlagValueViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\IndexedSearch\ViewHelpers\Format\GroupListViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\IndexedSearch\ViewHelpers\Format\GroupListViewHelper
     */
    protected function getGroupListViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\IndexedSearch\\ViewHelpers\\Format\\GroupListViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\IndexedSearch\ViewHelpers\Format\GroupListViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\IndexedSearch\\ViewHelpers\\Format\\GroupListViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\IndexedSearch\ViewHelpers\PageBrowsingResultsViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\IndexedSearch\ViewHelpers\PageBrowsingResultsViewHelper
     */
    protected function getPageBrowsingResultsViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\IndexedSearch\\ViewHelpers\\PageBrowsingResultsViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\IndexedSearch\ViewHelpers\PageBrowsingResultsViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\IndexedSearch\\ViewHelpers\\PageBrowsingResultsViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\IndexedSearch\ViewHelpers\PageBrowsingViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\IndexedSearch\ViewHelpers\PageBrowsingViewHelper
     */
    protected function getPageBrowsingViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\IndexedSearch\\ViewHelpers\\PageBrowsingViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\IndexedSearch\ViewHelpers\PageBrowsingViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\IndexedSearch\\ViewHelpers\\PageBrowsingViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Info\Controller\InfoModuleController' shared autowired service.
     *
     * @return \TYPO3\CMS\Info\Controller\InfoModuleController
     */
    protected function getInfoModuleControllerService()
    {
        $a = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());
        $b = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));
        $c = ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService());

        return $this->services['TYPO3\\CMS\\Info\\Controller\\InfoModuleController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Info\Controller\InfoModuleController::class, $a, $b, ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), $c, $this, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $b, $a, $c));
    }

    /**
     * Gets the public 'TYPO3\CMS\Info\Controller\InfoPageTyposcriptConfigController' shared autowired service.
     *
     * @return \TYPO3\CMS\Info\Controller\InfoPageTyposcriptConfigController
     */
    protected function getInfoPageTyposcriptConfigControllerService()
    {
        return $this->services['TYPO3\\CMS\\Info\\Controller\\InfoPageTyposcriptConfigController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Info\Controller\InfoPageTyposcriptConfigController::class, ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService()), ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Info\Controller\PageInformationController' shared autowired service.
     *
     * @return \TYPO3\CMS\Info\Controller\PageInformationController
     */
    protected function getPageInformationControllerService()
    {
        return $this->services['TYPO3\\CMS\\Info\\Controller\\PageInformationController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Info\Controller\PageInformationController::class, ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService()), ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Info\Controller\TranslationStatusController' shared autowired service.
     *
     * @return \TYPO3\CMS\Info\Controller\TranslationStatusController
     */
    protected function getTranslationStatusControllerService()
    {
        return $this->services['TYPO3\\CMS\\Info\\Controller\\TranslationStatusController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Info\Controller\TranslationStatusController::class, ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService()), ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Command\LanguagePackCommand' shared service.
     *
     * @return \TYPO3\CMS\Install\Command\LanguagePackCommand
     */
    protected function getLanguagePackCommandService()
    {
        return $this->services['TYPO3\\CMS\\Install\\Command\\LanguagePackCommand'] = \TYPO3\CMS\Install\ServiceProvider::getLanguagePackCommand($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Command\UpgradeWizardListCommand' shared service.
     *
     * @return \TYPO3\CMS\Install\Command\UpgradeWizardListCommand
     */
    protected function getUpgradeWizardListCommandService()
    {
        return $this->services['TYPO3\\CMS\\Install\\Command\\UpgradeWizardListCommand'] = \TYPO3\CMS\Install\ServiceProvider::getUpgradeWizardListCommand($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Command\UpgradeWizardRunCommand' shared service.
     *
     * @return \TYPO3\CMS\Install\Command\UpgradeWizardRunCommand
     */
    protected function getUpgradeWizardRunCommandService()
    {
        return $this->services['TYPO3\\CMS\\Install\\Command\\UpgradeWizardRunCommand'] = \TYPO3\CMS\Install\ServiceProvider::getUpgradeWizardRunCommand($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Controller\BackendModuleController' shared autowired service.
     *
     * @return \TYPO3\CMS\Install\Controller\BackendModuleController
     */
    protected function getBackendModuleControllerService()
    {
        return $this->services['TYPO3\\CMS\\Install\\Controller\\BackendModuleController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Install\Controller\BackendModuleController::class, ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class))), ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService()), ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())));
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Controller\EnvironmentController' shared service.
     *
     * @return \TYPO3\CMS\Install\Controller\EnvironmentController
     */
    protected function getEnvironmentControllerService()
    {
        return $this->services['TYPO3\\CMS\\Install\\Controller\\EnvironmentController'] = \TYPO3\CMS\Install\ServiceProvider::getEnvironmentController($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Controller\IconController' shared service.
     *
     * @return \TYPO3\CMS\Install\Controller\IconController
     */
    protected function getIconControllerService()
    {
        return $this->services['TYPO3\\CMS\\Install\\Controller\\IconController'] = \TYPO3\CMS\Install\ServiceProvider::getIconController($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Controller\InstallerController' shared service.
     *
     * @return \TYPO3\CMS\Install\Controller\InstallerController
     */
    protected function getInstallerControllerService()
    {
        return $this->services['TYPO3\\CMS\\Install\\Controller\\InstallerController'] = \TYPO3\CMS\Install\ServiceProvider::getInstallerController($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Controller\LayoutController' shared service.
     *
     * @return \TYPO3\CMS\Install\Controller\LayoutController
     */
    protected function getLayoutControllerService()
    {
        return $this->services['TYPO3\\CMS\\Install\\Controller\\LayoutController'] = \TYPO3\CMS\Install\ServiceProvider::getLayoutController($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Controller\LoginController' shared service.
     *
     * @return \TYPO3\CMS\Install\Controller\LoginController
     */
    protected function getLoginController3Service()
    {
        return $this->services['TYPO3\\CMS\\Install\\Controller\\LoginController'] = \TYPO3\CMS\Install\ServiceProvider::getLoginController($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Controller\MaintenanceController' shared service.
     *
     * @return \TYPO3\CMS\Install\Controller\MaintenanceController
     */
    protected function getMaintenanceControllerService()
    {
        return $this->services['TYPO3\\CMS\\Install\\Controller\\MaintenanceController'] = \TYPO3\CMS\Install\ServiceProvider::getMaintenanceController($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Controller\SettingsController' shared service.
     *
     * @return \TYPO3\CMS\Install\Controller\SettingsController
     */
    protected function getSettingsControllerService()
    {
        return $this->services['TYPO3\\CMS\\Install\\Controller\\SettingsController'] = \TYPO3\CMS\Install\ServiceProvider::getSettingsController($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Controller\UpgradeController' shared service.
     *
     * @return \TYPO3\CMS\Install\Controller\UpgradeController
     */
    protected function getUpgradeControllerService()
    {
        return $this->services['TYPO3\\CMS\\Install\\Controller\\UpgradeController'] = \TYPO3\CMS\Install\ServiceProvider::getUpgradeController($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Database\PermissionsCheck' shared service.
     *
     * @return \TYPO3\CMS\Install\Database\PermissionsCheck
     */
    protected function getPermissionsCheckService()
    {
        return $this->services['TYPO3\\CMS\\Install\\Database\\PermissionsCheck'] = \TYPO3\CMS\Install\ServiceProvider::getPermissionsCheck($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Http\Application' shared service.
     *
     * @return \TYPO3\CMS\Install\Http\Application
     */
    protected function getApplication3Service()
    {
        return $this->services['TYPO3\\CMS\\Install\\Http\\Application'] = \TYPO3\CMS\Install\ServiceProvider::getApplication($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Http\NotFoundRequestHandler' shared service.
     *
     * @return \TYPO3\CMS\Install\Http\NotFoundRequestHandler
     */
    protected function getNotFoundRequestHandlerService()
    {
        return $this->services['TYPO3\\CMS\\Install\\Http\\NotFoundRequestHandler'] = \TYPO3\CMS\Install\ServiceProvider::getNotFoundRequestHandler($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Middleware\Installer' shared service.
     *
     * @return \TYPO3\CMS\Install\Middleware\Installer
     */
    protected function getInstallerService()
    {
        return $this->services['TYPO3\\CMS\\Install\\Middleware\\Installer'] = \TYPO3\CMS\Install\ServiceProvider::getInstallerMiddleware($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Middleware\Maintenance' shared service.
     *
     * @return \TYPO3\CMS\Install\Middleware\Maintenance
     */
    protected function getMaintenanceService()
    {
        return $this->services['TYPO3\\CMS\\Install\\Middleware\\Maintenance'] = \TYPO3\CMS\Install\ServiceProvider::getMaintenanceMiddleware($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Service\ClearCacheService' shared service.
     *
     * @return \TYPO3\CMS\Install\Service\ClearCacheService
     */
    protected function getClearCacheServiceService()
    {
        return $this->services['TYPO3\\CMS\\Install\\Service\\ClearCacheService'] = \TYPO3\CMS\Install\ServiceProvider::getClearCacheService($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Service\CoreUpdateService' shared service.
     *
     * @return \TYPO3\CMS\Install\Service\CoreUpdateService
     */
    protected function getCoreUpdateServiceService()
    {
        return $this->services['TYPO3\\CMS\\Install\\Service\\CoreUpdateService'] = \TYPO3\CMS\Install\ServiceProvider::getCoreUpdateService($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Service\CoreVersionService' shared service.
     *
     * @return \TYPO3\CMS\Install\Service\CoreVersionService
     */
    protected function getCoreVersionServiceService()
    {
        return $this->services['TYPO3\\CMS\\Install\\Service\\CoreVersionService'] = \TYPO3\CMS\Install\ServiceProvider::getCoreVersionService($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Service\ExtensionConfigurationService' shared service.
     *
     * @return \TYPO3\CMS\Install\Service\ExtensionConfigurationService
     */
    protected function getExtensionConfigurationServiceService()
    {
        return $this->services['TYPO3\\CMS\\Install\\Service\\ExtensionConfigurationService'] = \TYPO3\CMS\Install\ServiceProvider::getExtensionConfigurationService($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Service\LanguagePackService' shared service.
     *
     * @return \TYPO3\CMS\Install\Service\LanguagePackService
     */
    protected function getLanguagePackServiceService()
    {
        return $this->services['TYPO3\\CMS\\Install\\Service\\LanguagePackService'] = \TYPO3\CMS\Install\ServiceProvider::getLanguagePackService($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Service\LateBootService' shared service.
     *
     * @return \TYPO3\CMS\Install\Service\LateBootService
     */
    protected function getLateBootServiceService()
    {
        return $this->services['TYPO3\\CMS\\Install\\Service\\LateBootService'] = \TYPO3\CMS\Install\ServiceProvider::getLateBootService($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Service\LoadTcaService' shared service.
     *
     * @return \TYPO3\CMS\Install\Service\LoadTcaService
     */
    protected function getLoadTcaServiceService()
    {
        return $this->services['TYPO3\\CMS\\Install\\Service\\LoadTcaService'] = \TYPO3\CMS\Install\ServiceProvider::getLoadTcaService($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Service\SilentConfigurationUpgradeService' shared service.
     *
     * @return \TYPO3\CMS\Install\Service\SilentConfigurationUpgradeService
     */
    protected function getSilentConfigurationUpgradeServiceService()
    {
        return $this->services['TYPO3\\CMS\\Install\\Service\\SilentConfigurationUpgradeService'] = \TYPO3\CMS\Install\ServiceProvider::getSilentConfigurationUpgradeService($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Service\SilentTemplateFileUpgradeService' shared service.
     *
     * @return \TYPO3\CMS\Install\Service\SilentTemplateFileUpgradeService
     */
    protected function getSilentTemplateFileUpgradeServiceService()
    {
        return $this->services['TYPO3\\CMS\\Install\\Service\\SilentTemplateFileUpgradeService'] = \TYPO3\CMS\Install\ServiceProvider::getSilentTemplateFileUpgradeService($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Service\Typo3tempFileService' shared autowired service.
     *
     * @return \TYPO3\CMS\Install\Service\Typo3tempFileService
     */
    protected function getTypo3tempFileServiceService()
    {
        return $this->services['TYPO3\\CMS\\Install\\Service\\Typo3tempFileService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Install\Service\Typo3tempFileService::class, ($this->services['TYPO3\\CMS\\Core\\Resource\\ProcessedFileRepository'] ?? $this->getProcessedFileRepositoryService()), ($this->services['TYPO3\\CMS\\Core\\Resource\\StorageRepository'] ?? $this->getStorageRepositoryService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Service\UpgradeWizardsService' shared service.
     *
     * @return \TYPO3\CMS\Install\Service\UpgradeWizardsService
     */
    protected function getUpgradeWizardsServiceService()
    {
        return $this->services['TYPO3\\CMS\\Install\\Service\\UpgradeWizardsService'] = \TYPO3\CMS\Install\ServiceProvider::getUpgradeWizardsService($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Install\Service\WebServerConfigurationFileService' shared service.
     *
     * @return \TYPO3\CMS\Install\Service\WebServerConfigurationFileService
     */
    protected function getWebServerConfigurationFileServiceService()
    {
        return $this->services['TYPO3\\CMS\\Install\\Service\\WebServerConfigurationFileService'] = \TYPO3\CMS\Install\ServiceProvider::getWebServerConfigurationFileService($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Linkvalidator\EventListener\CheckBrokenRteLinkEventListener' shared autowired service.
     *
     * @return \TYPO3\CMS\Linkvalidator\EventListener\CheckBrokenRteLinkEventListener
     */
    protected function getCheckBrokenRteLinkEventListenerService()
    {
        return $this->services['TYPO3\\CMS\\Linkvalidator\\EventListener\\CheckBrokenRteLinkEventListener'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Linkvalidator\EventListener\CheckBrokenRteLinkEventListener::class, ($this->services['TYPO3\\CMS\\Linkvalidator\\Repository\\BrokenLinkRepository'] ?? ($this->services['TYPO3\\CMS\\Linkvalidator\\Repository\\BrokenLinkRepository'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Linkvalidator\Repository\BrokenLinkRepository::class))));
    }

    /**
     * Gets the public 'TYPO3\CMS\Linkvalidator\LinkAnalyzer' shared autowired service.
     *
     * @return \TYPO3\CMS\Linkvalidator\LinkAnalyzer
     */
    protected function getLinkAnalyzerService()
    {
        return $this->services['TYPO3\\CMS\\Linkvalidator\\LinkAnalyzer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Linkvalidator\LinkAnalyzer::class, ($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()), ($this->services['TYPO3\\CMS\\Linkvalidator\\Repository\\BrokenLinkRepository'] ?? ($this->services['TYPO3\\CMS\\Linkvalidator\\Repository\\BrokenLinkRepository'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Linkvalidator\Repository\BrokenLinkRepository::class))), ($this->services['TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\SoftReferenceParserFactory'] ?? $this->getSoftReferenceParserFactoryService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Linkvalidator\Repository\BrokenLinkRepository' shared autowired service.
     *
     * @return \TYPO3\CMS\Linkvalidator\Repository\BrokenLinkRepository
     */
    protected function getBrokenLinkRepositoryService()
    {
        return $this->services['TYPO3\\CMS\\Linkvalidator\\Repository\\BrokenLinkRepository'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Linkvalidator\Repository\BrokenLinkRepository::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Linkvalidator\Result\LinkAnalyzerResult' shared autowired service.
     *
     * @return \TYPO3\CMS\Linkvalidator\Result\LinkAnalyzerResult
     */
    protected function getLinkAnalyzerResultService()
    {
        return $this->services['TYPO3\\CMS\\Linkvalidator\\Result\\LinkAnalyzerResult'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Linkvalidator\Result\LinkAnalyzerResult::class, ($this->services['TYPO3\\CMS\\Linkvalidator\\LinkAnalyzer'] ?? $this->getLinkAnalyzerService()), ($this->services['TYPO3\\CMS\\Linkvalidator\\Repository\\BrokenLinkRepository'] ?? ($this->services['TYPO3\\CMS\\Linkvalidator\\Repository\\BrokenLinkRepository'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Linkvalidator\Repository\BrokenLinkRepository::class))), ($this->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? $this->getConnectionPoolService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Linkvalidator\Repository\PagesRepository::class));
    }

    /**
     * Gets the public 'TYPO3\CMS\Lowlevel\Command\CleanFlexFormsCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Lowlevel\Command\CleanFlexFormsCommand
     */
    protected function getCleanFlexFormsCommandService()
    {
        $this->services['TYPO3\\CMS\\Lowlevel\\Command\\CleanFlexFormsCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\Command\CleanFlexFormsCommand::class, ($this->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? $this->getConnectionPoolService()));

        $instance->setName('cleanup:flexforms');
        $instance->setDescription('Updates all database records which have a FlexForm field and the XML data does not match the chosen datastructure.');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Lowlevel\Command\DeletedRecordsCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Lowlevel\Command\DeletedRecordsCommand
     */
    protected function getDeletedRecordsCommandService()
    {
        $this->services['TYPO3\\CMS\\Lowlevel\\Command\\DeletedRecordsCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\Command\DeletedRecordsCommand::class, ($this->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? $this->getConnectionPoolService()));

        $instance->setName('cleanup:deletedrecords');
        $instance->setDescription('Permanently deletes all records marked as "deleted" in the database.');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Lowlevel\Command\FilesWithMultipleReferencesCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Lowlevel\Command\FilesWithMultipleReferencesCommand
     */
    protected function getFilesWithMultipleReferencesCommandService()
    {
        $this->services['TYPO3\\CMS\\Lowlevel\\Command\\FilesWithMultipleReferencesCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\Command\FilesWithMultipleReferencesCommand::class, ($this->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? $this->getConnectionPoolService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Utility\File\BasicFileUtility::class));

        $instance->setName('cleanup:multiplereferencedfiles');
        $instance->setDescription('Looking for files from TYPO3 managed records which are referenced more than once');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Lowlevel\Command\ListSysLogCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Lowlevel\Command\ListSysLogCommand
     */
    protected function getListSysLogCommandService()
    {
        $this->services['TYPO3\\CMS\\Lowlevel\\Command\\ListSysLogCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\Command\ListSysLogCommand::class);

        $instance->setName('syslog:list');
        $instance->setDescription('Show entries from the sys_log database table of the last 24 hours.');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Lowlevel\Command\LostFilesCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Lowlevel\Command\LostFilesCommand
     */
    protected function getLostFilesCommandService()
    {
        $this->services['TYPO3\\CMS\\Lowlevel\\Command\\LostFilesCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\Command\LostFilesCommand::class, ($this->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? $this->getConnectionPoolService()));

        $instance->setName('cleanup:lostfiles');
        $instance->setDescription('Looking for files in the uploads/ folder which do not have a reference in TYPO3 managed records.');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Lowlevel\Command\MissingFilesCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Lowlevel\Command\MissingFilesCommand
     */
    protected function getMissingFilesCommandService()
    {
        $this->services['TYPO3\\CMS\\Lowlevel\\Command\\MissingFilesCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\Command\MissingFilesCommand::class, ($this->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? $this->getConnectionPoolService()));

        $instance->setName('cleanup:missingfiles');
        $instance->setDescription('Find all file references from records pointing to a missing (non-existing) file.');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Lowlevel\Command\MissingRelationsCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Lowlevel\Command\MissingRelationsCommand
     */
    protected function getMissingRelationsCommandService()
    {
        $this->services['TYPO3\\CMS\\Lowlevel\\Command\\MissingRelationsCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\Command\MissingRelationsCommand::class, ($this->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? $this->getConnectionPoolService()));

        $instance->setName('cleanup:missingrelations');
        $instance->setDescription('Find all record references pointing to a non-existing record');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Lowlevel\Command\OrphanRecordsCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Lowlevel\Command\OrphanRecordsCommand
     */
    protected function getOrphanRecordsCommandService()
    {
        $this->services['TYPO3\\CMS\\Lowlevel\\Command\\OrphanRecordsCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\Command\OrphanRecordsCommand::class, ($this->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? $this->getConnectionPoolService()));

        $instance->setName('cleanup:orphanrecords');
        $instance->setDescription('Find and delete records that have lost their connection with the page tree.');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\ProviderRegistry' shared autowired service.
     *
     * @return \TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\ProviderRegistry
     */
    protected function getProviderRegistryService()
    {
        $this->services['TYPO3\\CMS\\Lowlevel\\ConfigurationModuleProvider\\ProviderRegistry'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\ProviderRegistry::class);

        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\GlobalVariableProvider::class), ['identifier' => 'confVars', 'label' => 'LLL:EXT:lowlevel/Resources/Private/Language/locallang.xlf:typo3ConfVars', 'globalVariableKey' => 'TYPO3_CONF_VARS', 'before' => 'tca']);
        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\GlobalVariableProvider::class), ['identifier' => 'tca', 'label' => 'LLL:EXT:lowlevel/Resources/Private/Language/locallang.xlf:tca', 'globalVariableKey' => 'TCA', 'before' => 'tcaDescr', 'after' => 'confVars']);
        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\GlobalVariableProvider::class), ['identifier' => 'tcaDescr', 'label' => 'LLL:EXT:lowlevel/Resources/Private/Language/locallang.xlf:tcaDescr', 'globalVariableKey' => 'TCA_DESCR', 'before' => 'services', 'after' => 'tca']);
        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\GlobalVariableProvider::class), ['identifier' => 'services', 'label' => 'LLL:EXT:lowlevel/Resources/Private/Language/locallang.xlf:t3services', 'globalVariableKey' => 'T3_SERVICES', 'before' => 'tbeModules', 'after' => 'tcaDescr']);
        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\GlobalVariableProvider::class), ['identifier' => 'tbeModules', 'label' => 'LLL:EXT:lowlevel/Resources/Private/Language/locallang.xlf:tbemodules', 'globalVariableKey' => 'TBE_MODULES', 'before' => 'tbeModulesExt', 'after' => 'services']);
        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\GlobalVariableProvider::class), ['identifier' => 'tbeModulesExt', 'label' => 'LLL:EXT:lowlevel/Resources/Private/Language/locallang.xlf:tbemodulesext', 'globalVariableKey' => 'TBE_MODULES_EXT', 'before' => 'tbeStyles', 'after' => 'tbeModules']);
        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\GlobalVariableProvider::class), ['identifier' => 'tbeStyles', 'label' => 'LLL:EXT:lowlevel/Resources/Private/Language/locallang.xlf:tbeStyles', 'globalVariableKey' => 'TBE_STYLES', 'before' => 'userSettings', 'after' => 'tbeModulesExt']);
        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\GlobalVariableProvider::class), ['identifier' => 'userSettings', 'label' => 'LLL:EXT:lowlevel/Resources/Private/Language/locallang.xlf:usersettings', 'globalVariableKey' => 'TYPO3_USER_SETTINGS', 'before' => 'pagesTypes', 'after' => 'tbeStyles']);
        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\GlobalVariableProvider::class), ['identifier' => 'pagesTypes', 'label' => 'LLL:EXT:lowlevel/Resources/Private/Language/locallang.xlf:pagesTypes', 'globalVariableKey' => 'PAGES_TYPES', 'before' => 'beUserUc', 'after' => 'userSettings']);
        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\BackendUserSettingsProvider::class), ['identifier' => 'beUserUc', 'label' => 'LLL:EXT:lowlevel/Resources/Private/Language/locallang.xlf:beUser', 'before' => 'beUserTsConfig', 'after' => 'pagesTypes']);
        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\BackendUserTsConfigProvider::class), ['identifier' => 'beUserTsConfig', 'label' => 'LLL:EXT:lowlevel/Resources/Private/Language/locallang.xlf:beUserTsConfig', 'before' => 'beRoutes', 'after' => 'beUserUc']);
        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\BackendRoutesProvider::class, ($this->services['TYPO3\\CMS\\Backend\\Routing\\Router_decorated_1'] ?? $this->getRouterDecorated1Service())), ['identifier' => 'beRoutes', 'label' => 'LLL:EXT:lowlevel/Resources/Private/Language/locallang.xlf:routes', 'before' => 'httpMiddlewareStacks', 'after' => 'beUserTsConfig']);
        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\HttpMiddlewareStackProvider::class, $this), ['identifier' => 'httpMiddlewareStacks', 'label' => 'LLL:EXT:lowlevel/Resources/Private/Language/locallang.xlf:httpMiddlewareStacks', 'before' => 'siteConfiguration', 'after' => 'beRoutes']);
        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\SiteConfigurationProvider::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Configuration\SiteTcaConfiguration::class)), ['identifier' => 'siteConfiguration', 'label' => 'LLL:EXT:lowlevel/Resources/Private/Language/locallang.xlf:siteConfiguration', 'before' => 'eventListeners', 'after' => 'httpMiddlewareStacks']);
        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\EventListenersProvider::class, ($this->services['TYPO3\\CMS\\Core\\EventDispatcher\\ListenerProvider_decorated_3'] ?? $this->getListenerProviderDecorated3Service())), ['identifier' => 'eventListeners', 'label' => 'LLL:EXT:lowlevel/Resources/Private/Language/locallang.xlf:eventListeners', 'before' => 'mfaProviders', 'after' => 'siteConfiguration']);
        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\MfaProvidersProvider::class, ($this->services['TYPO3\\CMS\\Core\\Authentication\\Mfa\\MfaProviderRegistry'] ?? $this->getMfaProviderRegistryService())), ['identifier' => 'mfaProviders', 'label' => 'LLL:EXT:lowlevel/Resources/Private/Language/locallang.xlf:mfaProviders', 'before' => 'softReferenceParsers', 'after' => 'eventListeners']);
        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Lowlevel\ConfigurationModuleProvider\SoftReferenceParsersProvider::class, ($this->services['TYPO3\\CMS\\Core\\DataHandling\\SoftReference\\SoftReferenceParserFactory'] ?? $this->getSoftReferenceParserFactoryService())), ['identifier' => 'softReferenceParsers', 'label' => 'LLL:EXT:lowlevel/Resources/Private/Language/locallang.xlf:softReferenceParsers', 'after' => 'mfaproviders']);
        $instance->registerProvider(\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\ConfigurationModuleProvider\FormYamlProvider::class, ($this->services['TYPO3\\CMS\\Form\\Mvc\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManager2Service())), ['identifier' => 'formYamlConfiguration', 'after' => 'eventListeners']);

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Lowlevel\Controller\ConfigurationController' shared service.
     *
     * @return \TYPO3\CMS\Lowlevel\Controller\ConfigurationController
     */
    protected function getConfigurationControllerService()
    {
        return $this->services['TYPO3\\CMS\\Lowlevel\\Controller\\ConfigurationController'] = \TYPO3\CMS\Lowlevel\ServiceProvider::getConfigurationController($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Lowlevel\Controller\DatabaseIntegrityController' shared service.
     *
     * @return \TYPO3\CMS\Lowlevel\Controller\DatabaseIntegrityController
     */
    protected function getDatabaseIntegrityControllerService()
    {
        return $this->services['TYPO3\\CMS\\Lowlevel\\Controller\\DatabaseIntegrityController'] = \TYPO3\CMS\Lowlevel\ServiceProvider::getDatabaseIntegrityController($this);
    }

    /**
     * Gets the public 'TYPO3\CMS\Recordlist\Browser\DatabaseBrowser' autowired service.
     *
     * @return \TYPO3\CMS\Recordlist\Browser\DatabaseBrowser
     */
    protected function getDatabaseBrowserService()
    {
        $this->factories['TYPO3\\CMS\\Recordlist\\Browser\\DatabaseBrowser'] = function () {
            $a = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());
            $b = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));

            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Recordlist\Browser\DatabaseBrowser::class, $a, $b, ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $b, $a, ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())));
        };

        return $this->factories['TYPO3\\CMS\\Recordlist\\Browser\\DatabaseBrowser']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Recordlist\Browser\FileBrowser' autowired service.
     *
     * @return \TYPO3\CMS\Recordlist\Browser\FileBrowser
     */
    protected function getFileBrowserService()
    {
        $this->factories['TYPO3\\CMS\\Recordlist\\Browser\\FileBrowser'] = function () {
            $a = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());
            $b = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));

            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Recordlist\Browser\FileBrowser::class, $a, $b, ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $b, $a, ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())));
        };

        return $this->factories['TYPO3\\CMS\\Recordlist\\Browser\\FileBrowser']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Recordlist\Browser\FolderBrowser' autowired service.
     *
     * @return \TYPO3\CMS\Recordlist\Browser\FolderBrowser
     */
    protected function getFolderBrowserService()
    {
        $this->factories['TYPO3\\CMS\\Recordlist\\Browser\\FolderBrowser'] = function () {
            $a = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());
            $b = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));

            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Recordlist\Browser\FolderBrowser::class, $a, $b, ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $b, $a, ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())));
        };

        return $this->factories['TYPO3\\CMS\\Recordlist\\Browser\\FolderBrowser']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Recordlist\Browser\RecordBrowser' autowired service.
     *
     * @return \TYPO3\CMS\Recordlist\Browser\RecordBrowser
     */
    protected function getRecordBrowserService()
    {
        $this->factories['TYPO3\\CMS\\Recordlist\\Browser\\RecordBrowser'] = function () {
            $a = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());
            $b = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));

            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Recordlist\Browser\RecordBrowser::class, $a, $b, ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $b, $a, ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())));
        };

        return $this->factories['TYPO3\\CMS\\Recordlist\\Browser\\RecordBrowser']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Recordlist\Controller\ElementBrowserController' shared autowired service.
     *
     * @return \TYPO3\CMS\Recordlist\Controller\ElementBrowserController
     */
    protected function getElementBrowserControllerService()
    {
        return $this->services['TYPO3\\CMS\\Recordlist\\Controller\\ElementBrowserController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Recordlist\Controller\ElementBrowserController::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Recordlist\Controller\RecordDownloadController' shared autowired service.
     *
     * @return \TYPO3\CMS\Recordlist\Controller\RecordDownloadController
     */
    protected function getRecordDownloadControllerService()
    {
        return $this->services['TYPO3\\CMS\\Recordlist\\Controller\\RecordDownloadController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Recordlist\Controller\RecordDownloadController::class, ($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class))), ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Recordlist\Controller\RecordListController' shared autowired service.
     *
     * @return \TYPO3\CMS\Recordlist\Controller\RecordListController
     */
    protected function getRecordListControllerService()
    {
        $a = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());
        $b = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));

        return $this->services['TYPO3\\CMS\\Recordlist\\Controller\\RecordListController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Recordlist\Controller\RecordListController::class, $a, $b, ($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()), ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $b, $a, ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())), ($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] ?? ($this->services['Psr\\Http\\Message\\ResponseFactoryInterface'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Http\ResponseFactory::class))));
    }

    /**
     * Gets the public 'TYPO3\CMS\Recordlist\HookProvider\AddToRecordListHookProvider' shared autowired service.
     *
     * @return \TYPO3\CMS\Recordlist\HookProvider\AddToRecordListHookProvider
     */
    protected function getAddToRecordListHookProviderService()
    {
        return $this->services['TYPO3\\CMS\\Recordlist\\HookProvider\\AddToRecordListHookProvider'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Recordlist\HookProvider\AddToRecordListHookProvider::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Recordlist\RecordList\DatabaseRecordList' autowired service.
     *
     * @return \TYPO3\CMS\Recordlist\RecordList\DatabaseRecordList
     */
    protected function getDatabaseRecordListService()
    {
        $this->factories['TYPO3\\CMS\\Recordlist\\RecordList\\DatabaseRecordList'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Recordlist\RecordList\DatabaseRecordList::class, ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService()), ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), ($this->privates['TYPO3\\CMS\\Backend\\Configuration\\TranslationConfigurationProvider'] ?? ($this->privates['TYPO3\\CMS\\Backend\\Configuration\\TranslationConfigurationProvider'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Configuration\TranslationConfigurationProvider::class))), ($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()));
        };

        return $this->factories['TYPO3\\CMS\\Recordlist\\RecordList\\DatabaseRecordList']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Recycler\Controller\RecyclerModuleController' shared autowired service.
     *
     * @return \TYPO3\CMS\Recycler\Controller\RecyclerModuleController
     */
    protected function getRecyclerModuleControllerService()
    {
        $a = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());
        $b = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));

        return $this->services['TYPO3\\CMS\\Recycler\\Controller\\RecyclerModuleController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Recycler\Controller\RecyclerModuleController::class, $a, $b, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $b, $a, ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())));
    }

    /**
     * Gets the public 'TYPO3\CMS\Redirects\Command\CheckIntegrityCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Redirects\Command\CheckIntegrityCommand
     */
    protected function getCheckIntegrityCommandService()
    {
        $this->services['TYPO3\\CMS\\Redirects\\Command\\CheckIntegrityCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Redirects\Command\CheckIntegrityCommand::class, ($this->services['TYPO3\\CMS\\Core\\Registry'] ?? $this->getRegistryService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Redirects\Service\IntegrityService::class, ($this->privates['TYPO3\\CMS\\Redirects\\Service\\RedirectService'] ?? $this->getRedirectServiceService()), ($this->privates['TYPO3\\CMS\\Core\\Site\\SiteFinder'] ?? $this->getSiteFinderService())));

        $instance->setName('redirects:checkintegrity');
        $instance->setDescription('Check integrity of redirects');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Redirects\Command\CleanupRedirectsCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Redirects\Command\CleanupRedirectsCommand
     */
    protected function getCleanupRedirectsCommandService()
    {
        $this->services['TYPO3\\CMS\\Redirects\\Command\\CleanupRedirectsCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Redirects\Command\CleanupRedirectsCommand::class, ($this->privates['TYPO3\\CMS\\Redirects\\Repository\\RedirectRepository'] ?? ($this->privates['TYPO3\\CMS\\Redirects\\Repository\\RedirectRepository'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Redirects\Repository\RedirectRepository::class))), ($this->services['TYPO3\\CMS\\Core\\Localization\\LanguageServiceFactory'] ?? $this->getLanguageServiceFactoryService()));

        $instance->setName('redirects:cleanup');
        $instance->setDescription('Cleanup old redirects periodically for given constraints like days, hit count or domains.');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Redirects\Controller\ManagementController' shared autowired service.
     *
     * @return \TYPO3\CMS\Redirects\Controller\ManagementController
     */
    protected function getManagementControllerService()
    {
        $a = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());
        $b = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));

        return $this->services['TYPO3\\CMS\\Redirects\\Controller\\ManagementController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Redirects\Controller\ManagementController::class, $a, $b, ($this->privates['TYPO3\\CMS\\Redirects\\Repository\\RedirectRepository'] ?? ($this->privates['TYPO3\\CMS\\Redirects\\Repository\\RedirectRepository'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Redirects\Repository\RedirectRepository::class))), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $b, $a, ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())));
    }

    /**
     * Gets the public 'TYPO3\CMS\Redirects\Controller\RecordHistoryRollbackController' shared autowired service.
     *
     * @return \TYPO3\CMS\Redirects\Controller\RecordHistoryRollbackController
     */
    protected function getRecordHistoryRollbackControllerService()
    {
        return $this->services['TYPO3\\CMS\\Redirects\\Controller\\RecordHistoryRollbackController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Redirects\Controller\RecordHistoryRollbackController::class, ($this->services['TYPO3\\CMS\\Core\\Localization\\LanguageServiceFactory'] ?? $this->getLanguageServiceFactoryService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Redirects\EventListener\RecordHistoryRollbackEventsListener' shared autowired service.
     *
     * @return \TYPO3\CMS\Redirects\EventListener\RecordHistoryRollbackEventsListener
     */
    protected function getRecordHistoryRollbackEventsListenerService()
    {
        return $this->services['TYPO3\\CMS\\Redirects\\EventListener\\RecordHistoryRollbackEventsListener'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Redirects\EventListener\RecordHistoryRollbackEventsListener::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Redirects\Hooks\DataHandlerSlugUpdateHook' shared autowired service.
     *
     * @return \TYPO3\CMS\Redirects\Hooks\DataHandlerSlugUpdateHook
     */
    protected function getDataHandlerSlugUpdateHookService()
    {
        $a = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Redirects\Service\SlugService::class, ($this->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? $this->getContextService()), ($this->privates['TYPO3\\CMS\\Core\\Site\\SiteFinder'] ?? $this->getSiteFinderService()), ($this->privates['TYPO3\\CMS\\Core\\Domain\\Repository\\PageRepository'] ?? $this->getPageRepositoryService()), ($this->services['TYPO3\\CMS\\Core\\LinkHandling\\LinkService'] ?? ($this->services['TYPO3\\CMS\\Core\\LinkHandling\\LinkService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\LinkHandling\LinkService::class))));
        $a->setLogger(($this->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $this->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Redirects\\Service\\SlugService'));

        return $this->services['TYPO3\\CMS\\Redirects\\Hooks\\DataHandlerSlugUpdateHook'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Redirects\Hooks\DataHandlerSlugUpdateHook::class, $a);
    }

    /**
     * Gets the public 'TYPO3\CMS\Redirects\Http\Middleware\RedirectHandler' shared autowired service.
     *
     * @return \TYPO3\CMS\Redirects\Http\Middleware\RedirectHandler
     */
    protected function getRedirectHandlerService()
    {
        $this->services['TYPO3\\CMS\\Redirects\\Http\\Middleware\\RedirectHandler'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Redirects\Http\Middleware\RedirectHandler::class, ($this->privates['TYPO3\\CMS\\Redirects\\Service\\RedirectService'] ?? $this->getRedirectServiceService()));

        $instance->setLogger(($this->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $this->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Redirects\\Http\\Middleware\\RedirectHandler'));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Redirects\ViewHelpers\TargetPageIdViewHelper' autowired service.
     *
     * @return \TYPO3\CMS\Redirects\ViewHelpers\TargetPageIdViewHelper
     */
    protected function getTargetPageIdViewHelperService()
    {
        $this->factories['TYPO3\\CMS\\Redirects\\ViewHelpers\\TargetPageIdViewHelper'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Redirects\ViewHelpers\TargetPageIdViewHelper::class);
        };

        return $this->factories['TYPO3\\CMS\\Redirects\\ViewHelpers\\TargetPageIdViewHelper']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Reports\Controller\ReportController' shared autowired service.
     *
     * @return \TYPO3\CMS\Reports\Controller\ReportController
     */
    protected function getReportControllerService()
    {
        return $this->services['TYPO3\\CMS\\Reports\\Controller\\ReportController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Reports\Controller\ReportController::class, ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class))), ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService()), ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())), ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconRegistry_decorated_1'] ?? $this->getIconRegistryDecorated1Service()));
    }

    /**
     * Gets the public 'TYPO3\CMS\RteCKEditor\Controller\BrowseLinksController' autowired service.
     *
     * @return \TYPO3\CMS\RteCKEditor\Controller\BrowseLinksController
     */
    protected function getBrowseLinksControllerService()
    {
        $this->factories['TYPO3\\CMS\\RteCKEditor\\Controller\\BrowseLinksController'] = function () {
            $a = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));

            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\RteCKEditor\Controller\BrowseLinksController::class, ($this->services['TYPO3\\CMS\\Core\\Service\\DependencyOrderingService'] ?? $this->getDependencyOrderingServiceService()), $a, ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), ($this->services['TYPO3\\CMS\\Core\\LinkHandling\\LinkService'] ?? ($this->services['TYPO3\\CMS\\Core\\LinkHandling\\LinkService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\LinkHandling\LinkService::class))), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $a, ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService()), ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())));
        };

        return $this->factories['TYPO3\\CMS\\RteCKEditor\\Controller\\BrowseLinksController']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Scheduler\Command\SchedulerCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Scheduler\Command\SchedulerCommand
     */
    protected function getSchedulerCommandService()
    {
        $this->services['TYPO3\\CMS\\Scheduler\\Command\\SchedulerCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Scheduler\Command\SchedulerCommand::class, ($this->services['TYPO3\\CMS\\Scheduler\\Scheduler'] ?? $this->getSchedulerService()));

        $instance->setName('scheduler:run');
        $instance->setDescription('Start the TYPO3 Scheduler from the command line.');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Scheduler\Controller\SchedulerModuleController' shared autowired service.
     *
     * @return \TYPO3\CMS\Scheduler\Controller\SchedulerModuleController
     */
    protected function getSchedulerModuleControllerService()
    {
        $a = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());
        $b = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));

        return $this->services['TYPO3\\CMS\\Scheduler\\Controller\\SchedulerModuleController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Scheduler\Controller\SchedulerModuleController::class, ($this->services['TYPO3\\CMS\\Scheduler\\Scheduler'] ?? $this->getSchedulerService()), $a, $b, ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $b, $a, ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())));
    }

    /**
     * Gets the public 'TYPO3\CMS\Scheduler\Scheduler' shared autowired service.
     *
     * @return \TYPO3\CMS\Scheduler\Scheduler
     */
    protected function getSchedulerService()
    {
        return $this->services['TYPO3\\CMS\\Scheduler\\Scheduler'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Scheduler\Scheduler::class, ($this->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $this->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Scheduler\\Scheduler'));
    }

    /**
     * Gets the public 'TYPO3\CMS\Scheduler\SystemInformation\ToolbarItemProvider' shared autowired service.
     *
     * @return \TYPO3\CMS\Scheduler\SystemInformation\ToolbarItemProvider
     */
    protected function getToolbarItemProviderService()
    {
        return $this->services['TYPO3\\CMS\\Scheduler\\SystemInformation\\ToolbarItemProvider'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Scheduler\SystemInformation\ToolbarItemProvider::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Seo\HrefLang\HrefLangGenerator' shared autowired service.
     *
     * @return \TYPO3\CMS\Seo\HrefLang\HrefLangGenerator
     */
    protected function getHrefLangGeneratorService()
    {
        $a = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer::class, NULL, $this);
        $a->setLogger(($this->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $this->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectRenderer'));

        return $this->services['TYPO3\\CMS\\Seo\\HrefLang\\HrefLangGenerator'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Seo\HrefLang\HrefLangGenerator::class, $a, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Frontend\DataProcessing\LanguageMenuProcessor::class));
    }

    /**
     * Gets the public 'TYPO3\CMS\Seo\PageTitle\SeoTitlePageTitleProvider' shared autowired service.
     *
     * @return \TYPO3\CMS\Seo\PageTitle\SeoTitlePageTitleProvider
     */
    protected function getSeoTitlePageTitleProviderService()
    {
        return $this->services['TYPO3\\CMS\\Seo\\PageTitle\\SeoTitlePageTitleProvider'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Seo\PageTitle\SeoTitlePageTitleProvider::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Seo\XmlSitemap\XmlSitemapRenderer' autowired service.
     *
     * @return \TYPO3\CMS\Seo\XmlSitemap\XmlSitemapRenderer
     */
    protected function getXmlSitemapRendererService()
    {
        $this->factories['TYPO3\\CMS\\Seo\\XmlSitemap\\XmlSitemapRenderer'] = function () {
            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Seo\XmlSitemap\XmlSitemapRenderer::class, ($this->services['TYPO3\\CMS\\Core\\TypoScript\\TypoScriptService'] ?? $this->getTypoScriptServiceService()));
        };

        return $this->factories['TYPO3\\CMS\\Seo\\XmlSitemap\\XmlSitemapRenderer']();
    }

    /**
     * Gets the public 'TYPO3\CMS\Setup\Controller\SetupModuleController' autowired service.
     *
     * @return \TYPO3\CMS\Setup\Controller\SetupModuleController
     */
    protected function getSetupModuleControllerService()
    {
        $this->factories['TYPO3\\CMS\\Setup\\Controller\\SetupModuleController'] = function () {
            $a = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());
            $b = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));

            return \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Setup\Controller\SetupModuleController::class, ($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()), ($this->services['TYPO3\\CMS\\Core\\Authentication\\Mfa\\MfaProviderRegistry'] ?? $this->getMfaProviderRegistryService()), $a, $b, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $b, $a, ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())), ($this->services['TYPO3\\CMS\\Core\\Localization\\LanguageServiceFactory'] ?? $this->getLanguageServiceFactoryService()));
        };

        return $this->factories['TYPO3\\CMS\\Setup\\Controller\\SetupModuleController']();
    }

    /**
     * Gets the public 'TYPO3\CMS\SysNote\Provider\RecordListProvider' shared autowired service.
     *
     * @return \TYPO3\CMS\SysNote\Provider\RecordListProvider
     */
    protected function getRecordListProviderService()
    {
        return $this->services['TYPO3\\CMS\\SysNote\\Provider\\RecordListProvider'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\SysNote\Provider\RecordListProvider::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\SysNote\Controller\NoteController::class));
    }

    /**
     * Gets the public 'TYPO3\CMS\T3editor\Registry\AddonRegistry' shared autowired service.
     *
     * @return \TYPO3\CMS\T3editor\Registry\AddonRegistry
     */
    protected function getAddonRegistryService()
    {
        return $this->services['TYPO3\\CMS\\T3editor\\Registry\\AddonRegistry'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\T3editor\Registry\AddonRegistry::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\T3editor\Registry\ModeRegistry' shared autowired service.
     *
     * @return \TYPO3\CMS\T3editor\Registry\ModeRegistry
     */
    protected function getModeRegistryService()
    {
        return $this->services['TYPO3\\CMS\\T3editor\\Registry\\ModeRegistry'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\T3editor\Registry\ModeRegistry::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\T3editor\T3editor' shared autowired service.
     *
     * @return \TYPO3\CMS\T3editor\T3editor
     */
    protected function getT3editorService()
    {
        return $this->services['TYPO3\\CMS\\T3editor\\T3editor'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\T3editor\T3editor::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Tstemplate\Controller\TypoScriptTemplateInformationModuleFunctionController' shared autowired service.
     *
     * @return \TYPO3\CMS\Tstemplate\Controller\TypoScriptTemplateInformationModuleFunctionController
     */
    protected function getTypoScriptTemplateInformationModuleFunctionControllerService()
    {
        return $this->services['TYPO3\\CMS\\Tstemplate\\Controller\\TypoScriptTemplateInformationModuleFunctionController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Tstemplate\Controller\TypoScriptTemplateInformationModuleFunctionController::class, ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Tstemplate\Controller\TypoScriptTemplateModuleController' shared autowired service.
     *
     * @return \TYPO3\CMS\Tstemplate\Controller\TypoScriptTemplateModuleController
     */
    protected function getTypoScriptTemplateModuleControllerService()
    {
        $a = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());
        $b = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));

        return $this->services['TYPO3\\CMS\\Tstemplate\\Controller\\TypoScriptTemplateModuleController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Tstemplate\Controller\TypoScriptTemplateModuleController::class, $a, $b, ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $b, $a, ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())));
    }

    /**
     * Gets the public 'TYPO3\CMS\Tstemplate\Hooks\DataHandlerClearCachePostProcHook' shared autowired service.
     *
     * @return \TYPO3\CMS\Tstemplate\Hooks\DataHandlerClearCachePostProcHook
     */
    protected function getDataHandlerClearCachePostProcHookService()
    {
        return $this->services['TYPO3\\CMS\\Tstemplate\\Hooks\\DataHandlerClearCachePostProcHook'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Tstemplate\Hooks\DataHandlerClearCachePostProcHook::class, ($this->services['TYPO3\\CMS\\Core\\Cache\\CacheManager'] ?? $this->getCacheManagerService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Viewpage\Controller\ViewModuleController' shared autowired service.
     *
     * @return \TYPO3\CMS\Viewpage\Controller\ViewModuleController
     */
    protected function getViewModuleControllerService()
    {
        $a = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));
        $b = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());

        return $this->services['TYPO3\\CMS\\Viewpage\\Controller\\ViewModuleController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Viewpage\Controller\ViewModuleController::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $a, $b, ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())), $b, $a, ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), ($this->privates['TYPO3\\CMS\\Core\\Domain\\Repository\\PageRepository'] ?? $this->getPageRepositoryService()), ($this->privates['TYPO3\\CMS\\Core\\Site\\SiteFinder'] ?? $this->getSiteFinderService()));
    }

    /**
     * Gets the public 'TYPO3\CMS\Workspaces\Command\AutoPublishCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Workspaces\Command\AutoPublishCommand
     */
    protected function getAutoPublishCommandService()
    {
        $this->services['TYPO3\\CMS\\Workspaces\\Command\\AutoPublishCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Command\AutoPublishCommand::class, ($this->services['TYPO3\\CMS\\Workspaces\\Service\\WorkspaceService'] ?? ($this->services['TYPO3\\CMS\\Workspaces\\Service\\WorkspaceService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Service\WorkspaceService::class))), ($this->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? $this->getConnectionPoolService()));

        $instance->setName('workspace:autopublish');
        $instance->setDescription('Publish a workspace with a publication date.');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Workspaces\Command\CleanupPreviewLinksCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Workspaces\Command\CleanupPreviewLinksCommand
     */
    protected function getCleanupPreviewLinksCommandService()
    {
        $this->services['TYPO3\\CMS\\Workspaces\\Command\\CleanupPreviewLinksCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Command\CleanupPreviewLinksCommand::class, ($this->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? $this->getConnectionPoolService()));

        $instance->setName('cleanup:previewlinks');
        $instance->setDescription('Clean up expired preview links from shared workspace previews.');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Workspaces\Command\WorkspaceVersionRecordsCommand' shared autowired service.
     *
     * @return \TYPO3\CMS\Workspaces\Command\WorkspaceVersionRecordsCommand
     */
    protected function getWorkspaceVersionRecordsCommandService()
    {
        $this->services['TYPO3\\CMS\\Workspaces\\Command\\WorkspaceVersionRecordsCommand'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Command\WorkspaceVersionRecordsCommand::class, ($this->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? $this->getConnectionPoolService()));

        $instance->setName('cleanup:versions');
        $instance->setDescription('Find all versioned records and possibly cleans up invalid records in the database.');

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Workspaces\Controller\PreviewController' shared autowired service.
     *
     * @return \TYPO3\CMS\Workspaces\Controller\PreviewController
     */
    protected function getPreviewControllerService()
    {
        $a = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));

        return $this->services['TYPO3\\CMS\\Workspaces\\Controller\\PreviewController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Controller\PreviewController::class, ($this->services['TYPO3\\CMS\\Workspaces\\Service\\StagesService'] ?? ($this->services['TYPO3\\CMS\\Workspaces\\Service\\StagesService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Service\StagesService::class))), ($this->services['TYPO3\\CMS\\Workspaces\\Service\\WorkspaceService'] ?? ($this->services['TYPO3\\CMS\\Workspaces\\Service\\WorkspaceService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Service\WorkspaceService::class))), $a, ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), ($this->privates['TYPO3\\CMS\\Core\\Site\\SiteFinder'] ?? $this->getSiteFinderService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $a, ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService()), ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())));
    }

    /**
     * Gets the public 'TYPO3\CMS\Workspaces\Controller\ReviewController' shared autowired service.
     *
     * @return \TYPO3\CMS\Workspaces\Controller\ReviewController
     */
    protected function getReviewControllerService()
    {
        $a = ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService());
        $b = ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] ?? ($this->services['TYPO3\\CMS\\Core\\Page\\PageRenderer'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Page\PageRenderer::class)));

        return $this->services['TYPO3\\CMS\\Workspaces\\Controller\\ReviewController'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Controller\ReviewController::class, ($this->services['TYPO3\\CMS\\Workspaces\\Service\\WorkspaceService'] ?? ($this->services['TYPO3\\CMS\\Workspaces\\Service\\WorkspaceService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Service\WorkspaceService::class))), ($this->services['TYPO3\\CMS\\Workspaces\\Service\\StagesService'] ?? ($this->services['TYPO3\\CMS\\Workspaces\\Service\\StagesService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Service\StagesService::class))), $a, $b, ($this->services['TYPO3\\CMS\\Backend\\Routing\\UriBuilder'] ?? $this->getUriBuilderService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Template\ModuleTemplateFactory::class, $b, $a, ($this->services['TYPO3\\CMS\\Core\\Messaging\\FlashMessageService'] ?? $this->getFlashMessageServiceService())));
    }

    /**
     * Gets the public 'TYPO3\CMS\Workspaces\Middleware\WorkspacePreview' shared autowired service.
     *
     * @return \TYPO3\CMS\Workspaces\Middleware\WorkspacePreview
     */
    protected function getWorkspacePreviewService()
    {
        return $this->services['TYPO3\\CMS\\Workspaces\\Middleware\\WorkspacePreview'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Middleware\WorkspacePreview::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Workspaces\Middleware\WorkspacePreviewPermissions' shared autowired service.
     *
     * @return \TYPO3\CMS\Workspaces\Middleware\WorkspacePreviewPermissions
     */
    protected function getWorkspacePreviewPermissionsService()
    {
        return $this->services['TYPO3\\CMS\\Workspaces\\Middleware\\WorkspacePreviewPermissions'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Middleware\WorkspacePreviewPermissions::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Workspaces\Preview\PreviewUriBuilder' shared autowired service.
     *
     * @return \TYPO3\CMS\Workspaces\Preview\PreviewUriBuilder
     */
    protected function getPreviewUriBuilderService()
    {
        return $this->services['TYPO3\\CMS\\Workspaces\\Preview\\PreviewUriBuilder'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Preview\PreviewUriBuilder::class, ($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()), ($this->services['TYPO3\\CMS\\Workspaces\\Service\\WorkspaceService'] ?? ($this->services['TYPO3\\CMS\\Workspaces\\Service\\WorkspaceService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Service\WorkspaceService::class))));
    }

    /**
     * Gets the public 'TYPO3\CMS\Workspaces\Service\Dependency\CollectionService' shared autowired service.
     *
     * @return \TYPO3\CMS\Workspaces\Service\Dependency\CollectionService
     */
    protected function getCollectionServiceService()
    {
        return $this->services['TYPO3\\CMS\\Workspaces\\Service\\Dependency\\CollectionService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Service\Dependency\CollectionService::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Workspaces\Service\GridDataService' shared autowired service.
     *
     * @return \TYPO3\CMS\Workspaces\Service\GridDataService
     */
    protected function getGridDataServiceService()
    {
        $this->services['TYPO3\\CMS\\Workspaces\\Service\\GridDataService'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Service\GridDataService::class, ($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()));

        $instance->setLogger(($this->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $this->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Workspaces\\Service\\GridDataService'));

        return $instance;
    }

    /**
     * Gets the public 'TYPO3\CMS\Workspaces\Service\HistoryService' shared autowired service.
     *
     * @return \TYPO3\CMS\Workspaces\Service\HistoryService
     */
    protected function getHistoryServiceService()
    {
        return $this->services['TYPO3\\CMS\\Workspaces\\Service\\HistoryService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Service\HistoryService::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Workspaces\Service\RecordService' shared autowired service.
     *
     * @return \TYPO3\CMS\Workspaces\Service\RecordService
     */
    protected function getRecordServiceService()
    {
        return $this->services['TYPO3\\CMS\\Workspaces\\Service\\RecordService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Service\RecordService::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Workspaces\Service\StagesService' shared autowired service.
     *
     * @return \TYPO3\CMS\Workspaces\Service\StagesService
     */
    protected function getStagesServiceService()
    {
        return $this->services['TYPO3\\CMS\\Workspaces\\Service\\StagesService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Service\StagesService::class);
    }

    /**
     * Gets the public 'TYPO3\CMS\Workspaces\Service\WorkspaceService' shared autowired service.
     *
     * @return \TYPO3\CMS\Workspaces\Service\WorkspaceService
     */
    protected function getWorkspaceServiceService()
    {
        return $this->services['TYPO3\\CMS\\Workspaces\\Service\\WorkspaceService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Workspaces\Service\WorkspaceService::class);
    }

    /**
     * Gets the public 'TYPO3\SymfonyPsrEventDispatcherAdapter\EventDispatcherAdapter' shared service.
     *
     * @return \Symfony\Contracts\EventDispatcher\EventDispatcherInterface
     */
    protected function getEventDispatcherAdapterService()
    {
        return $this->services['TYPO3\\SymfonyPsrEventDispatcherAdapter\\EventDispatcherAdapter'] = \TYPO3\CMS\Core\ServiceProvider::getSymfonyEventDispatcher($this);
    }

    /**
     * Gets the public 'backend.middlewares' shared service.
     *
     * @return \ArrayObject
     */
    protected function getBackend_MiddlewaresService()
    {
        return $this->services['backend.middlewares'] = \TYPO3\CMS\Backend\ServiceProvider::getBackendMiddlewares($this);
    }

    /**
     * Gets the public 'backend.routes.warmer' shared service.
     *
     * @return \Closure
     */
    protected function getBackend_Routes_WarmerService()
    {
        return $this->services['backend.routes.warmer'] = \TYPO3\CMS\Backend\ServiceProvider::getBackendRoutesWarmer($this);
    }

    /**
     * Gets the public 'backend.routes_decorated_36' shared service.
     *
     * @return \ArrayObject
     */
    protected function getBackend_RoutesDecorated36Service()
    {
        $a = ($this->services['service_provider_registry'] ?? $this->get('service_provider_registry', 1));

        return $this->services['backend.routes_decorated_36'] = $a->extendService('helhum/typo3-console', 'backend.routes', $this, $a->extendService('workspaces', 'backend.routes', $this, $a->extendService('viewpage', 'backend.routes', $this, $a->extendService('tstemplate', 'backend.routes', $this, $a->extendService('t3editor', 'backend.routes', $this, $a->extendService('sys_note', 'backend.routes', $this, $a->extendService('opendocs', 'backend.routes', $this, \TYPO3\CMS\Lowlevel\ServiceProvider::configureBackendRoutes($this, $a->extendService('filemetadata', 'backend.routes', $this, $a->extendService('felogin', 'backend.routes', $this, $a->extendService('extensionmanager', 'backend.routes', $this, $a->extendService('beuser', 'backend.routes', $this, $a->extendService('belog', 'backend.routes', $this, $a->extendService('rte_ckeditor', 'backend.routes', $this, $a->extendService('setup', 'backend.routes', $this, $a->extendService('recycler', 'backend.routes', $this, $a->extendService('indexed_search', 'backend.routes', $this, $a->extendService('seo', 'backend.routes', $this, $a->extendService('linkvalidator', 'backend.routes', $this, $a->extendService('info', 'backend.routes', $this, $a->extendService('form', 'backend.routes', $this, $a->extendService('impexp', 'backend.routes', $this, $a->extendService('filelist', 'backend.routes', $this, $a->extendService('fluid_styled_content', 'backend.routes', $this, $a->extendService('redirects', 'backend.routes', $this, $a->extendService('reports', 'backend.routes', $this, \TYPO3\CMS\Dashboard\ServiceProvider::configureBackendRoutes($this, $a->extendService('adminpanel', 'backend.routes', $this, \TYPO3\CMS\Frontend\ServiceProvider::configureBackendRoutes($this, \TYPO3\CMS\Backend\ServiceProvider::configureBackendRoutes($this, $a->extendService('recordlist', 'backend.routes', $this, \TYPO3\CMS\Install\ServiceProvider::configureBackendRoutes($this, \TYPO3\CMS\Fluid\ServiceProvider::configureBackendRoutes($this, \TYPO3\CMS\Extbase\ServiceProvider::configureBackendRoutes($this, $a->extendService('scheduler', 'backend.routes', $this, \TYPO3\CMS\Core\ServiceProvider::configureBackendRoutes($this, \TYPO3\CMS\Backend\ServiceProvider::getBackendRoutes($this)))))))))))))))))))))))))))))))))))));
    }

    /**
     * Gets the public 'container.env_var_processors_locator' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected function getContainer_EnvVarProcessorsLocatorService()
    {
        return $this->services['container.env_var_processors_locator'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\Symfony\Component\DependencyInjection\Argument\ServiceLocator::class, $this->getService, [
            'TYPO3' => ['privates', 'TYPO3\\CMS\\Core\\DependencyInjection\\EnvVarProcessor', 'getEnvVarProcessorService', false],
        ], [
            'TYPO3' => '?',
        ]);
    }

    /**
     * Gets the public 'dashboard.configuration.warmer' shared service.
     *
     * @return \Closure
     */
    protected function getDashboard_Configuration_WarmerService()
    {
        return $this->services['dashboard.configuration.warmer'] = \TYPO3\CMS\Dashboard\ServiceProvider::getConfigurationWarmer($this);
    }

    /**
     * Gets the public 'dashboard.presets_decorated_1' shared service.
     *
     * @return \ArrayObject
     */
    protected function getDashboard_PresetsDecorated1Service()
    {
        return $this->services['dashboard.presets_decorated_1'] = \TYPO3\CMS\Dashboard\ServiceProvider::configureDashboardPresets($this, \TYPO3\CMS\Dashboard\ServiceProvider::getDashboardPresets($this));
    }

    /**
     * Gets the public 'dashboard.views.widget' autowired service.
     *
     * @return \TYPO3\CMS\Fluid\View\StandaloneView
     */
    protected function getDashboard_Views_WidgetService()
    {
        $this->factories['dashboard.views.widget'] = function () {
            return \TYPO3\CMS\Dashboard\Views\Factory::widgetTemplate();
        };

        return $this->factories['dashboard.views.widget']();
    }

    /**
     * Gets the public 'dashboard.widget.docGettingStarted' shared autowired service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\CtaWidget
     */
    protected function getDashboard_Widget_DocGettingStartedService()
    {
        return $this->services['dashboard.widget.docGettingStarted'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\CtaWidget::class, ($this->services['docGettingStartedWidgetConfiguration'] ?? $this->getDocGettingStartedWidgetConfigurationService()), \TYPO3\CMS\Dashboard\Views\Factory::widgetTemplate(), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\Provider\ButtonProvider::class, 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.documentation.gettingStarted.content.label', 'https://docs.typo3.org/m/typo3/tutorial-getting-started/master/en-us/Index.html', '_blank'), ['text' => 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.documentation.gettingStarted.text']);
    }

    /**
     * Gets the public 'dashboard.widget.docTSconfig' shared autowired service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\CtaWidget
     */
    protected function getDashboard_Widget_DocTSconfigService()
    {
        return $this->services['dashboard.widget.docTSconfig'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\CtaWidget::class, ($this->services['docTSconfigWidgetConfiguration'] ?? $this->getDocTSconfigWidgetConfigurationService()), \TYPO3\CMS\Dashboard\Views\Factory::widgetTemplate(), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\Provider\ButtonProvider::class, 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.documentation.TSconfigReference.content.label', 'https://docs.typo3.org/m/typo3/reference-tsconfig/master/en-us/Index.html', '_blank'), ['text' => 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.documentation.TSconfigReference.text']);
    }

    /**
     * Gets the public 'dashboard.widget.docTypoScriptReference' shared autowired service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\CtaWidget
     */
    protected function getDashboard_Widget_DocTypoScriptReferenceService()
    {
        return $this->services['dashboard.widget.docTypoScriptReference'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\CtaWidget::class, ($this->services['docTypoScriptReferenceWidgetConfiguration'] ?? $this->getDocTypoScriptReferenceWidgetConfigurationService()), \TYPO3\CMS\Dashboard\Views\Factory::widgetTemplate(), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\Provider\ButtonProvider::class, 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.documentation.typoscriptReference.content.label', 'https://docs.typo3.org/m/typo3/reference-typoscript/master/en-us/Index.html', '_blank'), ['text' => 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.documentation.typoscriptReference.text']);
    }

    /**
     * Gets the public 'dashboard.widget.failedLogins' shared autowired service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\NumberWithIconWidget
     */
    protected function getDashboard_Widget_FailedLoginsService()
    {
        return $this->services['dashboard.widget.failedLogins'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\NumberWithIconWidget::class, ($this->services['failedLoginsWidgetConfiguration'] ?? $this->getFailedLoginsWidgetConfigurationService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\Provider\NumberOfFailedLoginsDataProvider::class), \TYPO3\CMS\Dashboard\Views\Factory::widgetTemplate(), ['title' => 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.failedLogins.title', 'subtitle' => 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.failedLogins.subtitle', 'icon' => 'content-elements-login']);
    }

    /**
     * Gets the public 'dashboard.widget.sysLogErrors' shared autowired service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\BarChartWidget
     */
    protected function getDashboard_Widget_SysLogErrorsService()
    {
        return $this->services['dashboard.widget.sysLogErrors'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\BarChartWidget::class, ($this->services['sysLogErrorsWidgetConfiguration'] ?? $this->getSysLogErrorsWidgetConfigurationService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\Provider\SysLogErrorsDataProvider::class), \TYPO3\CMS\Dashboard\Views\Factory::widgetTemplate(), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\Provider\SysLogButtonProvider::class, 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.sysLogErrors.buttonText'), ['refreshAvailable' => true]);
    }

    /**
     * Gets the public 'dashboard.widget.t3information' shared autowired service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\T3GeneralInformationWidget
     */
    protected function getDashboard_Widget_T3informationService()
    {
        return $this->services['dashboard.widget.t3information'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\T3GeneralInformationWidget::class, ($this->services['t3informationWidgetConfiguration'] ?? $this->getT3informationWidgetConfigurationService()), \TYPO3\CMS\Dashboard\Views\Factory::widgetTemplate());
    }

    /**
     * Gets the public 'dashboard.widget.t3news' shared autowired service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\RssWidget
     */
    protected function getDashboard_Widget_T3newsService()
    {
        return $this->services['dashboard.widget.t3news'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\RssWidget::class, ($this->services['t3newsWidgetConfiguration'] ?? $this->getT3newsWidgetConfigurationService()), ($this->privates['cache.dashboard.rss'] ?? $this->getCache_Dashboard_RssService()), \TYPO3\CMS\Dashboard\Views\Factory::widgetTemplate(), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\Provider\ButtonProvider::class, 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.t3news.moreItems', 'https://typo3.org/project/news', '_blank'), ['feedUrl' => 'https://typo3.org/rss']);
    }

    /**
     * Gets the public 'dashboard.widget.t3securityAdvisories' shared autowired service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\RssWidget
     */
    protected function getDashboard_Widget_T3securityAdvisoriesService()
    {
        return $this->services['dashboard.widget.t3securityAdvisories'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\RssWidget::class, ($this->services['t3securityAdvisoriesWidgetConfiguration'] ?? $this->getT3securityAdvisoriesWidgetConfigurationService()), ($this->privates['cache.dashboard.rss'] ?? $this->getCache_Dashboard_RssService()), \TYPO3\CMS\Dashboard\Views\Factory::widgetTemplate(), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\Provider\ButtonProvider::class, 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.t3securityAdvisories.moreItems', 'https://typo3.org/help/security-advisories', '_blank'), ['feedUrl' => 'https://typo3.org/rss-security']);
    }

    /**
     * Gets the public 'dashboard.widget.typeOfUsers' shared autowired service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\DoughnutChartWidget
     */
    protected function getDashboard_Widget_TypeOfUsersService()
    {
        return $this->services['dashboard.widget.typeOfUsers'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\DoughnutChartWidget::class, ($this->services['typeOfUsersWidgetConfiguration'] ?? $this->getTypeOfUsersWidgetConfigurationService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\Provider\TypeOfUsersChartDataProvider::class, ($this->services['TYPO3\\CMS\\Core\\Localization\\LanguageServiceFactory'] ?? $this->getLanguageServiceFactoryService())), \TYPO3\CMS\Dashboard\Views\Factory::widgetTemplate());
    }

    /**
     * Gets the public 'dashboard.widgetGroups_decorated_1' shared service.
     *
     * @return \ArrayObject
     */
    protected function getDashboard_WidgetGroupsDecorated1Service()
    {
        return $this->services['dashboard.widgetGroups_decorated_1'] = \TYPO3\CMS\Dashboard\ServiceProvider::configureWidgetGroups($this, \TYPO3\CMS\Dashboard\ServiceProvider::getWidgetGroups($this));
    }

    /**
     * Gets the public 'dashboard.widgets_decorated_1' shared service.
     *
     * @return \ArrayObject
     */
    protected function getDashboard_WidgetsDecorated1Service()
    {
        return $this->services['dashboard.widgets_decorated_1'] = \TYPO3\CMS\Dashboard\ServiceProvider::configureWidgets($this, \TYPO3\CMS\Dashboard\ServiceProvider::getWidgets($this));
    }

    /**
     * Gets the public 'docGettingStartedWidgetConfiguration' shared service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration
     */
    protected function getDocGettingStartedWidgetConfigurationService()
    {
        return $this->services['docGettingStartedWidgetConfiguration'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration::class, 'docGettingStarted', 'dashboard.widget.docGettingStarted', [0 => 'documentation'], 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.documentation.gettingStarted.title', 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.documentation.gettingStarted.description', 'content-widget-text', 'small', 'small', []);
    }

    /**
     * Gets the public 'docTSconfigWidgetConfiguration' shared service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration
     */
    protected function getDocTSconfigWidgetConfigurationService()
    {
        return $this->services['docTSconfigWidgetConfiguration'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration::class, 'docTSconfig', 'dashboard.widget.docTSconfig', [0 => 'documentation'], 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.documentation.TSconfigReference.title', 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.documentation.TSconfigReference.description', 'content-widget-text', 'small', 'small', []);
    }

    /**
     * Gets the public 'docTypoScriptReferenceWidgetConfiguration' shared service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration
     */
    protected function getDocTypoScriptReferenceWidgetConfigurationService()
    {
        return $this->services['docTypoScriptReferenceWidgetConfiguration'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration::class, 'docTypoScriptReference', 'dashboard.widget.docTypoScriptReference', [0 => 'documentation'], 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.documentation.typoscriptReference.title', 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.documentation.typoscriptReference.description', 'content-widget-text', 'small', 'small', []);
    }

    /**
     * Gets the public 'failedLoginsWidgetConfiguration' shared service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration
     */
    protected function getFailedLoginsWidgetConfigurationService()
    {
        return $this->services['failedLoginsWidgetConfiguration'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration::class, 'failedLogins', 'dashboard.widget.failedLogins', [0 => 'systemInfo'], 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.failedLogins.title', 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.failedLogins.description', 'content-widget-number', 'small', 'small', []);
    }

    /**
     * Gets the public 'frontend.middlewares' shared service.
     *
     * @return \ArrayObject
     */
    protected function getFrontend_MiddlewaresService()
    {
        return $this->services['frontend.middlewares'] = \TYPO3\CMS\Frontend\ServiceProvider::getFrontendMiddlewares($this);
    }

    /**
     * Gets the public 'icons_decorated_36' shared service.
     *
     * @return \ArrayObject
     */
    protected function getIconsDecorated36Service()
    {
        $a = ($this->services['service_provider_registry'] ?? $this->get('service_provider_registry', 1));

        return $this->services['icons_decorated_36'] = $a->extendService('helhum/typo3-console', 'icons', $this, $a->extendService('workspaces', 'icons', $this, $a->extendService('viewpage', 'icons', $this, $a->extendService('tstemplate', 'icons', $this, $a->extendService('t3editor', 'icons', $this, $a->extendService('sys_note', 'icons', $this, $a->extendService('opendocs', 'icons', $this, \TYPO3\CMS\Lowlevel\ServiceProvider::configureIcons($this, $a->extendService('filemetadata', 'icons', $this, $a->extendService('felogin', 'icons', $this, $a->extendService('extensionmanager', 'icons', $this, $a->extendService('beuser', 'icons', $this, $a->extendService('belog', 'icons', $this, $a->extendService('rte_ckeditor', 'icons', $this, $a->extendService('setup', 'icons', $this, $a->extendService('recycler', 'icons', $this, $a->extendService('indexed_search', 'icons', $this, $a->extendService('seo', 'icons', $this, $a->extendService('linkvalidator', 'icons', $this, $a->extendService('info', 'icons', $this, $a->extendService('form', 'icons', $this, $a->extendService('impexp', 'icons', $this, $a->extendService('filelist', 'icons', $this, $a->extendService('fluid_styled_content', 'icons', $this, $a->extendService('redirects', 'icons', $this, $a->extendService('reports', 'icons', $this, \TYPO3\CMS\Dashboard\ServiceProvider::configureIcons($this, $a->extendService('adminpanel', 'icons', $this, \TYPO3\CMS\Frontend\ServiceProvider::configureIcons($this, \TYPO3\CMS\Backend\ServiceProvider::configureIcons($this, $a->extendService('recordlist', 'icons', $this, \TYPO3\CMS\Install\ServiceProvider::configureIcons($this, \TYPO3\CMS\Fluid\ServiceProvider::configureIcons($this, \TYPO3\CMS\Extbase\ServiceProvider::configureIcons($this, $a->extendService('scheduler', 'icons', $this, \TYPO3\CMS\Core\ServiceProvider::configureIcons($this, \TYPO3\CMS\Core\ServiceProvider::getIcons($this)))))))))))))))))))))))))))))))))))));
    }

    /**
     * Gets the public 'middlewares_decorated_35' shared service.
     *
     * @return \ArrayObject
     */
    protected function getMiddlewaresDecorated35Service()
    {
        $a = ($this->services['service_provider_registry'] ?? $this->get('service_provider_registry', 1));

        return $this->services['middlewares_decorated_35'] = $a->extendService('helhum/typo3-console', 'middlewares', $this, $a->extendService('workspaces', 'middlewares', $this, $a->extendService('viewpage', 'middlewares', $this, $a->extendService('tstemplate', 'middlewares', $this, $a->extendService('t3editor', 'middlewares', $this, $a->extendService('sys_note', 'middlewares', $this, $a->extendService('opendocs', 'middlewares', $this, \TYPO3\CMS\Lowlevel\ServiceProvider::configureMiddlewares($this, $a->extendService('filemetadata', 'middlewares', $this, $a->extendService('felogin', 'middlewares', $this, $a->extendService('extensionmanager', 'middlewares', $this, $a->extendService('beuser', 'middlewares', $this, $a->extendService('belog', 'middlewares', $this, $a->extendService('rte_ckeditor', 'middlewares', $this, $a->extendService('setup', 'middlewares', $this, $a->extendService('recycler', 'middlewares', $this, $a->extendService('indexed_search', 'middlewares', $this, $a->extendService('seo', 'middlewares', $this, $a->extendService('linkvalidator', 'middlewares', $this, $a->extendService('info', 'middlewares', $this, $a->extendService('form', 'middlewares', $this, $a->extendService('impexp', 'middlewares', $this, $a->extendService('filelist', 'middlewares', $this, $a->extendService('fluid_styled_content', 'middlewares', $this, $a->extendService('redirects', 'middlewares', $this, $a->extendService('reports', 'middlewares', $this, \TYPO3\CMS\Dashboard\ServiceProvider::configureMiddlewares($this, $a->extendService('adminpanel', 'middlewares', $this, \TYPO3\CMS\Frontend\ServiceProvider::configureMiddlewares($this, \TYPO3\CMS\Backend\ServiceProvider::configureMiddlewares($this, $a->extendService('recordlist', 'middlewares', $this, \TYPO3\CMS\Fluid\ServiceProvider::configureMiddlewares($this, \TYPO3\CMS\Extbase\ServiceProvider::configureMiddlewares($this, $a->extendService('scheduler', 'middlewares', $this, \TYPO3\CMS\Core\ServiceProvider::configureMiddlewares($this, \TYPO3\CMS\Core\ServiceProvider::getMiddlewares($this))))))))))))))))))))))))))))))))))));
    }

    /**
     * Gets the public 'sysLogErrorsWidgetConfiguration' shared service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration
     */
    protected function getSysLogErrorsWidgetConfigurationService()
    {
        return $this->services['sysLogErrorsWidgetConfiguration'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration::class, 'sysLogErrors', 'dashboard.widget.sysLogErrors', [0 => 'systemInfo'], 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.sysLogErrors.title', 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.sysLogErrors.description', 'content-widget-chart-bar', 'medium', 'medium', []);
    }

    /**
     * Gets the public 't3informationWidgetConfiguration' shared service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration
     */
    protected function getT3informationWidgetConfigurationService()
    {
        return $this->services['t3informationWidgetConfiguration'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration::class, 't3information', 'dashboard.widget.t3information', [0 => 'general'], 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.t3information.title', 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.t3information.description', 'content-widget-text', 'medium', 'medium', []);
    }

    /**
     * Gets the public 't3newsWidgetConfiguration' shared service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration
     */
    protected function getT3newsWidgetConfigurationService()
    {
        return $this->services['t3newsWidgetConfiguration'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration::class, 't3news', 'dashboard.widget.t3news', [0 => 'news'], 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.t3news.title', 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.t3news.description', 'content-widget-rss', 'large', 'medium', []);
    }

    /**
     * Gets the public 't3securityAdvisoriesWidgetConfiguration' shared service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration
     */
    protected function getT3securityAdvisoriesWidgetConfigurationService()
    {
        return $this->services['t3securityAdvisoriesWidgetConfiguration'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration::class, 't3securityAdvisories', 'dashboard.widget.t3securityAdvisories', [0 => 'news'], 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.t3securityAdvisories.title', 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.t3securityAdvisories.description', 'content-widget-rss', 'large', 'medium', []);
    }

    /**
     * Gets the public 'typeOfUsersWidgetConfiguration' shared service.
     *
     * @return \TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration
     */
    protected function getTypeOfUsersWidgetConfigurationService()
    {
        return $this->services['typeOfUsersWidgetConfiguration'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\Widgets\WidgetConfiguration::class, 'typeOfUsers', 'dashboard.widget.typeOfUsers', [0 => 'systemInfo'], 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.typeOfUsers.title', 'LLL:EXT:dashboard/Resources/Private/Language/locallang.xlf:widgets.typeOfUsers.description', 'content-widget-chart-pie', 'medium', 'small', []);
    }

    /**
     * Gets the private 'TYPO3\CMS\Backend\Authentication\PasswordReset' shared autowired service.
     *
     * @return \TYPO3\CMS\Backend\Authentication\PasswordReset
     */
    protected function getPasswordResetService()
    {
        $this->privates['TYPO3\\CMS\\Backend\\Authentication\\PasswordReset'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Backend\Authentication\PasswordReset::class);

        $instance->setLogger(($this->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $this->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Backend\\Authentication\\PasswordReset'));

        return $instance;
    }

    /**
     * Gets the private 'TYPO3\CMS\Beuser\Service\UserInformationService' shared autowired service.
     *
     * @return \TYPO3\CMS\Beuser\Service\UserInformationService
     */
    protected function getUserInformationServiceService()
    {
        return $this->privates['TYPO3\\CMS\\Beuser\\Service\\UserInformationService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Beuser\Service\UserInformationService::class, ($this->services['TYPO3\\CMS\\Core\\Imaging\\IconFactory'] ?? $this->getIconFactoryService()));
    }

    /**
     * Gets the private 'TYPO3\CMS\Core\DependencyInjection\EnvVarProcessor' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\DependencyInjection\EnvVarProcessor
     */
    protected function getEnvVarProcessorService()
    {
        return $this->privates['TYPO3\\CMS\\Core\\DependencyInjection\\EnvVarProcessor'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\DependencyInjection\EnvVarProcessor::class);
    }

    /**
     * Gets the private 'TYPO3\CMS\Core\Domain\Repository\PageRepository' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Domain\Repository\PageRepository
     */
    protected function getPageRepositoryService()
    {
        $this->privates['TYPO3\\CMS\\Core\\Domain\\Repository\\PageRepository'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Domain\Repository\PageRepository::class, ($this->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? $this->getContextService()));

        $instance->setLogger(($this->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $this->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Core\\Domain\\Repository\\PageRepository'));

        return $instance;
    }

    /**
     * Gets the private 'TYPO3\CMS\Core\Resource\Service\ImageProcessingService' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Resource\Service\ImageProcessingService
     */
    protected function getImageProcessingServiceService()
    {
        return $this->privates['TYPO3\\CMS\\Core\\Resource\\Service\\ImageProcessingService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Resource\Service\ImageProcessingService::class, ($this->services['TYPO3\\CMS\\Core\\Resource\\ProcessedFileRepository'] ?? $this->getProcessedFileRepositoryService()), ($this->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? $this->getContextService()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Locking\ResourceMutex::class, ($this->services['TYPO3\\CMS\\Core\\Locking\\LockFactory'] ?? ($this->services['TYPO3\\CMS\\Core\\Locking\\LockFactory'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Locking\LockFactory::class)))));
    }

    /**
     * Gets the private 'TYPO3\CMS\Core\Site\SiteFinder' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Site\SiteFinder
     */
    protected function getSiteFinderService()
    {
        return $this->privates['TYPO3\\CMS\\Core\\Site\\SiteFinder'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Site\SiteFinder::class, ($this->services['TYPO3\\CMS\\Core\\Configuration\\SiteConfiguration'] ?? $this->getSiteConfigurationService()));
    }

    /**
     * Gets the private 'TYPO3\CMS\Dashboard\DashboardRepository' shared autowired service.
     *
     * @return \TYPO3\CMS\Dashboard\DashboardRepository
     */
    protected function getDashboardRepositoryService()
    {
        return $this->privates['TYPO3\\CMS\\Dashboard\\DashboardRepository'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Dashboard\DashboardRepository::class, ($this->services['TYPO3\\CMS\\Core\\Database\\ConnectionPool'] ?? $this->getConnectionPoolService()), ($this->services['TYPO3\\CMS\\Dashboard\\WidgetRegistry'] ?? $this->getWidgetRegistryService()), $this);
    }

    /**
     * Gets the private 'TYPO3\CMS\Extbase\Mvc\RequestHandlerResolver' shared autowired service.
     *
     * @return \TYPO3\CMS\Extbase\Mvc\RequestHandlerResolver
     */
    protected function getRequestHandlerResolverService()
    {
        return $this->privates['TYPO3\\CMS\\Extbase\\Mvc\\RequestHandlerResolver'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\RequestHandlerResolver::class, $this, (\TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Configuration\RequestHandlersConfigurationFactory::class, ($this->privates['cache.extbase'] ?? $this->getCache_ExtbaseService()), ($this->services['_early.TYPO3\\CMS\\Core\\Package\\PackageManager'] ?? $this->get('_early.TYPO3\\CMS\\Core\\Package\\PackageManager', 1)), ($this->services['TYPO3\\CMS\\Core\\Package\\Cache\\PackageDependentCacheIdentifier'] ?? $this->getPackageDependentCacheIdentifierService())->withPrefix("RequestHandlers")->toString()))->createRequestHandlersConfiguration());
    }

    /**
     * Gets the private 'TYPO3\CMS\Extensionmanager\Package\ComposerDeficitDetector' shared autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Package\ComposerDeficitDetector
     */
    protected function getComposerDeficitDetectorService()
    {
        return $this->privates['TYPO3\\CMS\\Extensionmanager\\Package\\ComposerDeficitDetector'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Package\ComposerDeficitDetector::class, ($this->services['TYPO3\\CMS\\Extensionmanager\\Utility\\ListUtility'] ?? $this->getListUtilityService()));
    }

    /**
     * Gets the private 'TYPO3\CMS\Extensionmanager\Service\ComposerManifestProposalGenerator' shared autowired service.
     *
     * @return \TYPO3\CMS\Extensionmanager\Service\ComposerManifestProposalGenerator
     */
    protected function getComposerManifestProposalGeneratorService()
    {
        return $this->privates['TYPO3\\CMS\\Extensionmanager\\Service\\ComposerManifestProposalGenerator'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Service\ComposerManifestProposalGenerator::class, ($this->services['TYPO3\\CMS\\Core\\Http\\RequestFactory'] ?? $this->getRequestFactoryService()), ($this->services['TYPO3\\CMS\\Extensionmanager\\Utility\\EmConfUtility'] ?? ($this->services['TYPO3\\CMS\\Extensionmanager\\Utility\\EmConfUtility'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extensionmanager\Utility\EmConfUtility::class))));
    }

    /**
     * Gets the private 'TYPO3\CMS\Form\Mvc\Configuration\YamlSource' shared autowired service.
     *
     * @return \TYPO3\CMS\Form\Mvc\Configuration\YamlSource
     */
    protected function getYamlSourceService()
    {
        $this->privates['TYPO3\\CMS\\Form\\Mvc\\Configuration\\YamlSource'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Mvc\Configuration\YamlSource::class);

        $instance->injectFilePersistenceSlot(($this->services['TYPO3\\CMS\\Form\\Slot\\FilePersistenceSlot'] ?? ($this->services['TYPO3\\CMS\\Form\\Slot\\FilePersistenceSlot'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Form\Slot\FilePersistenceSlot::class))));

        return $instance;
    }

    /**
     * Gets the private 'TYPO3\CMS\FrontendLogin\Domain\Repository\FrontendUserRepository' shared autowired service.
     *
     * @return \TYPO3\CMS\FrontendLogin\Domain\Repository\FrontendUserRepository
     */
    protected function getFrontendUserRepository2Service()
    {
        return $this->privates['TYPO3\\CMS\\FrontendLogin\\Domain\\Repository\\FrontendUserRepository'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\FrontendLogin\Domain\Repository\FrontendUserRepository::class, ($this->privates['TYPO3\\CMS\\FrontendLogin\\Service\\UserService'] ?? ($this->privates['TYPO3\\CMS\\FrontendLogin\\Service\\UserService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\FrontendLogin\Service\UserService::class))), ($this->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? $this->getContextService()));
    }

    /**
     * Gets the private 'TYPO3\CMS\FrontendLogin\Redirect\RedirectHandler' shared autowired service.
     *
     * @return \TYPO3\CMS\FrontendLogin\Redirect\RedirectHandler
     */
    protected function getRedirectHandler2Service()
    {
        $a = ($this->privates['TYPO3\\CMS\\FrontendLogin\\Redirect\\ServerRequestHandler'] ?? ($this->privates['TYPO3\\CMS\\FrontendLogin\\Redirect\\ServerRequestHandler'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\FrontendLogin\Redirect\ServerRequestHandler::class)));
        $b = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\Web\Routing\UriBuilder::class);
        $b->injectConfigurationManager(($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService()));
        $b->injectExtensionService(($this->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? $this->getExtensionServiceService()));
        $b->initializeObject();
        $c = ($this->privates['TYPO3\\CMS\\FrontendLogin\\Service\\UserService'] ?? ($this->privates['TYPO3\\CMS\\FrontendLogin\\Service\\UserService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\FrontendLogin\Service\UserService::class)));

        return $this->privates['TYPO3\\CMS\\FrontendLogin\\Redirect\\RedirectHandler'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\FrontendLogin\Redirect\RedirectHandler::class, $a, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\FrontendLogin\Redirect\RedirectModeHandler::class, $b, $a, $c, ($this->privates['TYPO3\\CMS\\FrontendLogin\\Domain\\Repository\\FrontendUserRepository'] ?? $this->getFrontendUserRepository2Service()), \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\FrontendLogin\Domain\Repository\FrontendUserGroupRepository::class, $c)), ($this->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? $this->getContextService()));
    }

    /**
     * Gets the private 'TYPO3\CMS\FrontendLogin\Service\RecoveryService' shared autowired service.
     *
     * @return \TYPO3\CMS\FrontendLogin\Service\RecoveryService
     */
    protected function getRecoveryServiceService()
    {
        $a = ($this->services['TYPO3\\CMS\\Extbase\\Configuration\\ConfigurationManager'] ?? $this->getConfigurationManagerService());
        $b = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\FrontendLogin\Configuration\RecoveryConfiguration::class, ($this->services['TYPO3\\CMS\\Core\\Context\\Context'] ?? $this->getContextService()), $a, ($this->privates['TYPO3\\CMS\\Core\\Crypto\\Random'] ?? ($this->privates['TYPO3\\CMS\\Core\\Crypto\\Random'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\Crypto\Random::class))), ($this->services['TYPO3\\CMS\\Extbase\\Security\\Cryptography\\HashService'] ?? $this->getHashServiceService()));
        $b->setLogger(($this->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $this->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\FrontendLogin\\Configuration\\RecoveryConfiguration'));
        $c = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Extbase\Mvc\Web\Routing\UriBuilder::class);
        $c->injectConfigurationManager($a);
        $c->injectExtensionService(($this->services['TYPO3\\CMS\\Extbase\\Service\\ExtensionService'] ?? $this->getExtensionServiceService()));
        $c->initializeObject();

        return $this->privates['TYPO3\\CMS\\FrontendLogin\\Service\\RecoveryService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\FrontendLogin\Service\RecoveryService::class, ($this->services['TYPO3\\CMS\\Core\\Mail\\Mailer'] ?? $this->getMailerService()), ($this->services['Psr\\EventDispatcher\\EventDispatcherInterface_decorated_1'] ?? $this->getEventDispatcherInterfaceDecorated1Service()), $a, $b, $c, ($this->privates['TYPO3\\CMS\\FrontendLogin\\Domain\\Repository\\FrontendUserRepository'] ?? $this->getFrontendUserRepository2Service()));
    }

    /**
     * Gets the private 'TYPO3\CMS\Redirects\Service\RedirectService' shared autowired service.
     *
     * @return \TYPO3\CMS\Redirects\Service\RedirectService
     */
    protected function getRedirectServiceService()
    {
        $this->privates['TYPO3\\CMS\\Redirects\\Service\\RedirectService'] = $instance = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Redirects\Service\RedirectService::class, \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Redirects\Service\RedirectCacheService::class, ($this->services['TYPO3\\CMS\\Core\\Cache\\CacheManager'] ?? $this->getCacheManagerService())), ($this->services['TYPO3\\CMS\\Core\\LinkHandling\\LinkService'] ?? ($this->services['TYPO3\\CMS\\Core\\LinkHandling\\LinkService'] = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstanceForDi(\TYPO3\CMS\Core\LinkHandling\LinkService::class))), ($this->privates['TYPO3\\CMS\\Core\\Site\\SiteFinder'] ?? $this->getSiteFinderService()));

        $instance->setLogger(($this->services['_early.TYPO3\\CMS\\Core\\Log\\LogManager'] ?? $this->get('_early.TYPO3\\CMS\\Core\\Log\\LogManager', 1))->getLogger('TYPO3\\CMS\\Redirects\\Service\\RedirectService'));

        return $instance;
    }

    /**
     * Gets the private 'cache.dashboard.rss' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface
     */
    protected function getCache_Dashboard_RssService()
    {
        return $this->privates['cache.dashboard.rss'] = ($this->services['TYPO3\\CMS\\Core\\Cache\\CacheManager'] ?? $this->getCacheManagerService())->getCache('dashboard_rss');
    }

    /**
     * Gets the private 'cache.extbase' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface
     */
    protected function getCache_ExtbaseService()
    {
        return $this->privates['cache.extbase'] = ($this->services['TYPO3\\CMS\\Core\\Cache\\CacheManager'] ?? $this->getCacheManagerService())->getCache('extbase');
    }

    /**
     * Gets the private 'cache.runtime' shared autowired service.
     *
     * @return \TYPO3\CMS\Core\Cache\Frontend\FrontendInterface
     */
    protected function getCache_RuntimeService()
    {
        return $this->privates['cache.runtime'] = ($this->services['TYPO3\\CMS\\Core\\Cache\\CacheManager'] ?? $this->getCacheManagerService())->getCache('runtime');
    }
}

#